{
  "scope": "source.lua",

	"completions":
	[
		{ "trigger": "CCParticleMeteor_getLife()", "contents": "getLife()" }
,
		{ "trigger": "CCParticleMeteor_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleMeteor_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleMeteor_setStartSizeVar(float_size,)", "contents": "setStartSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleMeteor_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleMeteor_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleMeteor_getRadialAccelVar()", "contents": "getRadialAccelVar()" }
,
		{ "trigger": "CCParticleMeteor_getStartSpinVar()", "contents": "getStartSpinVar()" }
,
		{ "trigger": "CCParticleMeteor_setStartRadiusVar(float_startRadiusVar,)", "contents": "setStartRadiusVar(${1:float_startRadiusVar})" }
,
		{ "trigger": "CCParticleMeteor_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleMeteor_setTexture(CCTexture2D*_var,)", "contents": "setTexture(${1:CCTexture2D*_var})" }
,
		{ "trigger": "CCParticleMeteor_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleMeteor_isAutoRemoveOnFinish()", "contents": "isAutoRemoveOnFinish()" }
,
		{ "trigger": "CCParticleMeteor_getTotalParticles()", "contents": "getTotalParticles()" }
,
		{ "trigger": "CCParticleMeteor_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleMeteor_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleMeteor_setPositionType(tCCPositionType_type,)", "contents": "setPositionType(${1:tCCPositionType_type})" }
,
		{ "trigger": "CCParticleMeteor_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCParticleMeteor_setDisplayFrame(CCSpriteFrame*_spriteFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame*_spriteFrame})" }
,
		{ "trigger": "CCParticleMeteor_getSourcePosition()", "contents": "getSourcePosition()" }
,
		{ "trigger": "CCParticleMeteor_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCParticleMeteor_setBlendAdditive(bool_value,)", "contents": "setBlendAdditive(${1:bool_value})" }
,
		{ "trigger": "CCParticleMeteor_setGravity(const_CCPoint&_g,)", "contents": "setGravity(${1:const_CCPoint&_g})" }
,
		{ "trigger": "CCParticleMeteor_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleMeteor_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleMeteor_stopSystem()", "contents": "stopSystem()" }
,
		{ "trigger": "CCParticleMeteor_setLifeVar(float_lifeVar,)", "contents": "setLifeVar(${1:float_lifeVar})" }
,
		{ "trigger": "CCParticleMeteor_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleMeteor_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "CCParticleMeteor_setPosVar(CCPoint_pos,)", "contents": "setPosVar(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleMeteor_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleMeteor_resetSystem()", "contents": "resetSystem()" }
,
		{ "trigger": "CCParticleMeteor_getRotatePerSecond()", "contents": "getRotatePerSecond()" }
,
		{ "trigger": "CCParticleMeteor_setEmissionRate(float_rate,)", "contents": "setEmissionRate(${1:float_rate})" }
,
		{ "trigger": "CCParticleMeteor_setStartRadius(float_startRadius,)", "contents": "setStartRadius(${1:float_startRadius})" }
,
		{ "trigger": "CCParticleMeteor_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleMeteor_getAngleVar()", "contents": "getAngleVar()" }
,
		{ "trigger": "CCParticleMeteor_getEndColorVar()", "contents": "getEndColorVar()" }
,
		{ "trigger": "CCParticleMeteor_getEndSize()", "contents": "getEndSize()" }
,
		{ "trigger": "CCParticleMeteor_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleMeteor_setEndRadiusVar(float_endRadiusVar,)", "contents": "setEndRadiusVar(${1:float_endRadiusVar})" }
,
		{ "trigger": "CCParticleMeteor_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleMeteor_getTangentialAccel()", "contents": "getTangentialAccel()" }
,
		{ "trigger": "CCParticleMeteor_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleMeteor_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleMeteor_getEndSpin()", "contents": "getEndSpin()" }
,
		{ "trigger": "CCParticleMeteor_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCParticleMeteor_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleMeteor_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCParticleMeteor_setDuration(float_d,)", "contents": "setDuration(${1:float_d})" }
,
		{ "trigger": "CCParticleMeteor_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleMeteor_setStartSpinVar(float_var,)", "contents": "setStartSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleMeteor_getEmitterMode()", "contents": "getEmitterMode()" }
,
		{ "trigger": "CCParticleMeteor_updateQuadWithParticle(tCCParticle*_particle,const_CCPoint&_newPosition,)", "contents": "updateQuadWithParticle(${1:tCCParticle*_particle},${2:const_CCPoint&_newPosition})" }
,
		{ "trigger": "CCParticleMeteor_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleMeteor_setSpeed(float_speed,)", "contents": "setSpeed(${1:float_speed})" }
,
		{ "trigger": "CCParticleMeteor_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleMeteor_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleMeteor_getGravity()", "contents": "getGravity()" }
,
		{ "trigger": "CCParticleMeteor_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleMeteor_setEndSpinVar(float_var,)", "contents": "setEndSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleMeteor_getAngle()", "contents": "getAngle()" }
,
		{ "trigger": "CCParticleMeteor_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleMeteor_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCParticleMeteor_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleMeteor_setEmitterMode(int_mode,)", "contents": "setEmitterMode(${1:int_mode})" }
,
		{ "trigger": "CCParticleMeteor_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleMeteor_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleMeteor_getRotatePerSecondVar()", "contents": "getRotatePerSecondVar()" }
,
		{ "trigger": "CCParticleMeteor_initWithTotalParticles(unsigned_int_number,)", "contents": "initWithTotalParticles(${1:unsigned_int_number})" }
,
		{ "trigger": "CCParticleMeteor_getLifeVar()", "contents": "getLifeVar()" }
,
		{ "trigger": "CCParticleMeteor_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleMeteor_setStartSpin(float_var,)", "contents": "setStartSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleMeteor_setTotalParticles(unsigned_int_tp,)", "contents": "setTotalParticles(${1:unsigned_int_tp})" }
,
		{ "trigger": "CCParticleMeteor_getStartSize()", "contents": "getStartSize()" }
,
		{ "trigger": "CCParticleMeteor_getEndRadius()", "contents": "getEndRadius()" }
,
		{ "trigger": "CCParticleMeteor_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleMeteor_addParticle()", "contents": "addParticle()" }
,
		{ "trigger": "CCParticleMeteor_setBlendFunc(ccBlendFunc_var,)", "contents": "setBlendFunc(${1:ccBlendFunc_var})" }
,
		{ "trigger": "CCParticleMeteor_initParticle(tCCParticle*_particle,)", "contents": "initParticle(${1:tCCParticle*_particle})" }
,
		{ "trigger": "CCParticleMeteor_getTangentialAccelVar()", "contents": "getTangentialAccelVar()" }
,
		{ "trigger": "CCParticleMeteor_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleMeteor_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleMeteor_setAngle(float_angle,)", "contents": "setAngle(${1:float_angle})" }
,
		{ "trigger": "CCParticleMeteor_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleMeteor_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleMeteor_getEndRadiusVar()", "contents": "getEndRadiusVar()" }
,
		{ "trigger": "CCParticleMeteor_getStartSpin()", "contents": "getStartSpin()" }
,
		{ "trigger": "CCParticleMeteor_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCParticleMeteor_setSpeedVar(float_speed,)", "contents": "setSpeedVar(${1:float_speed})" }
,
		{ "trigger": "CCParticleMeteor_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleMeteor_isBlendAdditive()", "contents": "isBlendAdditive()" }
,
		{ "trigger": "CCParticleMeteor_getParticleCount()", "contents": "getParticleCount()" }
,
		{ "trigger": "CCParticleMeteor_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleMeteor_getEndSpinVar()", "contents": "getEndSpinVar()" }
,
		{ "trigger": "CCParticleMeteor_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleMeteor_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleMeteor_setStartSize(float_size,)", "contents": "setStartSize(${1:float_size})" }
,
		{ "trigger": "CCParticleMeteor_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCParticleMeteor_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleMeteor_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleMeteor_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleMeteor_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleMeteor_setRadialAccelVar(float_t,)", "contents": "setRadialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleMeteor_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleMeteor_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleMeteor_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleMeteor_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleMeteor_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleMeteor_setEndColorVar(const_ccColor4F_var,)", "contents": "setEndColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleMeteor_setTextureWithRect(CCTexture2D_*texture,const_CCRect&_rect,)", "contents": "setTextureWithRect(${1:CCTexture2D_*texture},${2:const_CCRect&_rect})" }
,
		{ "trigger": "CCParticleMeteor_setSourcePosition(CCPoint_pos,)", "contents": "setSourcePosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleMeteor_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleMeteor_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleMeteor_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleMeteor_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleMeteor_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleMeteor_setBatchNode(CCParticleBatchNode*_node,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_node})" }
,
		{ "trigger": "CCParticleMeteor_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleMeteor_isActive()", "contents": "isActive()" }
,
		{ "trigger": "CCParticleMeteor_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleMeteor_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleMeteor_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleMeteor_setEndSpin(float_var,)", "contents": "setEndSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleMeteor_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleMeteor_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleMeteor_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleMeteor_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleMeteor_getEndSizeVar()", "contents": "getEndSizeVar()" }
,
		{ "trigger": "CCParticleMeteor_setStartColorVar(const_ccColor4F_var,)", "contents": "setStartColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleMeteor_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleMeteor_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleMeteor_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleMeteor_setLife(float_life,)", "contents": "setLife(${1:float_life})" }
,
		{ "trigger": "CCParticleMeteor_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleMeteor_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleMeteor_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleMeteor_setStartColor(const_ccColor4F_var,)", "contents": "setStartColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleMeteor_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleMeteor_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleMeteor_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleMeteor_setAngleVar(float_angle,)", "contents": "setAngleVar(${1:float_angle})" }
,
		{ "trigger": "CCParticleMeteor_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleMeteor_setTexture(CCTexture2D*_texture,)", "contents": "setTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCParticleMeteor_setTangentialAccelVar(float_t,)", "contents": "setTangentialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleMeteor_setRotatePerSecond(float_degrees,)", "contents": "setRotatePerSecond(${1:float_degrees})" }
,
		{ "trigger": "CCParticleMeteor_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleMeteor_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleMeteor_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleMeteor_getSpeedVar()", "contents": "getSpeedVar()" }
,
		{ "trigger": "CCParticleMeteor_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleMeteor_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleMeteor_getStartSizeVar()", "contents": "getStartSizeVar()" }
,
		{ "trigger": "CCParticleMeteor_setAutoRemoveOnFinish(bool_var,)", "contents": "setAutoRemoveOnFinish(${1:bool_var})" }
,
		{ "trigger": "CCParticleMeteor_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleMeteor_setTangentialAccel(float_t,)", "contents": "setTangentialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleMeteor_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleMeteor_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleMeteor_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleMeteor_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleMeteor_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleMeteor_setEndColor(const_ccColor4F_var,)", "contents": "setEndColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleMeteor_getRadialAccel()", "contents": "getRadialAccel()" }
,
		{ "trigger": "CCParticleMeteor_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleMeteor_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleMeteor_setRotatePerSecondVar(float_degrees,)", "contents": "setRotatePerSecondVar(${1:float_degrees})" }
,
		{ "trigger": "CCParticleMeteor_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleMeteor_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCParticleMeteor_getStartRadiusVar()", "contents": "getStartRadiusVar()" }
,
		{ "trigger": "CCParticleMeteor_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleMeteor_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleMeteor_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleMeteor_setBatchNode(CCParticleBatchNode*_batchNode,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_batchNode})" }
,
		{ "trigger": "CCParticleMeteor_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleMeteor_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCParticleMeteor_getPosVar()", "contents": "getPosVar()" }
,
		{ "trigger": "CCParticleMeteor_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleMeteor_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleMeteor_setEndSize(float_size,)", "contents": "setEndSize(${1:float_size})" }
,
		{ "trigger": "CCParticleMeteor_getEmissionRate()", "contents": "getEmissionRate()" }
,
		{ "trigger": "CCParticleMeteor_setRadialAccel(float_t,)", "contents": "setRadialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleMeteor_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleMeteor_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleMeteor_initWithFile(const_char*_plistFile,)", "contents": "initWithFile(${1:const_char*_plistFile})" }
,
		{ "trigger": "CCParticleMeteor_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleMeteor_setEndSizeVar(float_size,)", "contents": "setEndSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleMeteor_isFull()", "contents": "isFull()" }
,
		{ "trigger": "CCParticleMeteor_getStartRadius()", "contents": "getStartRadius()" }
,
		{ "trigger": "CCParticleMeteor_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleMeteor_setScale(float_s,)", "contents": "setScale(${1:float_s})" }
,
		{ "trigger": "CCParticleMeteor_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleMeteor_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleMeteor_getStartColorVar()", "contents": "getStartColorVar()" }
,
		{ "trigger": "CCParticleMeteor_postStep()", "contents": "postStep()" }
,
		{ "trigger": "CCParticleMeteor_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleMeteor_setEndRadius(float_endRadius,)", "contents": "setEndRadius(${1:float_endRadius})" }
,
		{ "trigger": "CCParticleMeteor_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCParticleMeteor_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleMeteor_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleMeteor_create()", "contents": "CCParticleMeteor:create()" }
,

		{ "trigger": "CCMenuItemAtlasFont_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCMenuItemAtlasFont_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCMenuItemAtlasFont_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCMenuItemAtlasFont_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCMenuItemAtlasFont_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCMenuItemAtlasFont_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCMenuItemAtlasFont_init()", "contents": "init()" }
,
		{ "trigger": "CCMenuItemAtlasFont_draw()", "contents": "draw()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCMenuItemAtlasFont_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCMenuItemAtlasFont_setDisabledColor(const_ccColor3B_&_color,)", "contents": "setDisabledColor(${1:const_ccColor3B_&_color})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCMenuItemAtlasFont_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemAtlasFont_visit()", "contents": "visit()" }
,
		{ "trigger": "CCMenuItemAtlasFont_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItemAtlasFont_activate()", "contents": "activate()" }
,
		{ "trigger": "CCMenuItemAtlasFont_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItemAtlasFont_setLabel(CCNode*_pLabel,)", "contents": "setLabel(${1:CCNode*_pLabel})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCMenuItemAtlasFont_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCMenuItemAtlasFont_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemAtlasFont_unregisterScriptTapHandler()", "contents": "unregisterScriptTapHandler()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCMenuItemAtlasFont_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemAtlasFont_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCMenuItemAtlasFont_registerScriptTapHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptTapHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCMenuItemAtlasFont_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCMenuItemAtlasFont_selected()", "contents": "selected()" }
,
		{ "trigger": "CCMenuItemAtlasFont_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItemAtlasFont_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCMenuItemAtlasFont_isSelected()", "contents": "isSelected()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCMenuItemAtlasFont_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCMenuItemAtlasFont_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItemAtlasFont_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItemAtlasFont_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCMenuItemAtlasFont_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCMenuItemAtlasFont_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCMenuItemAtlasFont_unselected()", "contents": "unselected()" }
,
		{ "trigger": "CCMenuItemAtlasFont_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCMenuItemAtlasFont_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemAtlasFont_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemAtlasFont_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCMenuItemAtlasFont_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCMenuItemAtlasFont_retain()", "contents": "retain()" }
,
		{ "trigger": "CCMenuItemAtlasFont_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItemAtlasFont_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCMenuItemAtlasFont_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCMenuItemAtlasFont_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCMenuItemAtlasFont_setColor(ccColor3B_color,)", "contents": "setColor(${1:ccColor3B_color})" }
,
		{ "trigger": "CCMenuItemAtlasFont_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCMenuItemAtlasFont_rect()", "contents": "rect()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCMenuItemAtlasFont_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCMenuItemAtlasFont_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCMenuItemAtlasFont_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemAtlasFont_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCMenuItemAtlasFont_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCMenuItemAtlasFont_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCMenuItemAtlasFont_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCMenuItemAtlasFont_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItemAtlasFont_setString(const_char*_label,)", "contents": "setString(${1:const_char*_label})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCMenuItemAtlasFont_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCMenuItemAtlasFont_transform()", "contents": "transform()" }
,
		{ "trigger": "CCMenuItemAtlasFont_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItemAtlasFont_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCMenuItemAtlasFont_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCMenuItemAtlasFont_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCMenuItemAtlasFont_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItemAtlasFont_release()", "contents": "release()" }
,
		{ "trigger": "CCMenuItemAtlasFont_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItemAtlasFont_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getDisabledColor()", "contents": "getDisabledColor()" }
,
		{ "trigger": "CCMenuItemAtlasFont_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCMenuItemAtlasFont_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCMenuItemAtlasFont_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCMenuItemAtlasFont_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCMenuItemAtlasFont_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCMenuItemAtlasFont_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCMenuItemAtlasFont_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItemAtlasFont_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCMenuItemAtlasFont_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCMenuItemAtlasFont_copy()", "contents": "copy()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getLabel()", "contents": "getLabel()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "CCMenuItemAtlasFont_description()", "contents": "description()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCMenuItemAtlasFont_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCMenuItemAtlasFont_create(const_char*_value,const_char*_charMapFile,int_itemWidth,int_itemHeight,char_startCharMap,)", "contents": "CCMenuItemAtlasFont:create(${1:const_char*_value},${2:const_char*_charMapFile},${3:int_itemWidth},${4:int_itemHeight},${5:char_startCharMap})" }
,

		{ "trigger": "CCProgressFromTo_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCProgressFromTo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCProgressFromTo_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCProgressFromTo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCProgressFromTo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCProgressFromTo_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCProgressFromTo_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCProgressFromTo_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCProgressFromTo_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCProgressFromTo_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCProgressFromTo_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCProgressFromTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCProgressFromTo_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCProgressFromTo_release()", "contents": "release()" }
,
		{ "trigger": "CCProgressFromTo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCProgressFromTo_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCProgressFromTo_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCProgressFromTo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCProgressFromTo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCProgressFromTo_create(float_duration,float_fFromPercentage,float_fToPercentage,)", "contents": "CCProgressFromTo:create(${1:float_duration},${2:float_fFromPercentage},${3:float_fToPercentage})" }
,

		{ "trigger": "CCTMXObjectGroup_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTMXObjectGroup_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTMXObjectGroup_getProperties()", "contents": "getProperties()" }
,
		{ "trigger": "CCTMXObjectGroup_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTMXObjectGroup_objectNamed(const_char_*objectName,)", "contents": "objectNamed(${1:const_char_*objectName})" }
,
		{ "trigger": "CCTMXObjectGroup_getGroupName()", "contents": "getGroupName()" }
,
		{ "trigger": "CCTMXObjectGroup_setObjects(CCArray*_val,)", "contents": "setObjects(${1:CCArray*_val})" }
,
		{ "trigger": "CCTMXObjectGroup_release()", "contents": "release()" }
,
		{ "trigger": "CCTMXObjectGroup_setGroupName(const_char_*groupName,)", "contents": "setGroupName(${1:const_char_*groupName})" }
,
		{ "trigger": "CCTMXObjectGroup_getObjects()", "contents": "getObjects()" }
,
		{ "trigger": "CCTMXObjectGroup_setProperties(CCDictionary*_pval,)", "contents": "setProperties(${1:CCDictionary*_pval})" }
,
		{ "trigger": "CCTMXObjectGroup_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTMXObjectGroup_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTMXObjectGroup_getPositionOffset()", "contents": "getPositionOffset()" }
,
		{ "trigger": "CCTMXObjectGroup_setPositionOffset(CCPoint_pt,)", "contents": "setPositionOffset(${1:CCPoint_pt})" }
,
		{ "trigger": "CCTMXObjectGroup_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTMXObjectGroup_propertyNamed(const_char*_propertyName,)", "contents": "propertyNamed(${1:const_char*_propertyName})" }
,

		{ "trigger": "CCMoveBy_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCMoveBy_copy()", "contents": "copy()" }
,
		{ "trigger": "CCMoveBy_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCMoveBy_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCMoveBy_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCMoveBy_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCMoveBy_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCMoveBy_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCMoveBy_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCMoveBy_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCMoveBy_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCMoveBy_retain()", "contents": "retain()" }
,
		{ "trigger": "CCMoveBy_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCMoveBy_release()", "contents": "release()" }
,
		{ "trigger": "CCMoveBy_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCMoveBy_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCMoveBy_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCMoveBy_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCMoveBy_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCMoveBy_create(float_duration,CCPoint_deltaPosition,)", "contents": "CCMoveBy:create(${1:float_duration},${2:CCPoint_deltaPosition})" }
,

		{ "trigger": "CCCamera_getEyeXYZ(float_*pEyeX,float_*pEyeY,float_*pEyeZ,)", "contents": "getEyeXYZ(${1:float_*pEyeX},${2:float_*pEyeY},${3:float_*pEyeZ})" }
,
		{ "trigger": "CCCamera_copy()", "contents": "copy()" }
,
		{ "trigger": "CCCamera_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCCamera_getCenterXYZ(float_*pCenterX,float_*pCenterY,float_*pCenterZ,)", "contents": "getCenterXYZ(${1:float_*pCenterX},${2:float_*pCenterY},${3:float_*pCenterZ})" }
,
		{ "trigger": "CCCamera_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCCamera_getUpXYZ(float_*pUpX,float_*pUpY,float_*pUpZ,)", "contents": "getUpXYZ(${1:float_*pUpX},${2:float_*pUpY},${3:float_*pUpZ})" }
,
		{ "trigger": "CCCamera_setDirty(bool_bValue,)", "contents": "setDirty(${1:bool_bValue})" }
,
		{ "trigger": "CCCamera_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCCamera_description()", "contents": "description()" }
,
		{ "trigger": "CCCamera_init()", "contents": "init()" }
,
		{ "trigger": "CCCamera_setEyeXYZ(float_fEyeX,float_fEyeY,float_fEyeZ,)", "contents": "setEyeXYZ(${1:float_fEyeX},${2:float_fEyeY},${3:float_fEyeZ})" }
,
		{ "trigger": "CCCamera_setCenterXYZ(float_fCenterX,float_fCenterY,float_fCenterZ,)", "contents": "setCenterXYZ(${1:float_fCenterX},${2:float_fCenterY},${3:float_fCenterZ})" }
,
		{ "trigger": "CCCamera_isDirty()", "contents": "isDirty()" }
,
		{ "trigger": "CCCamera_release()", "contents": "release()" }
,
		{ "trigger": "CCCamera_restore()", "contents": "restore()" }
,
		{ "trigger": "CCCamera_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCCamera_locate()", "contents": "locate()" }
,
		{ "trigger": "CCCamera_retain()", "contents": "retain()" }
,
		{ "trigger": "CCCamera_setUpXYZ(float_fUpX,float_fUpY,float_fUpZ,)", "contents": "setUpXYZ(${1:float_fUpX},${2:float_fUpY},${3:float_fUpZ})" }
,
		{ "trigger": "CCCamera_getZEye()", "contents": "CCCamera:getZEye()" }
,

		{ "trigger": "CCReverseTime_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCReverseTime_copy()", "contents": "copy()" }
,
		{ "trigger": "CCReverseTime_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCReverseTime_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCReverseTime_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCReverseTime_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCReverseTime_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCReverseTime_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCReverseTime_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCReverseTime_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCReverseTime_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCReverseTime_retain()", "contents": "retain()" }
,
		{ "trigger": "CCReverseTime_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCReverseTime_release()", "contents": "release()" }
,
		{ "trigger": "CCReverseTime_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCReverseTime_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCReverseTime_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCReverseTime_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCReverseTime_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCReverseTime_create(CCFiniteTimeAction_*pAction,)", "contents": "CCReverseTime:create(${1:CCFiniteTimeAction_*pAction})" }
,

		{ "trigger": "CCSize_equals(const_CCSize_&_target,)", "contents": "equals(${1:const_CCSize_&_target})" }
,

		{ "trigger": "CCLayerColor_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCLayerColor_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCLayerColor_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCLayerColor_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCLayerColor_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCLayerColor_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCLayerColor_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCLayerColor_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCLayerColor_init()", "contents": "init()" }
,
		{ "trigger": "CCLayerColor_draw()", "contents": "draw()" }
,
		{ "trigger": "CCLayerColor_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCLayerColor_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCLayerColor_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCLayerColor_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCLayerColor_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCLayerColor_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCLayerColor_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCLayerColor_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLayerColor_visit()", "contents": "visit()" }
,
		{ "trigger": "CCLayerColor_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCLayerColor_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCLayerColor_registerScriptAccelerateHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptAccelerateHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCLayerColor_getTouchMode()", "contents": "getTouchMode()" }
,
		{ "trigger": "CCLayerColor_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLayerColor_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCLayerColor_setAccelerometerEnabled(bool_bValue,)", "contents": "setAccelerometerEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCLayerColor_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCLayerColor_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCLayerColor_changeWidth(GLfloat_w,)", "contents": "changeWidth(${1:GLfloat_w})" }
,
		{ "trigger": "CCLayerColor_unregisterScriptTouchHandler()", "contents": "unregisterScriptTouchHandler()" }
,
		{ "trigger": "CCLayerColor_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCLayerColor_transform()", "contents": "transform()" }
,
		{ "trigger": "CCLayerColor_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCLayerColor_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLayerColor_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCLayerColor_unregisterScriptAccelerateHandler()", "contents": "unregisterScriptAccelerateHandler()" }
,
		{ "trigger": "CCLayerColor_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCLayerColor_registerScriptKeypadHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptKeypadHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCLayerColor_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLayerColor_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCLayerColor_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLayerColor_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCLayerColor_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCLayerColor_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCLayerColor_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCLayerColor_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCLayerColor_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCLayerColor_setKeypadEnabled(bool_bValue,)", "contents": "setKeypadEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCLayerColor_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCLayerColor_setTouchPriority(int_priority,)", "contents": "setTouchPriority(${1:int_priority})" }
,
		{ "trigger": "CCLayerColor_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCLayerColor_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCLayerColor_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCLayerColor_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLayerColor_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCLayerColor_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCLayerColor_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLayerColor_setBlendFunc(ccBlendFunc_Value,)", "contents": "setBlendFunc(${1:ccBlendFunc_Value})" }
,
		{ "trigger": "CCLayerColor_setTouchEnabled(bool_bValue,)", "contents": "setTouchEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCLayerColor_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCLayerColor_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCLayerColor_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCLayerColor_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCLayerColor_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCLayerColor_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCLayerColor_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCLayerColor_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLayerColor_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "CCLayerColor_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLayerColor_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLayerColor_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCLayerColor_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCLayerColor_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCLayerColor_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCLayerColor_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCLayerColor_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCLayerColor_retain()", "contents": "retain()" }
,
		{ "trigger": "CCLayerColor_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLayerColor_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCLayerColor_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCLayerColor_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCLayerColor_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCLayerColor_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCLayerColor_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCLayerColor_unregisterScriptKeypadHandler()", "contents": "unregisterScriptKeypadHandler()" }
,
		{ "trigger": "CCLayerColor_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCLayerColor_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCLayerColor_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCLayerColor_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCLayerColor_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCLayerColor_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCLayerColor_setOpacity(GLubyte_var,)", "contents": "setOpacity(${1:GLubyte_var})" }
,
		{ "trigger": "CCLayerColor_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCLayerColor_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCLayerColor_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCLayerColor_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCLayerColor_isAccelerometerEnabled()", "contents": "isAccelerometerEnabled()" }
,
		{ "trigger": "CCLayerColor_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCLayerColor_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCLayerColor_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCLayerColor_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCLayerColor_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCLayerColor_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCLayerColor_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCLayerColor_isKeypadEnabled()", "contents": "isKeypadEnabled()" }
,
		{ "trigger": "CCLayerColor_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCLayerColor_changeHeight(GLfloat_h,)", "contents": "changeHeight(${1:GLfloat_h})" }
,
		{ "trigger": "CCLayerColor_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCLayerColor_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCLayerColor_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCLayerColor_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCLayerColor_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLayerColor_registerScriptTouchHandler(LUA_FUNCTION_nHandler,bool_bIsMultiTouches_=_false,int_nPriority_=_0,bool_bSwallowsTouches_=_false,)", "contents": "registerScriptTouchHandler(${1:LUA_FUNCTION_nHandler},${2:bool_bIsMultiTouches_=_false},${3:int_nPriority_=_0},${4:bool_bSwallowsTouches_=_false})" }
,
		{ "trigger": "CCLayerColor_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCLayerColor_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCLayerColor_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCLayerColor_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCLayerColor_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCLayerColor_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCLayerColor_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLayerColor_release()", "contents": "release()" }
,
		{ "trigger": "CCLayerColor_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLayerColor_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCLayerColor_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLayerColor_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCLayerColor_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCLayerColor_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCLayerColor_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCLayerColor_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCLayerColor_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCLayerColor_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCLayerColor_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCLayerColor_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCLayerColor_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCLayerColor_setColor(ccColor3B_Value,)", "contents": "setColor(${1:ccColor3B_Value})" }
,
		{ "trigger": "CCLayerColor_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLayerColor_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCLayerColor_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCLayerColor_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCLayerColor_changeWidthAndHeight(GLfloat_w_,GLfloat_h,)", "contents": "changeWidthAndHeight(${1:GLfloat_w_},${2:GLfloat_h})" }
,
		{ "trigger": "CCLayerColor_getTouchPriority()", "contents": "getTouchPriority()" }
,
		{ "trigger": "CCLayerColor_copy()", "contents": "copy()" }
,
		{ "trigger": "CCLayerColor_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCLayerColor_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCLayerColor_description()", "contents": "description()" }
,
		{ "trigger": "CCLayerColor_setTouchMode(ccTouchesMode_mode,)", "contents": "setTouchMode(${1:ccTouchesMode_mode})" }
,
		{ "trigger": "CCLayerColor_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCLayerColor_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCLayerColor_create()", "contents": "CCLayerColor:create()" }
,
		{ "trigger": "CCLayerColor_create(ccColor4B_color,)", "contents": "CCLayerColor:create(${1:ccColor4B_color})" }
,
		{ "trigger": "CCLayerColor_create(ccColor4B_color,GLfloat_width,GLfloat_height,)", "contents": "CCLayerColor:create(${1:ccColor4B_color},${2:GLfloat_width},${3:GLfloat_height})" }
,

		{ "trigger": "CCTargetedAction_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCTargetedAction_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTargetedAction_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCTargetedAction_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTargetedAction_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTargetedAction_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTargetedAction_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCTargetedAction_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCTargetedAction_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCTargetedAction_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCTargetedAction_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCTargetedAction_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCTargetedAction_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCTargetedAction_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCTargetedAction_getForcedTarget()", "contents": "getForcedTarget()" }
,
		{ "trigger": "CCTargetedAction_release()", "contents": "release()" }
,
		{ "trigger": "CCTargetedAction_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTargetedAction_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCTargetedAction_setForcedTarget(CCNode*_target,)", "contents": "setForcedTarget(${1:CCNode*_target})" }
,
		{ "trigger": "CCTargetedAction_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTargetedAction_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTargetedAction_create(CCNode*_pTarget,CCFiniteTimeAction*_pAction,)", "contents": "CCTargetedAction:create(${1:CCNode*_pTarget},${2:CCFiniteTimeAction*_pAction})" }
,

		{ "trigger": "CCParticleSystemQuad_getLife()", "contents": "getLife()" }
,
		{ "trigger": "CCParticleSystemQuad_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleSystemQuad_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleSystemQuad_setStartSizeVar(float_size,)", "contents": "setStartSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleSystemQuad_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleSystemQuad_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleSystemQuad_getRadialAccelVar()", "contents": "getRadialAccelVar()" }
,
		{ "trigger": "CCParticleSystemQuad_getStartSpinVar()", "contents": "getStartSpinVar()" }
,
		{ "trigger": "CCParticleSystemQuad_setStartRadiusVar(float_startRadiusVar,)", "contents": "setStartRadiusVar(${1:float_startRadiusVar})" }
,
		{ "trigger": "CCParticleSystemQuad_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleSystemQuad_setTexture(CCTexture2D*_var,)", "contents": "setTexture(${1:CCTexture2D*_var})" }
,
		{ "trigger": "CCParticleSystemQuad_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleSystemQuad_isAutoRemoveOnFinish()", "contents": "isAutoRemoveOnFinish()" }
,
		{ "trigger": "CCParticleSystemQuad_getTotalParticles()", "contents": "getTotalParticles()" }
,
		{ "trigger": "CCParticleSystemQuad_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleSystemQuad_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleSystemQuad_setPositionType(tCCPositionType_type,)", "contents": "setPositionType(${1:tCCPositionType_type})" }
,
		{ "trigger": "CCParticleSystemQuad_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCParticleSystemQuad_setDisplayFrame(CCSpriteFrame*_spriteFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame*_spriteFrame})" }
,
		{ "trigger": "CCParticleSystemQuad_getSourcePosition()", "contents": "getSourcePosition()" }
,
		{ "trigger": "CCParticleSystemQuad_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCParticleSystemQuad_setBlendAdditive(bool_value,)", "contents": "setBlendAdditive(${1:bool_value})" }
,
		{ "trigger": "CCParticleSystemQuad_setGravity(const_CCPoint&_g,)", "contents": "setGravity(${1:const_CCPoint&_g})" }
,
		{ "trigger": "CCParticleSystemQuad_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSystemQuad_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleSystemQuad_stopSystem()", "contents": "stopSystem()" }
,
		{ "trigger": "CCParticleSystemQuad_setLifeVar(float_lifeVar,)", "contents": "setLifeVar(${1:float_lifeVar})" }
,
		{ "trigger": "CCParticleSystemQuad_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleSystemQuad_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "CCParticleSystemQuad_setPosVar(CCPoint_pos,)", "contents": "setPosVar(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSystemQuad_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleSystemQuad_resetSystem()", "contents": "resetSystem()" }
,
		{ "trigger": "CCParticleSystemQuad_getRotatePerSecond()", "contents": "getRotatePerSecond()" }
,
		{ "trigger": "CCParticleSystemQuad_setEmissionRate(float_rate,)", "contents": "setEmissionRate(${1:float_rate})" }
,
		{ "trigger": "CCParticleSystemQuad_setStartRadius(float_startRadius,)", "contents": "setStartRadius(${1:float_startRadius})" }
,
		{ "trigger": "CCParticleSystemQuad_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleSystemQuad_getAngleVar()", "contents": "getAngleVar()" }
,
		{ "trigger": "CCParticleSystemQuad_getEndColorVar()", "contents": "getEndColorVar()" }
,
		{ "trigger": "CCParticleSystemQuad_getEndSize()", "contents": "getEndSize()" }
,
		{ "trigger": "CCParticleSystemQuad_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleSystemQuad_setEndRadiusVar(float_endRadiusVar,)", "contents": "setEndRadiusVar(${1:float_endRadiusVar})" }
,
		{ "trigger": "CCParticleSystemQuad_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleSystemQuad_getTangentialAccel()", "contents": "getTangentialAccel()" }
,
		{ "trigger": "CCParticleSystemQuad_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleSystemQuad_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleSystemQuad_getEndSpin()", "contents": "getEndSpin()" }
,
		{ "trigger": "CCParticleSystemQuad_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCParticleSystemQuad_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleSystemQuad_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCParticleSystemQuad_setDuration(float_d,)", "contents": "setDuration(${1:float_d})" }
,
		{ "trigger": "CCParticleSystemQuad_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleSystemQuad_setStartSpinVar(float_var,)", "contents": "setStartSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleSystemQuad_getEmitterMode()", "contents": "getEmitterMode()" }
,
		{ "trigger": "CCParticleSystemQuad_updateQuadWithParticle(tCCParticle*_particle,const_CCPoint&_newPosition,)", "contents": "updateQuadWithParticle(${1:tCCParticle*_particle},${2:const_CCPoint&_newPosition})" }
,
		{ "trigger": "CCParticleSystemQuad_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleSystemQuad_setSpeed(float_speed,)", "contents": "setSpeed(${1:float_speed})" }
,
		{ "trigger": "CCParticleSystemQuad_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleSystemQuad_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleSystemQuad_getGravity()", "contents": "getGravity()" }
,
		{ "trigger": "CCParticleSystemQuad_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleSystemQuad_setEndSpinVar(float_var,)", "contents": "setEndSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleSystemQuad_getAngle()", "contents": "getAngle()" }
,
		{ "trigger": "CCParticleSystemQuad_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleSystemQuad_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCParticleSystemQuad_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleSystemQuad_setEmitterMode(int_mode,)", "contents": "setEmitterMode(${1:int_mode})" }
,
		{ "trigger": "CCParticleSystemQuad_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleSystemQuad_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleSystemQuad_getRotatePerSecondVar()", "contents": "getRotatePerSecondVar()" }
,
		{ "trigger": "CCParticleSystemQuad_initWithTotalParticles(unsigned_int_number,)", "contents": "initWithTotalParticles(${1:unsigned_int_number})" }
,
		{ "trigger": "CCParticleSystemQuad_getLifeVar()", "contents": "getLifeVar()" }
,
		{ "trigger": "CCParticleSystemQuad_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSystemQuad_setStartSpin(float_var,)", "contents": "setStartSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleSystemQuad_setTotalParticles(unsigned_int_tp,)", "contents": "setTotalParticles(${1:unsigned_int_tp})" }
,
		{ "trigger": "CCParticleSystemQuad_getStartSize()", "contents": "getStartSize()" }
,
		{ "trigger": "CCParticleSystemQuad_getEndRadius()", "contents": "getEndRadius()" }
,
		{ "trigger": "CCParticleSystemQuad_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleSystemQuad_addParticle()", "contents": "addParticle()" }
,
		{ "trigger": "CCParticleSystemQuad_setBlendFunc(ccBlendFunc_var,)", "contents": "setBlendFunc(${1:ccBlendFunc_var})" }
,
		{ "trigger": "CCParticleSystemQuad_initParticle(tCCParticle*_particle,)", "contents": "initParticle(${1:tCCParticle*_particle})" }
,
		{ "trigger": "CCParticleSystemQuad_getTangentialAccelVar()", "contents": "getTangentialAccelVar()" }
,
		{ "trigger": "CCParticleSystemQuad_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleSystemQuad_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleSystemQuad_setAngle(float_angle,)", "contents": "setAngle(${1:float_angle})" }
,
		{ "trigger": "CCParticleSystemQuad_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleSystemQuad_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleSystemQuad_getEndRadiusVar()", "contents": "getEndRadiusVar()" }
,
		{ "trigger": "CCParticleSystemQuad_getStartSpin()", "contents": "getStartSpin()" }
,
		{ "trigger": "CCParticleSystemQuad_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCParticleSystemQuad_setSpeedVar(float_speed,)", "contents": "setSpeedVar(${1:float_speed})" }
,
		{ "trigger": "CCParticleSystemQuad_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleSystemQuad_isBlendAdditive()", "contents": "isBlendAdditive()" }
,
		{ "trigger": "CCParticleSystemQuad_getParticleCount()", "contents": "getParticleCount()" }
,
		{ "trigger": "CCParticleSystemQuad_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleSystemQuad_getEndSpinVar()", "contents": "getEndSpinVar()" }
,
		{ "trigger": "CCParticleSystemQuad_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleSystemQuad_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleSystemQuad_setStartSize(float_size,)", "contents": "setStartSize(${1:float_size})" }
,
		{ "trigger": "CCParticleSystemQuad_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCParticleSystemQuad_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleSystemQuad_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSystemQuad_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleSystemQuad_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleSystemQuad_setRadialAccelVar(float_t,)", "contents": "setRadialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleSystemQuad_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleSystemQuad_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleSystemQuad_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleSystemQuad_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleSystemQuad_setEndColorVar(const_ccColor4F_var,)", "contents": "setEndColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSystemQuad_setTextureWithRect(CCTexture2D_*texture,const_CCRect&_rect,)", "contents": "setTextureWithRect(${1:CCTexture2D_*texture},${2:const_CCRect&_rect})" }
,
		{ "trigger": "CCParticleSystemQuad_setSourcePosition(CCPoint_pos,)", "contents": "setSourcePosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSystemQuad_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleSystemQuad_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleSystemQuad_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleSystemQuad_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleSystemQuad_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleSystemQuad_setBatchNode(CCParticleBatchNode*_node,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_node})" }
,
		{ "trigger": "CCParticleSystemQuad_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleSystemQuad_isActive()", "contents": "isActive()" }
,
		{ "trigger": "CCParticleSystemQuad_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleSystemQuad_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleSystemQuad_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleSystemQuad_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleSystemQuad_setEndSpin(float_var,)", "contents": "setEndSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleSystemQuad_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleSystemQuad_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleSystemQuad_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleSystemQuad_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleSystemQuad_getEndSizeVar()", "contents": "getEndSizeVar()" }
,
		{ "trigger": "CCParticleSystemQuad_setStartColorVar(const_ccColor4F_var,)", "contents": "setStartColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSystemQuad_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSystemQuad_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleSystemQuad_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleSystemQuad_setLife(float_life,)", "contents": "setLife(${1:float_life})" }
,
		{ "trigger": "CCParticleSystemQuad_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleSystemQuad_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleSystemQuad_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleSystemQuad_setStartColor(const_ccColor4F_var,)", "contents": "setStartColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSystemQuad_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleSystemQuad_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleSystemQuad_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleSystemQuad_setAngleVar(float_angle,)", "contents": "setAngleVar(${1:float_angle})" }
,
		{ "trigger": "CCParticleSystemQuad_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleSystemQuad_setTexture(CCTexture2D*_texture,)", "contents": "setTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCParticleSystemQuad_setTangentialAccelVar(float_t,)", "contents": "setTangentialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleSystemQuad_setRotatePerSecond(float_degrees,)", "contents": "setRotatePerSecond(${1:float_degrees})" }
,
		{ "trigger": "CCParticleSystemQuad_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleSystemQuad_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleSystemQuad_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleSystemQuad_getSpeedVar()", "contents": "getSpeedVar()" }
,
		{ "trigger": "CCParticleSystemQuad_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleSystemQuad_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleSystemQuad_getStartSizeVar()", "contents": "getStartSizeVar()" }
,
		{ "trigger": "CCParticleSystemQuad_setAutoRemoveOnFinish(bool_var,)", "contents": "setAutoRemoveOnFinish(${1:bool_var})" }
,
		{ "trigger": "CCParticleSystemQuad_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleSystemQuad_setTangentialAccel(float_t,)", "contents": "setTangentialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleSystemQuad_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleSystemQuad_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleSystemQuad_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleSystemQuad_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleSystemQuad_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleSystemQuad_setEndColor(const_ccColor4F_var,)", "contents": "setEndColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSystemQuad_getRadialAccel()", "contents": "getRadialAccel()" }
,
		{ "trigger": "CCParticleSystemQuad_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleSystemQuad_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleSystemQuad_setRotatePerSecondVar(float_degrees,)", "contents": "setRotatePerSecondVar(${1:float_degrees})" }
,
		{ "trigger": "CCParticleSystemQuad_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleSystemQuad_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCParticleSystemQuad_getStartRadiusVar()", "contents": "getStartRadiusVar()" }
,
		{ "trigger": "CCParticleSystemQuad_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleSystemQuad_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleSystemQuad_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleSystemQuad_setBatchNode(CCParticleBatchNode*_batchNode,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_batchNode})" }
,
		{ "trigger": "CCParticleSystemQuad_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleSystemQuad_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCParticleSystemQuad_getPosVar()", "contents": "getPosVar()" }
,
		{ "trigger": "CCParticleSystemQuad_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleSystemQuad_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleSystemQuad_setEndSize(float_size,)", "contents": "setEndSize(${1:float_size})" }
,
		{ "trigger": "CCParticleSystemQuad_getEmissionRate()", "contents": "getEmissionRate()" }
,
		{ "trigger": "CCParticleSystemQuad_setRadialAccel(float_t,)", "contents": "setRadialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleSystemQuad_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleSystemQuad_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleSystemQuad_initWithFile(const_char*_plistFile,)", "contents": "initWithFile(${1:const_char*_plistFile})" }
,
		{ "trigger": "CCParticleSystemQuad_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleSystemQuad_setEndSizeVar(float_size,)", "contents": "setEndSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleSystemQuad_isFull()", "contents": "isFull()" }
,
		{ "trigger": "CCParticleSystemQuad_getStartRadius()", "contents": "getStartRadius()" }
,
		{ "trigger": "CCParticleSystemQuad_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleSystemQuad_setScale(float_s,)", "contents": "setScale(${1:float_s})" }
,
		{ "trigger": "CCParticleSystemQuad_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleSystemQuad_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleSystemQuad_getStartColorVar()", "contents": "getStartColorVar()" }
,
		{ "trigger": "CCParticleSystemQuad_postStep()", "contents": "postStep()" }
,
		{ "trigger": "CCParticleSystemQuad_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleSystemQuad_setEndRadius(float_endRadius,)", "contents": "setEndRadius(${1:float_endRadius})" }
,
		{ "trigger": "CCParticleSystemQuad_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCParticleSystemQuad_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleSystemQuad_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleSystemQuad_create()", "contents": "CCParticleSystemQuad:create()" }
,
		{ "trigger": "CCParticleSystemQuad_create(const_char_*plistFile,)", "contents": "CCParticleSystemQuad:create(${1:const_char_*plistFile})" }
,


		{ "trigger": "CCFlipX_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCFlipX_copy()", "contents": "copy()" }
,
		{ "trigger": "CCFlipX_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCFlipX_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCFlipX_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCFlipX_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCFlipX_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCFlipX_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCFlipX_retain()", "contents": "retain()" }
,
		{ "trigger": "CCFlipX_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCFlipX_release()", "contents": "release()" }
,
		{ "trigger": "CCFlipX_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCFlipX_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCFlipX_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCFlipX_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCFlipX_create(bool_x,)", "contents": "CCFlipX:create(${1:bool_x})" }
,

		{ "trigger": "CCFlipY_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCFlipY_copy()", "contents": "copy()" }
,
		{ "trigger": "CCFlipY_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCFlipY_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCFlipY_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCFlipY_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCFlipY_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCFlipY_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCFlipY_retain()", "contents": "retain()" }
,
		{ "trigger": "CCFlipY_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCFlipY_release()", "contents": "release()" }
,
		{ "trigger": "CCFlipY_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCFlipY_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCFlipY_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCFlipY_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCFlipY_create(bool_y,)", "contents": "CCFlipY:create(${1:bool_y})" }
,


		{ "trigger": "CCFiniteTimeAction_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCFiniteTimeAction_copy()", "contents": "copy()" }
,
		{ "trigger": "CCFiniteTimeAction_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCFiniteTimeAction_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCFiniteTimeAction_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCFiniteTimeAction_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCFiniteTimeAction_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCFiniteTimeAction_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCFiniteTimeAction_retain()", "contents": "retain()" }
,
		{ "trigger": "CCFiniteTimeAction_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCFiniteTimeAction_release()", "contents": "release()" }
,
		{ "trigger": "CCFiniteTimeAction_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCFiniteTimeAction_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCFiniteTimeAction_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCFiniteTimeAction_isSingleReference()", "contents": "isSingleReference()" }
,

		{ "trigger": "CCShakyTiles3D_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCShakyTiles3D_originalTile(CCPoint_pos,)", "contents": "originalTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCShakyTiles3D_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCShakyTiles3D_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCShakyTiles3D_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCShakyTiles3D_release()", "contents": "release()" }
,
		{ "trigger": "CCShakyTiles3D_setTile(CCPoint_pos,ccQuad3_coords,)", "contents": "setTile(${1:CCPoint_pos},${2:ccQuad3_coords})" }
,
		{ "trigger": "CCShakyTiles3D_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCShakyTiles3D_retain()", "contents": "retain()" }
,
		{ "trigger": "CCShakyTiles3D_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCShakyTiles3D_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCShakyTiles3D_tile(CCPoint_pos,)", "contents": "tile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCShakyTiles3D_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCShakyTiles3D_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCShakyTiles3D_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCShakyTiles3D_copy()", "contents": "copy()" }
,
		{ "trigger": "CCShakyTiles3D_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCShakyTiles3D_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCShakyTiles3D_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCShakyTiles3D_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCShakyTiles3D_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCShakyTiles3D_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCShakyTiles3D_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCShakyTiles3D_create(float_duration,CCSize_gridSize,int_nRange,bool_bShakeZ,)", "contents": "CCShakyTiles3D:create(${1:float_duration},${2:CCSize_gridSize},${3:int_nRange},${4:bool_bShakeZ})" }
,

		{ "trigger": "CCJumpBy_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCJumpBy_copy()", "contents": "copy()" }
,
		{ "trigger": "CCJumpBy_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCJumpBy_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCJumpBy_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCJumpBy_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCJumpBy_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCJumpBy_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCJumpBy_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCJumpBy_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCJumpBy_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCJumpBy_retain()", "contents": "retain()" }
,
		{ "trigger": "CCJumpBy_release()", "contents": "release()" }
,
		{ "trigger": "CCJumpBy_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCJumpBy_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCJumpBy_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCJumpBy_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCJumpBy_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCJumpBy_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCJumpBy_create(float_duration,CCPoint_position,float_height,int_jumps,)", "contents": "CCJumpBy:create(${1:float_duration},${2:CCPoint_position},${3:float_height},${4:int_jumps})" }
,


		{ "trigger": "CCLabelTTF_setScaleX(float_fScaleX,)", "contents": "setScaleX(${1:float_fScaleX})" }
,
		{ "trigger": "CCLabelTTF_reorderChild(CCNode*_pChild,int_zOrder,)", "contents": "reorderChild(${1:CCNode*_pChild},${2:int_zOrder})" }
,
		{ "trigger": "CCLabelTTF_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCLabelTTF_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCLabelTTF_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCLabelTTF_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCLabelTTF_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCLabelTTF_setFlipY(bool_bFlipY,)", "contents": "setFlipY(${1:bool_bFlipY})" }
,
		{ "trigger": "CCLabelTTF_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCLabelTTF_setTextureRect(CCRect_rect,bool_rotated,CCSize_size,)", "contents": "setTextureRect(${1:CCRect_rect},${2:bool_rotated},${3:CCSize_size})" }
,
		{ "trigger": "CCLabelTTF_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCLabelTTF_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCLabelTTF_init()", "contents": "init()" }
,
		{ "trigger": "CCLabelTTF_draw()", "contents": "draw()" }
,
		{ "trigger": "CCLabelTTF_setSkewY(float_sy,)", "contents": "setSkewY(${1:float_sy})" }
,
		{ "trigger": "CCLabelTTF_isFrameDisplayed(CCSpriteFrame_*pFrame,)", "contents": "isFrameDisplayed(${1:CCSpriteFrame_*pFrame})" }
,
		{ "trigger": "CCLabelTTF_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCLabelTTF_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCLabelTTF_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCLabelTTF_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCLabelTTF_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCLabelTTF_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCLabelTTF_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCLabelTTF_setVisible(bool_bVisible,)", "contents": "setVisible(${1:bool_bVisible})" }
,
		{ "trigger": "CCLabelTTF_getVerticalAlignment()", "contents": "getVerticalAlignment()" }
,
		{ "trigger": "CCLabelTTF_setFontName(const_char_*fontName,)", "contents": "setFontName(${1:const_char_*fontName})" }
,
		{ "trigger": "CCLabelTTF_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCLabelTTF_getQuad()", "contents": "getQuad()" }
,
		{ "trigger": "CCLabelTTF_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLabelTTF_visit()", "contents": "visit()" }
,
		{ "trigger": "CCLabelTTF_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCLabelTTF_getString()", "contents": "getString()" }
,
		{ "trigger": "CCLabelTTF_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCLabelTTF_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCLabelTTF_setDisplayFrameWithAnimationName(const_char_*animationName,int_frameIndex,)", "contents": "setDisplayFrameWithAnimationName(${1:const_char_*animationName},${2:int_frameIndex})" }
,
		{ "trigger": "CCLabelTTF_removeAllChildrenWithCleanup(bool_bCleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_bCleanup})" }
,
		{ "trigger": "CCLabelTTF_displayFrame()", "contents": "displayFrame()" }
,
		{ "trigger": "CCLabelTTF_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLabelTTF_addChild(CCNode*_pChild,int_zOrder,)", "contents": "addChild(${1:CCNode*_pChild},${2:int_zOrder})" }
,
		{ "trigger": "CCLabelTTF_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCLabelTTF_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCLabelTTF_isFlipX()", "contents": "isFlipX()" }
,
		{ "trigger": "CCLabelTTF_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCLabelTTF_setDisplayFrame(CCSpriteFrame_*pNewFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame_*pNewFrame})" }
,
		{ "trigger": "CCLabelTTF_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCLabelTTF_transform()", "contents": "transform()" }
,
		{ "trigger": "CCLabelTTF_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCLabelTTF_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLabelTTF_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCLabelTTF_setVertexZ(float_fVertexZ,)", "contents": "setVertexZ(${1:float_fVertexZ})" }
,
		{ "trigger": "CCLabelTTF_getFontName()", "contents": "getFontName()" }
,
		{ "trigger": "CCLabelTTF_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCLabelTTF_setScaleY(float_fScaleY,)", "contents": "setScaleY(${1:float_fScaleY})" }
,
		{ "trigger": "CCLabelTTF_setFontSize(float_fontSize,)", "contents": "setFontSize(${1:float_fontSize})" }
,
		{ "trigger": "CCLabelTTF_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLabelTTF_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCLabelTTF_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLabelTTF_setFlipX(bool_bFlipX,)", "contents": "setFlipX(${1:bool_bFlipX})" }
,
		{ "trigger": "CCLabelTTF_setAtlasIndex(unsigned_int_uAtlasIndex,)", "contents": "setAtlasIndex(${1:unsigned_int_uAtlasIndex})" }
,
		{ "trigger": "CCLabelTTF_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCLabelTTF_isDirty()", "contents": "isDirty()" }
,
		{ "trigger": "CCLabelTTF_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCLabelTTF_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCLabelTTF_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCLabelTTF_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCLabelTTF_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCLabelTTF_addChild(CCNode*_pChild,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode*_pChild},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCLabelTTF_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCLabelTTF_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCLabelTTF_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCLabelTTF_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLabelTTF_isFlipY()", "contents": "isFlipY()" }
,
		{ "trigger": "CCLabelTTF_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCLabelTTF_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCLabelTTF_setDimensions(CCSize_&dim,)", "contents": "setDimensions(${1:CCSize_&dim})" }
,
		{ "trigger": "CCLabelTTF_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLabelTTF_getTextureAtlas()", "contents": "getTextureAtlas()" }
,
		{ "trigger": "CCLabelTTF_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCLabelTTF_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCLabelTTF_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCLabelTTF_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCLabelTTF_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCLabelTTF_setVerticalAlignment(CCVerticalTextAlignment_verticalAlignment,)", "contents": "setVerticalAlignment(${1:CCVerticalTextAlignment_verticalAlignment})" }
,
		{ "trigger": "CCLabelTTF_setTextureAtlas(CCTextureAtlas_*pobTextureAtlas,)", "contents": "setTextureAtlas(${1:CCTextureAtlas_*pobTextureAtlas})" }
,
		{ "trigger": "CCLabelTTF_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCLabelTTF_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLabelTTF_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLabelTTF_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLabelTTF_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCLabelTTF_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCLabelTTF_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCLabelTTF_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCLabelTTF_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCLabelTTF_setVertexRect(CCRect_rect,)", "contents": "setVertexRect(${1:CCRect_rect})" }
,
		{ "trigger": "CCLabelTTF_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCLabelTTF_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCLabelTTF_retain()", "contents": "retain()" }
,
		{ "trigger": "CCLabelTTF_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLabelTTF_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCLabelTTF_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCLabelTTF_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCLabelTTF_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCLabelTTF_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCLabelTTF_getOffsetPosition()", "contents": "getOffsetPosition()" }
,
		{ "trigger": "CCLabelTTF_getFontSize()", "contents": "getFontSize()" }
,
		{ "trigger": "CCLabelTTF_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCLabelTTF_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCLabelTTF_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCLabelTTF_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCLabelTTF_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCLabelTTF_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCLabelTTF_setScale(float_fScale,)", "contents": "setScale(${1:float_fScale})" }
,
		{ "trigger": "CCLabelTTF_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCLabelTTF_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCLabelTTF_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCLabelTTF_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCLabelTTF_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCLabelTTF_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCLabelTTF_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCLabelTTF_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCLabelTTF_setColor(ccColor3B_color3,)", "contents": "setColor(${1:ccColor3B_color3})" }
,
		{ "trigger": "CCLabelTTF_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCLabelTTF_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCLabelTTF_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCLabelTTF_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCLabelTTF_setRotation(float_rotation,)", "contents": "setRotation(${1:float_rotation})" }
,
		{ "trigger": "CCLabelTTF_setTexture(CCTexture2D_*texture,)", "contents": "setTexture(${1:CCTexture2D_*texture})" }
,
		{ "trigger": "CCLabelTTF_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCLabelTTF_isTextureRectRotated()", "contents": "isTextureRectRotated()" }
,
		{ "trigger": "CCLabelTTF_sortAllChildren()", "contents": "sortAllChildren()" }
,
		{ "trigger": "CCLabelTTF_setBatchNode(CCSpriteBatchNode*_pBatchNode,)", "contents": "setBatchNode(${1:CCSpriteBatchNode*_pBatchNode})" }
,
		{ "trigger": "CCLabelTTF_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCLabelTTF_getAtlasIndex()", "contents": "getAtlasIndex()" }
,
		{ "trigger": "CCLabelTTF_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCLabelTTF_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCLabelTTF_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCLabelTTF_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLabelTTF_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCLabelTTF_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCLabelTTF_updateTransform()", "contents": "updateTransform()" }
,
		{ "trigger": "CCLabelTTF_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCLabelTTF_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCLabelTTF_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCLabelTTF_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCLabelTTF_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLabelTTF_release()", "contents": "release()" }
,
		{ "trigger": "CCLabelTTF_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLabelTTF_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCLabelTTF_setSkewX(float_sx,)", "contents": "setSkewX(${1:float_sx})" }
,
		{ "trigger": "CCLabelTTF_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLabelTTF_setHorizontalAlignment(CCTextAlignment_alignment,)", "contents": "setHorizontalAlignment(${1:CCTextAlignment_alignment})" }
,
		{ "trigger": "CCLabelTTF_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCLabelTTF_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCLabelTTF_getTextureRect()", "contents": "getTextureRect()" }
,
		{ "trigger": "CCLabelTTF_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCLabelTTF_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCLabelTTF_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCLabelTTF_addChild(CCNode*_pChild,)", "contents": "addChild(${1:CCNode*_pChild})" }
,
		{ "trigger": "CCLabelTTF_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCLabelTTF_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCLabelTTF_removeChild(CCNode*_pChild,bool_bCleanUp,)", "contents": "removeChild(${1:CCNode*_pChild},${2:bool_bCleanUp})" }
,
		{ "trigger": "CCLabelTTF_getDimensions()", "contents": "getDimensions()" }
,
		{ "trigger": "CCLabelTTF_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCLabelTTF_setDirty(bool_bDirty,)", "contents": "setDirty(${1:bool_bDirty})" }
,
		{ "trigger": "CCLabelTTF_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCLabelTTF_setBlendFunc(ccBlendFunc_blendFunc,)", "contents": "setBlendFunc(${1:ccBlendFunc_blendFunc})" }
,
		{ "trigger": "CCLabelTTF_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLabelTTF_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCLabelTTF_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCLabelTTF_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCLabelTTF_setTextureRect(CCRect_rect,)", "contents": "setTextureRect(${1:CCRect_rect})" }
,
		{ "trigger": "CCLabelTTF_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCLabelTTF_copy()", "contents": "copy()" }
,
		{ "trigger": "CCLabelTTF_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCLabelTTF_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCLabelTTF_description()", "contents": "description()" }
,
		{ "trigger": "CCLabelTTF_setString(const_char_*label,)", "contents": "setString(${1:const_char_*label})" }
,
		{ "trigger": "CCLabelTTF_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCLabelTTF_getHorizontalAlignment()", "contents": "getHorizontalAlignment()" }
,
		{ "trigger": "CCLabelTTF_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCLabelTTF_create()", "contents": "CCLabelTTF:create()" }
,
		{ "trigger": "CCLabelTTF_create(const_char_*str,const_char_*fontName,float_fontSize,const_CCSize&_dimensions,CCTextAlignment_hAlignment,CCVerticalTextAlignment_vAlignment,)", "contents": "CCLabelTTF:create(${1:const_char_*str},${2:const_char_*fontName},${3:float_fontSize},${4:const_CCSize&_dimensions},${5:CCTextAlignment_hAlignment},${6:CCVerticalTextAlignment_vAlignment})" }
,
		{ "trigger": "CCLabelTTF_create(const_char_*str,const_char_*fontName,float_fontSize,)", "contents": "CCLabelTTF:create(${1:const_char_*str},${2:const_char_*fontName},${3:float_fontSize})" }
,
		{ "trigger": "CCLabelTTF_create(const_char_*str,const_char_*fontName,float_fontSize,const_CCSize&_dimensions,CCTextAlignment_hAlignment,)", "contents": "CCLabelTTF:create(${1:const_char_*str},${2:const_char_*fontName},${3:float_fontSize},${4:const_CCSize&_dimensions},${5:CCTextAlignment_hAlignment})" }
,

		{ "trigger": "CCNode_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCNode_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCNode_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCNode_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCNode_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCNode_draw()", "contents": "draw()" }
,
		{ "trigger": "CCNode_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCNode_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCNode_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCNode_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCNode_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCNode_visit()", "contents": "visit()" }
,
		{ "trigger": "CCNode_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCNode_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCNode_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCNode_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCNode_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCNode_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCNode_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCNode_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCNode_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCNode_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCNode_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCNode_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCNode_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCNode_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCNode_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCNode_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCNode_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCNode_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCNode_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCNode_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCNode_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCNode_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCNode_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCNode_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCNode_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCNode_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCNode_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCNode_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCNode_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCNode_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCNode_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCNode_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCNode_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCNode_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCNode_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCNode_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCNode_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCNode_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCNode_retain()", "contents": "retain()" }
,
		{ "trigger": "CCNode_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCNode_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCNode_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCNode_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCNode_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCNode_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCNode_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCNode_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCNode_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCNode_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCNode_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCNode_copy()", "contents": "copy()" }
,
		{ "trigger": "CCNode_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCNode_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCNode_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCNode_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCNode_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCNode_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCNode_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCNode_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCNode_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCNode_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCNode_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCNode_transform()", "contents": "transform()" }
,
		{ "trigger": "CCNode_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCNode_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCNode_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCNode_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCNode_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCNode_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCNode_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCNode_release()", "contents": "release()" }
,
		{ "trigger": "CCNode_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCNode_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCNode_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCNode_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCNode_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCNode_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCNode_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCNode_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCNode_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCNode_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCNode_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCNode_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCNode_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCNode_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCNode_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCNode_description()", "contents": "description()" }
,
		{ "trigger": "CCNode_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCNode_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCNode_create()", "contents": "CCNode:create()" }
,

		{ "trigger": "CCTableViewCell_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTableViewCell_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTableViewCell_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTableViewCell_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTableViewCell_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTableViewCell_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTableViewCell_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTableViewCell_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTableViewCell_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCTableViewCell_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCTableViewCell_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTableViewCell_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTableViewCell_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTableViewCell_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTableViewCell_setIdx(unsigned_int_uIdx,)", "contents": "setIdx(${1:unsigned_int_uIdx})" }
,
		{ "trigger": "CCTableViewCell_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTableViewCell_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTableViewCell_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTableViewCell_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTableViewCell_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCTableViewCell_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTableViewCell_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTableViewCell_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTableViewCell_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTableViewCell_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTableViewCell_getObjectID()", "contents": "getObjectID()" }
,
		{ "trigger": "CCTableViewCell_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTableViewCell_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTableViewCell_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCTableViewCell_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTableViewCell_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTableViewCell_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTableViewCell_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTableViewCell_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTableViewCell_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTableViewCell_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTableViewCell_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTableViewCell_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTableViewCell_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTableViewCell_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTableViewCell_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTableViewCell_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTableViewCell_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTableViewCell_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTableViewCell_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTableViewCell_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTableViewCell_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTableViewCell_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTableViewCell_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTableViewCell_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTableViewCell_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTableViewCell_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTableViewCell_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTableViewCell_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTableViewCell_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTableViewCell_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTableViewCell_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTableViewCell_setObjectID(unsigned_int_uIdx,)", "contents": "setObjectID(${1:unsigned_int_uIdx})" }
,
		{ "trigger": "CCTableViewCell_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTableViewCell_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTableViewCell_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTableViewCell_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTableViewCell_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTableViewCell_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTableViewCell_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTableViewCell_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTableViewCell_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTableViewCell_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTableViewCell_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTableViewCell_reset()", "contents": "reset()" }
,
		{ "trigger": "CCTableViewCell_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTableViewCell_getIdx()", "contents": "getIdx()" }
,
		{ "trigger": "CCTableViewCell_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTableViewCell_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTableViewCell_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTableViewCell_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTableViewCell_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTableViewCell_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTableViewCell_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTableViewCell_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTableViewCell_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTableViewCell_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTableViewCell_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTableViewCell_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTableViewCell_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTableViewCell_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTableViewCell_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTableViewCell_release()", "contents": "release()" }
,
		{ "trigger": "CCTableViewCell_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTableViewCell_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTableViewCell_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTableViewCell_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTableViewCell_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTableViewCell_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTableViewCell_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCTableViewCell_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTableViewCell_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTableViewCell_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTableViewCell_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTableViewCell_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTableViewCell_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTableViewCell_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTableViewCell_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTableViewCell_description()", "contents": "description()" }
,
		{ "trigger": "CCTableViewCell_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTableViewCell_autorelease()", "contents": "autorelease()" }
,

		{ "trigger": "CCTransitionFadeTR_create(float_t,CCScene*_scene,)", "contents": "CCTransitionFadeTR:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCTransitionSceneOriented_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTransitionSceneOriented_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTransitionSceneOriented_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTransitionSceneOriented_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTransitionSceneOriented_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTransitionSceneOriented_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTransitionSceneOriented_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTransitionSceneOriented_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTransitionSceneOriented_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCTransitionSceneOriented_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCTransitionSceneOriented_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionSceneOriented_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTransitionSceneOriented_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTransitionSceneOriented_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionSceneOriented_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionSceneOriented_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTransitionSceneOriented_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionSceneOriented_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTransitionSceneOriented_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCTransitionSceneOriented_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionSceneOriented_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTransitionSceneOriented_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionSceneOriented_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTransitionSceneOriented_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionSceneOriented_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTransitionSceneOriented_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTransitionSceneOriented_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCTransitionSceneOriented_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTransitionSceneOriented_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTransitionSceneOriented_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTransitionSceneOriented_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTransitionSceneOriented_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTransitionSceneOriented_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTransitionSceneOriented_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionSceneOriented_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTransitionSceneOriented_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTransitionSceneOriented_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionSceneOriented_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTransitionSceneOriented_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTransitionSceneOriented_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTransitionSceneOriented_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTransitionSceneOriented_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionSceneOriented_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionSceneOriented_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionSceneOriented_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTransitionSceneOriented_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTransitionSceneOriented_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTransitionSceneOriented_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTransitionSceneOriented_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTransitionSceneOriented_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTransitionSceneOriented_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTransitionSceneOriented_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionSceneOriented_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTransitionSceneOriented_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTransitionSceneOriented_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTransitionSceneOriented_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTransitionSceneOriented_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTransitionSceneOriented_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTransitionSceneOriented_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTransitionSceneOriented_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTransitionSceneOriented_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTransitionSceneOriented_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionSceneOriented_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTransitionSceneOriented_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTransitionSceneOriented_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTransitionSceneOriented_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTransitionSceneOriented_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTransitionSceneOriented_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTransitionSceneOriented_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTransitionSceneOriented_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTransitionSceneOriented_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionSceneOriented_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTransitionSceneOriented_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTransitionSceneOriented_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTransitionSceneOriented_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTransitionSceneOriented_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionSceneOriented_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTransitionSceneOriented_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTransitionSceneOriented_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTransitionSceneOriented_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTransitionSceneOriented_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTransitionSceneOriented_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionSceneOriented_release()", "contents": "release()" }
,
		{ "trigger": "CCTransitionSceneOriented_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionSceneOriented_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionSceneOriented_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionSceneOriented_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTransitionSceneOriented_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTransitionSceneOriented_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTransitionSceneOriented_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCTransitionSceneOriented_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTransitionSceneOriented_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTransitionSceneOriented_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTransitionSceneOriented_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTransitionSceneOriented_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionSceneOriented_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTransitionSceneOriented_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTransitionSceneOriented_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTransitionSceneOriented_description()", "contents": "description()" }
,
		{ "trigger": "CCTransitionSceneOriented_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTransitionSceneOriented_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTransitionSceneOriented_create(float_t,CCScene*_scene,tOrientation_o,)", "contents": "CCTransitionSceneOriented:create(${1:float_t},${2:CCScene*_scene},${3:tOrientation_o})" }
,

		{ "trigger": "CCScaleBy_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCScaleBy_copy()", "contents": "copy()" }
,
		{ "trigger": "CCScaleBy_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCScaleBy_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCScaleBy_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCScaleBy_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCScaleBy_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCScaleBy_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCScaleBy_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCScaleBy_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCScaleBy_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCScaleBy_retain()", "contents": "retain()" }
,
		{ "trigger": "CCScaleBy_release()", "contents": "release()" }
,
		{ "trigger": "CCScaleBy_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCScaleBy_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCScaleBy_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCScaleBy_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCScaleBy_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCScaleBy_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCScaleBy_create(float_duration,float_sx,float_sy,)", "contents": "CCScaleBy:create(${1:float_duration},${2:float_sx},${3:float_sy})" }
,
		{ "trigger": "CCScaleBy_create(float_duration,float_s,)", "contents": "CCScaleBy:create(${1:float_duration},${2:float_s})" }
,

		{ "trigger": "CCParticleBatchNode_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleBatchNode_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleBatchNode_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleBatchNode_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleBatchNode_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleBatchNode_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleBatchNode_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleBatchNode_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleBatchNode_setBlendFunc(ccBlendFunc_blendFunc,)", "contents": "setBlendFunc(${1:ccBlendFunc_blendFunc})" }
,
		{ "trigger": "CCParticleBatchNode_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCParticleBatchNode_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCParticleBatchNode_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleBatchNode_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleBatchNode_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleBatchNode_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleBatchNode_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleBatchNode_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleBatchNode_removeChildAtIndex(unsigned_int_index,bool_doCleanup,)", "contents": "removeChildAtIndex(${1:unsigned_int_index},${2:bool_doCleanup})" }
,
		{ "trigger": "CCParticleBatchNode_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleBatchNode_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleBatchNode_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCParticleBatchNode_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleBatchNode_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleBatchNode_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleBatchNode_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleBatchNode_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleBatchNode_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleBatchNode_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleBatchNode_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleBatchNode_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCParticleBatchNode_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleBatchNode_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleBatchNode_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleBatchNode_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleBatchNode_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleBatchNode_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleBatchNode_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleBatchNode_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleBatchNode_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleBatchNode_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleBatchNode_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleBatchNode_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleBatchNode_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleBatchNode_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleBatchNode_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleBatchNode_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleBatchNode_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleBatchNode_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleBatchNode_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleBatchNode_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleBatchNode_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleBatchNode_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleBatchNode_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleBatchNode_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleBatchNode_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleBatchNode_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleBatchNode_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleBatchNode_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleBatchNode_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleBatchNode_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleBatchNode_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleBatchNode_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleBatchNode_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleBatchNode_insertChild(CCParticleSystem*_pSystem,unsigned_int_index,)", "contents": "insertChild(${1:CCParticleSystem*_pSystem},${2:unsigned_int_index})" }
,
		{ "trigger": "CCParticleBatchNode_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleBatchNode_removeAllChildrenWithCleanup(bool_doCleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_doCleanup})" }
,
		{ "trigger": "CCParticleBatchNode_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleBatchNode_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleBatchNode_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleBatchNode_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleBatchNode_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleBatchNode_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleBatchNode_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleBatchNode_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleBatchNode_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleBatchNode_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleBatchNode_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleBatchNode_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleBatchNode_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleBatchNode_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleBatchNode_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleBatchNode_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleBatchNode_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleBatchNode_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleBatchNode_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleBatchNode_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleBatchNode_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleBatchNode_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleBatchNode_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleBatchNode_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleBatchNode_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleBatchNode_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleBatchNode_setTexture(CCTexture2D_*texture,)", "contents": "setTexture(${1:CCTexture2D_*texture})" }
,
		{ "trigger": "CCParticleBatchNode_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleBatchNode_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleBatchNode_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleBatchNode_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleBatchNode_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCParticleBatchNode_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleBatchNode_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleBatchNode_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleBatchNode_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleBatchNode_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleBatchNode_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleBatchNode_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleBatchNode_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleBatchNode_disableParticle(unsigned_int_particleIndex,)", "contents": "disableParticle(${1:unsigned_int_particleIndex})" }
,
		{ "trigger": "CCParticleBatchNode_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleBatchNode_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleBatchNode_create(const_char*_fileImage,unsigned_int_capacity_=_kCCParticleDefaultCapacity,)", "contents": "CCParticleBatchNode:create(${1:const_char*_fileImage},${2:unsigned_int_capacity_=_kCCParticleDefaultCapacity})" }
,
		{ "trigger": "CCParticleBatchNode_createWithTexture(CCTexture2D_*tex,unsigned_int_capacity_=_kCCParticleDefaultCapacity,)", "contents": "CCParticleBatchNode:createWithTexture(${1:CCTexture2D_*tex},${2:unsigned_int_capacity_=_kCCParticleDefaultCapacity})" }
,


		{ "trigger": "CCTransitionRotoZoom_create(float_t,CCScene*_scene,)", "contents": "CCTransitionRotoZoom:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "RichElementText_init(int_tag,const_ccColor3B&_color,GLubyte_opacity,const_char*_text,const_char*_fontName,float_fontSize,)", "contents": "init(${1:int_tag},${2:const_ccColor3B&_color},${3:GLubyte_opacity},${4:const_char*_text},${5:const_char*_fontName},${6:float_fontSize})" }
,
		{ "trigger": "RichElementText_create(int_tag,const_ccColor3B&_color,GLubyte_opacity,const_char*_text,const_char*_fontName,float_fontSize,)", "contents": "RichElementText:create(${1:int_tag},${2:const_ccColor3B&_color},${3:GLubyte_opacity},${4:const_char*_text},${5:const_char*_fontName},${6:float_fontSize})" }
,

		{ "trigger": "CCDelayTime_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCDelayTime_copy()", "contents": "copy()" }
,
		{ "trigger": "CCDelayTime_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCDelayTime_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCDelayTime_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCDelayTime_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCDelayTime_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCDelayTime_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCDelayTime_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCDelayTime_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCDelayTime_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCDelayTime_retain()", "contents": "retain()" }
,
		{ "trigger": "CCDelayTime_release()", "contents": "release()" }
,
		{ "trigger": "CCDelayTime_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCDelayTime_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCDelayTime_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCDelayTime_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCDelayTime_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCDelayTime_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCDelayTime_create(float_d,)", "contents": "CCDelayTime:create(${1:float_d})" }
,

		{ "trigger": "CCEaseInOut_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseInOut_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseInOut_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseInOut_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseInOut_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseInOut_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseInOut_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseInOut_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseInOut_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseInOut_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseInOut_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseInOut_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseInOut_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseInOut_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseInOut_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseInOut_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseInOut_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseInOut_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseInOut_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseInOut_create(CCActionInterval*_pAction,float_fRate,)", "contents": "CCEaseInOut:create(${1:CCActionInterval*_pAction},${2:float_fRate})" }
,

		{ "trigger": "CCTransitionSplitCols_create(float_t,CCScene*_scene,)", "contents": "CCTransitionSplitCols:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCTransitionProgress_create(float_t,CCScene*_scene,)", "contents": "CCTransitionProgress:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCCatmullRomBy_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCCatmullRomBy_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCCatmullRomBy_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCCatmullRomBy_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCCatmullRomBy_release()", "contents": "release()" }
,
		{ "trigger": "CCCatmullRomBy_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCCatmullRomBy_retain()", "contents": "retain()" }
,
		{ "trigger": "CCCatmullRomBy_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCCatmullRomBy_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCCatmullRomBy_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCCatmullRomBy_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCCatmullRomBy_getPoints()", "contents": "getPoints()" }
,
		{ "trigger": "CCCatmullRomBy_setPoints(CCPointArray*_points,)", "contents": "setPoints(${1:CCPointArray*_points})" }
,
		{ "trigger": "CCCatmullRomBy_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCCatmullRomBy_copy()", "contents": "copy()" }
,
		{ "trigger": "CCCatmullRomBy_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCCatmullRomBy_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCCatmullRomBy_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCCatmullRomBy_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCCatmullRomBy_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCCatmullRomBy_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCCatmullRomBy_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCCatmullRomBy_create(float_dt,CCPointArray*_points,)", "contents": "CCCatmullRomBy:create(${1:float_dt},${2:CCPointArray*_points})" }
,

		{ "trigger": "CCTransitionFlipAngular_create(float_t,CCScene*_s,tOrientation_o_=_kCCTransitionOrientationRightOver,)", "contents": "CCTransitionFlipAngular:create(${1:float_t},${2:CCScene*_s},${3:tOrientation_o_=_kCCTransitionOrientationRightOver})" }
,

		{ "trigger": "CCHide_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCHide_copy()", "contents": "copy()" }
,
		{ "trigger": "CCHide_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCHide_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCHide_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCHide_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCHide_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCHide_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCHide_retain()", "contents": "retain()" }
,
		{ "trigger": "CCHide_release()", "contents": "release()" }
,
		{ "trigger": "CCHide_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCHide_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCHide_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCHide_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCHide_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCHide_create()", "contents": "CCHide:create()" }
,

		{ "trigger": "CCFadeOutDownTiles_turnOffTile(CCPoint_pos,)", "contents": "turnOffTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutDownTiles_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCFadeOutDownTiles_originalTile(CCPoint_pos,)", "contents": "originalTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutDownTiles_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCFadeOutDownTiles_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCFadeOutDownTiles_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCFadeOutDownTiles_release()", "contents": "release()" }
,
		{ "trigger": "CCFadeOutDownTiles_setTile(CCPoint_pos,ccQuad3_coords,)", "contents": "setTile(${1:CCPoint_pos},${2:ccQuad3_coords})" }
,
		{ "trigger": "CCFadeOutDownTiles_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCFadeOutDownTiles_retain()", "contents": "retain()" }
,
		{ "trigger": "CCFadeOutDownTiles_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCFadeOutDownTiles_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCFadeOutDownTiles_tile(CCPoint_pos,)", "contents": "tile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutDownTiles_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCFadeOutDownTiles_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCFadeOutDownTiles_transformTile(CCPoint_pos,float_distance,)", "contents": "transformTile(${1:CCPoint_pos},${2:float_distance})" }
,
		{ "trigger": "CCFadeOutDownTiles_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCFadeOutDownTiles_copy()", "contents": "copy()" }
,
		{ "trigger": "CCFadeOutDownTiles_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCFadeOutDownTiles_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCFadeOutDownTiles_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCFadeOutDownTiles_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCFadeOutDownTiles_turnOnTile(CCPoint_pos,)", "contents": "turnOnTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutDownTiles_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCFadeOutDownTiles_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCFadeOutDownTiles_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCFadeOutDownTiles_create(float_duration,CCSize_gridSize,)", "contents": "CCFadeOutDownTiles:create(${1:float_duration},${2:CCSize_gridSize})" }
,

		{ "trigger": "CCSkin_setScaleX(float_fScaleX,)", "contents": "setScaleX(${1:float_fScaleX})" }
,
		{ "trigger": "CCSkin_reorderChild(CCNode*_pChild,int_zOrder,)", "contents": "reorderChild(${1:CCNode*_pChild},${2:int_zOrder})" }
,
		{ "trigger": "CCSkin_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCSkin_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCSkin_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCSkin_setSkinData(const_CCBaseData&_var,)", "contents": "setSkinData(${1:const_CCBaseData&_var})" }
,
		{ "trigger": "CCSkin_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCSkin_setFlipY(bool_bFlipY,)", "contents": "setFlipY(${1:bool_bFlipY})" }
,
		{ "trigger": "CCSkin_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCSkin_setTextureRect(CCRect_rect,bool_rotated,CCSize_size,)", "contents": "setTextureRect(${1:CCRect_rect},${2:bool_rotated},${3:CCSize_size})" }
,
		{ "trigger": "CCSkin_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCSkin_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCSkin_updateTransform()", "contents": "updateTransform()" }
,
		{ "trigger": "CCSkin_draw()", "contents": "draw()" }
,
		{ "trigger": "CCSkin_setSkewY(float_sy,)", "contents": "setSkewY(${1:float_sy})" }
,
		{ "trigger": "CCSkin_isFrameDisplayed(CCSpriteFrame_*pFrame,)", "contents": "isFrameDisplayed(${1:CCSpriteFrame_*pFrame})" }
,
		{ "trigger": "CCSkin_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCSkin_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCSkin_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCSkin_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCSkin_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCSkin_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCSkin_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCSkin_setVisible(bool_bVisible,)", "contents": "setVisible(${1:bool_bVisible})" }
,
		{ "trigger": "CCSkin_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCSkin_getQuad()", "contents": "getQuad()" }
,
		{ "trigger": "CCSkin_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCSkin_initWithFile(const_char_*pszFilename,)", "contents": "initWithFile(${1:const_char_*pszFilename})" }
,
		{ "trigger": "CCSkin_visit()", "contents": "visit()" }
,
		{ "trigger": "CCSkin_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCSkin_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCSkin_getSkinData()", "contents": "getSkinData()" }
,
		{ "trigger": "CCSkin_setDisplayFrameWithAnimationName(const_char_*animationName,int_frameIndex,)", "contents": "setDisplayFrameWithAnimationName(${1:const_char_*animationName},${2:int_frameIndex})" }
,
		{ "trigger": "CCSkin_removeAllChildrenWithCleanup(bool_bCleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_bCleanup})" }
,
		{ "trigger": "CCSkin_displayFrame()", "contents": "displayFrame()" }
,
		{ "trigger": "CCSkin_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCSkin_addChild(CCNode*_pChild,int_zOrder,)", "contents": "addChild(${1:CCNode*_pChild},${2:int_zOrder})" }
,
		{ "trigger": "CCSkin_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCSkin_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCSkin_isFlipX()", "contents": "isFlipX()" }
,
		{ "trigger": "CCSkin_setDisplayFrame(CCSpriteFrame_*pNewFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame_*pNewFrame})" }
,
		{ "trigger": "CCSkin_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCSkin_nodeToWorldTransformAR()", "contents": "nodeToWorldTransformAR()" }
,
		{ "trigger": "CCSkin_transform()", "contents": "transform()" }
,
		{ "trigger": "CCSkin_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCSkin_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCSkin_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCSkin_initWithSpriteFrameName(const_char_*pszSpriteFrameName,)", "contents": "initWithSpriteFrameName(${1:const_char_*pszSpriteFrameName})" }
,
		{ "trigger": "CCSkin_setVertexZ(float_fVertexZ,)", "contents": "setVertexZ(${1:float_fVertexZ})" }
,
		{ "trigger": "CCSkin_setBlendFunc(ccBlendFunc_blendFunc,)", "contents": "setBlendFunc(${1:ccBlendFunc_blendFunc})" }
,
		{ "trigger": "CCSkin_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCSkin_setScaleY(float_fScaleY,)", "contents": "setScaleY(${1:float_fScaleY})" }
,
		{ "trigger": "CCSkin_getBone()", "contents": "getBone()" }
,
		{ "trigger": "CCSkin_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCSkin_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCSkin_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCSkin_setFlipX(bool_bFlipX,)", "contents": "setFlipX(${1:bool_bFlipX})" }
,
		{ "trigger": "CCSkin_init()", "contents": "init()" }
,
		{ "trigger": "CCSkin_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCSkin_isDirty()", "contents": "isDirty()" }
,
		{ "trigger": "CCSkin_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCSkin_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCSkin_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCSkin_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCSkin_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCSkin_addChild(CCNode*_pChild,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode*_pChild},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCSkin_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCSkin_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCSkin_getDisplayName()", "contents": "getDisplayName()" }
,
		{ "trigger": "CCSkin_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCSkin_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCSkin_isFlipY()", "contents": "isFlipY()" }
,
		{ "trigger": "CCSkin_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCSkin_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCSkin_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCSkin_getTextureAtlas()", "contents": "getTextureAtlas()" }
,
		{ "trigger": "CCSkin_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCSkin_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCSkin_updateArmatureTransform()", "contents": "updateArmatureTransform()" }
,
		{ "trigger": "CCSkin_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCSkin_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCSkin_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCSkin_setTextureAtlas(CCTextureAtlas_*pobTextureAtlas,)", "contents": "setTextureAtlas(${1:CCTextureAtlas_*pobTextureAtlas})" }
,
		{ "trigger": "CCSkin_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCSkin_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCSkin_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCSkin_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCSkin_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCSkin_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCSkin_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCSkin_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCSkin_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCSkin_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCSkin_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCSkin_retain()", "contents": "retain()" }
,
		{ "trigger": "CCSkin_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCSkin_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCSkin_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCSkin_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCSkin_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCSkin_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCSkin_getOffsetPosition()", "contents": "getOffsetPosition()" }
,
		{ "trigger": "CCSkin_setVertexRect(CCRect_rect,)", "contents": "setVertexRect(${1:CCRect_rect})" }
,
		{ "trigger": "CCSkin_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCSkin_addChild(CCNode*_pChild,)", "contents": "addChild(${1:CCNode*_pChild})" }
,
		{ "trigger": "CCSkin_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCSkin_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCSkin_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCSkin_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCSkin_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCSkin_setScale(float_fScale,)", "contents": "setScale(${1:float_fScale})" }
,
		{ "trigger": "CCSkin_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCSkin_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCSkin_setBone(CCBone*_var,)", "contents": "setBone(${1:CCBone*_var})" }
,
		{ "trigger": "CCSkin_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCSkin_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCSkin_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCSkin_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCSkin_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCSkin_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCSkin_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCSkin_setColor(ccColor3B_color3,)", "contents": "setColor(${1:ccColor3B_color3})" }
,
		{ "trigger": "CCSkin_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCSkin_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCSkin_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCSkin_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCSkin_setRotation(float_rotation,)", "contents": "setRotation(${1:float_rotation})" }
,
		{ "trigger": "CCSkin_setTexture(CCTexture2D_*texture,)", "contents": "setTexture(${1:CCTexture2D_*texture})" }
,
		{ "trigger": "CCSkin_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCSkin_isTextureRectRotated()", "contents": "isTextureRectRotated()" }
,
		{ "trigger": "CCSkin_sortAllChildren()", "contents": "sortAllChildren()" }
,
		{ "trigger": "CCSkin_setBatchNode(CCSpriteBatchNode*_pBatchNode,)", "contents": "setBatchNode(${1:CCSpriteBatchNode*_pBatchNode})" }
,
		{ "trigger": "CCSkin_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCSkin_getAtlasIndex()", "contents": "getAtlasIndex()" }
,
		{ "trigger": "CCSkin_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCSkin_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCSkin_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCSkin_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCSkin_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCSkin_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCSkin_updateTransform()", "contents": "updateTransform()" }
,
		{ "trigger": "CCSkin_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCSkin_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCSkin_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCSkin_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCSkin_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCSkin_release()", "contents": "release()" }
,
		{ "trigger": "CCSkin_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCSkin_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCSkin_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCSkin_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCSkin_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCSkin_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCSkin_getTextureRect()", "contents": "getTextureRect()" }
,
		{ "trigger": "CCSkin_setAtlasIndex(unsigned_int_uAtlasIndex,)", "contents": "setAtlasIndex(${1:unsigned_int_uAtlasIndex})" }
,
		{ "trigger": "CCSkin_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCSkin_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCSkin_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCSkin_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCSkin_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCSkin_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCSkin_removeChild(CCNode*_pChild,bool_bCleanUp,)", "contents": "removeChild(${1:CCNode*_pChild},${2:bool_bCleanUp})" }
,
		{ "trigger": "CCSkin_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCSkin_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCSkin_setDirty(bool_bDirty,)", "contents": "setDirty(${1:bool_bDirty})" }
,
		{ "trigger": "CCSkin_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCSkin_setSkewX(float_sx,)", "contents": "setSkewX(${1:float_sx})" }
,
		{ "trigger": "CCSkin_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCSkin_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCSkin_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCSkin_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCSkin_setTextureRect(CCRect_rect,)", "contents": "setTextureRect(${1:CCRect_rect})" }
,
		{ "trigger": "CCSkin_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCSkin_copy()", "contents": "copy()" }
,
		{ "trigger": "CCSkin_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCSkin_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCSkin_description()", "contents": "description()" }
,
		{ "trigger": "CCSkin_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCSkin_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCSkin_create()", "contents": "CCSkin:create()" }
,
		{ "trigger": "CCSkin_createWithSpriteFrameName(const_char_*pszSpriteFrameName,)", "contents": "CCSkin:createWithSpriteFrameName(${1:const_char_*pszSpriteFrameName})" }
,
		{ "trigger": "CCSkin_create(const_char_*pszFileName,)", "contents": "CCSkin:create(${1:const_char_*pszFileName})" }
,

		{ "trigger": "CCEaseBackIn_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseBackIn_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseBackIn_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseBackIn_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseBackIn_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseBackIn_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseBackIn_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseBackIn_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseBackIn_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseBackIn_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseBackIn_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseBackIn_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseBackIn_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseBackIn_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseBackIn_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseBackIn_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseBackIn_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseBackIn_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseBackIn_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseBackIn_create(CCActionInterval*_pAction,)", "contents": "CCEaseBackIn:create(${1:CCActionInterval*_pAction})" }
,

		{ "trigger": "CCTableView_setDirection(CCScrollViewDirection_eDirection,)", "contents": "setDirection(${1:CCScrollViewDirection_eDirection})" }
,
		{ "trigger": "CCTableView_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTableView_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTableView_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTableView_updateCellAtIndex(unsigned_int_idx,)", "contents": "updateCellAtIndex(${1:unsigned_int_idx})" }
,
		{ "trigger": "CCTableView_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTableView_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTableView_cellAtIndex(unsigned_int_idx,)", "contents": "cellAtIndex(${1:unsigned_int_idx})" }
,
		{ "trigger": "CCTableView_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTableView_init()", "contents": "init()" }
,
		{ "trigger": "CCTableView_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTableView_setContainer(CCNode_*_pContainer,)", "contents": "setContainer(${1:CCNode_*_pContainer})" }
,
		{ "trigger": "CCTableView_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTableView_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTableView_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCTableView_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCTableView_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTableView_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTableView_getZoomScale()", "contents": "getZoomScale()" }
,
		{ "trigger": "CCTableView_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTableView_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTableView_registerScriptAccelerateHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptAccelerateHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCTableView_registerWithTouchDispatcher()", "contents": "registerWithTouchDispatcher()" }
,
		{ "trigger": "CCTableView_ccTouchBegan(CCTouch_*pTouch,CCEvent_*pEvent,)", "contents": "ccTouchBegan(${1:CCTouch_*pTouch},${2:CCEvent_*pEvent})" }
,
		{ "trigger": "CCTableView_setZoomScale(float_s,)", "contents": "setZoomScale(${1:float_s})" }
,
		{ "trigger": "CCTableView_getTouchMode()", "contents": "getTouchMode()" }
,
		{ "trigger": "CCTableView_dequeueCell()", "contents": "dequeueCell()" }
,
		{ "trigger": "CCTableView_setAccelerometerEnabled(bool_bValue,)", "contents": "setAccelerometerEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCTableView_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTableView_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTableView_unregisterScriptTouchHandler()", "contents": "unregisterScriptTouchHandler()" }
,
		{ "trigger": "CCTableView_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTableView_ccTouchEnded(CCTouch_*pTouch,CCEvent_*pEvent,)", "contents": "ccTouchEnded(${1:CCTouch_*pTouch},${2:CCEvent_*pEvent})" }
,
		{ "trigger": "CCTableView_removeCellAtIndex(unsigned_int_idx,)", "contents": "removeCellAtIndex(${1:unsigned_int_idx})" }
,
		{ "trigger": "CCTableView_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTableView_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCTableView_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTableView_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTableView_unregisterScriptAccelerateHandler()", "contents": "unregisterScriptAccelerateHandler()" }
,
		{ "trigger": "CCTableView_scrollViewDidScroll(CCScrollView*_view,)", "contents": "scrollViewDidScroll(${1:CCScrollView*_view})" }
,
		{ "trigger": "CCTableView_setContentOffsetInDuration(CCPoint_offset,float_dt,)", "contents": "setContentOffsetInDuration(${1:CCPoint_offset},${2:float_dt})" }
,
		{ "trigger": "CCTableView_ccTouchMoved(CCTouch_*pTouch,CCEvent_*pEvent,)", "contents": "ccTouchMoved(${1:CCTouch_*pTouch},${2:CCEvent_*pEvent})" }
,
		{ "trigger": "CCTableView_isClippingToBounds()", "contents": "isClippingToBounds()" }
,
		{ "trigger": "CCTableView_registerScriptKeypadHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptKeypadHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCTableView_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTableView_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTableView_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTableView_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTableView_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTableView_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCTableView_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTableView_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTableView_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTableView_setKeypadEnabled(bool_bValue,)", "contents": "setKeypadEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCTableView_setTouchEnabled(bool_e,)", "contents": "setTouchEnabled(${1:bool_e})" }
,
		{ "trigger": "CCTableView_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTableView_setTouchPriority(int_priority,)", "contents": "setTouchPriority(${1:int_priority})" }
,
		{ "trigger": "CCTableView_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTableView_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTableView_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTableView_ccTouchCancelled(CCTouch_*pTouch,CCEvent_*pEvent,)", "contents": "ccTouchCancelled(${1:CCTouch_*pTouch},${2:CCEvent_*pEvent})" }
,
		{ "trigger": "CCTableView_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTableView_scrollViewDidZoom(CCScrollView*_view,)", "contents": "scrollViewDidZoom(${1:CCScrollView*_view})" }
,
		{ "trigger": "CCTableView_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTableView_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTableView_setTouchEnabled(bool_bValue,)", "contents": "setTouchEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCTableView_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTableView_setClippingToBounds(bool_bClippingToBounds,)", "contents": "setClippingToBounds(${1:bool_bClippingToBounds})" }
,
		{ "trigger": "CCTableView_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTableView_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTableView_updateInset()", "contents": "updateInset()" }
,
		{ "trigger": "CCTableView_getViewSize()", "contents": "getViewSize()" }
,
		{ "trigger": "CCTableView_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTableView_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTableView_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "CCTableView_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTableView_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTableView_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTableView_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTableView_setBounceable(bool_bBounceable,)", "contents": "setBounceable(${1:bool_bBounceable})" }
,
		{ "trigger": "CCTableView_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTableView_setViewSize(CCSize_size,)", "contents": "setViewSize(${1:CCSize_size})" }
,
		{ "trigger": "CCTableView_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTableView_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTableView_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTableView_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTableView_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTableView_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTableView_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTableView_setZoomScale(float_s,bool_animated,)", "contents": "setZoomScale(${1:float_s},${2:bool_animated})" }
,
		{ "trigger": "CCTableView_unregisterScriptKeypadHandler()", "contents": "unregisterScriptKeypadHandler()" }
,
		{ "trigger": "CCTableView_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTableView_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTableView_minContainerOffset()", "contents": "minContainerOffset()" }
,
		{ "trigger": "CCTableView_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTableView_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTableView_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTableView_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTableView_isDragging()", "contents": "isDragging()" }
,
		{ "trigger": "CCTableView_isTouchMoved()", "contents": "isTouchMoved()" }
,
		{ "trigger": "CCTableView_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTableView_insertCellAtIndex(unsigned_int_idx,)", "contents": "insertCellAtIndex(${1:unsigned_int_idx})" }
,
		{ "trigger": "CCTableView_setZoomScaleInDuration(float_s,float_dt,)", "contents": "setZoomScaleInDuration(${1:float_s},${2:float_dt})" }
,
		{ "trigger": "CCTableView_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTableView_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTableView_isAccelerometerEnabled()", "contents": "isAccelerometerEnabled()" }
,
		{ "trigger": "CCTableView_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTableView_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTableView_reloadData()", "contents": "reloadData()" }
,
		{ "trigger": "CCTableView_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTableView_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTableView_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTableView_isKeypadEnabled()", "contents": "isKeypadEnabled()" }
,
		{ "trigger": "CCTableView_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTableView_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTableView_getVerticalFillOrder()", "contents": "getVerticalFillOrder()" }
,
		{ "trigger": "CCTableView_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTableView_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTableView_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTableView_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTableView_registerScriptTouchHandler(LUA_FUNCTION_nHandler,bool_bIsMultiTouches_=_false,int_nPriority_=_0,bool_bSwallowsTouches_=_false,)", "contents": "registerScriptTouchHandler(${1:LUA_FUNCTION_nHandler},${2:bool_bIsMultiTouches_=_false},${3:int_nPriority_=_0},${4:bool_bSwallowsTouches_=_false})" }
,
		{ "trigger": "CCTableView_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTableView_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTableView_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTableView_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTableView_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTableView_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTableView_getContainer()", "contents": "getContainer()" }
,
		{ "trigger": "CCTableView_setContentOffset(CCPoint_offset,bool_animated_=_false,)", "contents": "setContentOffset(${1:CCPoint_offset},${2:bool_animated_=_false})" }
,
		{ "trigger": "CCTableView_release()", "contents": "release()" }
,
		{ "trigger": "CCTableView_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTableView_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTableView_isBounceable()", "contents": "isBounceable()" }
,
		{ "trigger": "CCTableView_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTableView_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTableView_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTableView_getDirection()", "contents": "getDirection()" }
,
		{ "trigger": "CCTableView_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTableView_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCTableView_isNodeVisible(CCNode_*_node,)", "contents": "isNodeVisible(${1:CCNode_*_node})" }
,
		{ "trigger": "CCTableView_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTableView_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTableView_resume(CCObject*_sender,)", "contents": "resume(${1:CCObject*_sender})" }
,
		{ "trigger": "CCTableView_initWithViewSize(CCSize_size,CCNode*_container_=_NULL,)", "contents": "initWithViewSize(${1:CCSize_size},${2:CCNode*_container_=_NULL})" }
,
		{ "trigger": "CCTableView_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTableView_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTableView_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTableView_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTableView_setVerticalFillOrder(CCTableViewVerticalFillOrder_order,)", "contents": "setVerticalFillOrder(${1:CCTableViewVerticalFillOrder_order})" }
,
		{ "trigger": "CCTableView_pause(CCObject*_sender,)", "contents": "pause(${1:CCObject*_sender})" }
,
		{ "trigger": "CCTableView_getContentOffset()", "contents": "getContentOffset()" }
,
		{ "trigger": "CCTableView_getTouchPriority()", "contents": "getTouchPriority()" }
,
		{ "trigger": "CCTableView_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTableView_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTableView_description()", "contents": "description()" }
,
		{ "trigger": "CCTableView_setTouchMode(ccTouchesMode_mode,)", "contents": "setTouchMode(${1:ccTouchesMode_mode})" }
,
		{ "trigger": "CCTableView_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTableView_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTableView_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTableView_maxContainerOffset()", "contents": "maxContainerOffset()" }
,

		{ "trigger": "CCAction_copy()", "contents": "copy()" }
,
		{ "trigger": "CCAction_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCAction_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCAction_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCAction_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCAction_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCAction_release()", "contents": "release()" }
,
		{ "trigger": "CCAction_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCAction_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCAction_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCAction_retain()", "contents": "retain()" }
,
		{ "trigger": "CCAction_isSingleReference()", "contents": "isSingleReference()" }
,

		{ "trigger": "CCTMXLayer_getDescendants()", "contents": "getDescendants()" }
,
		{ "trigger": "CCTMXLayer_lowestAtlasIndexInChild(CCSprite_*sprite,)", "contents": "lowestAtlasIndexInChild(${1:CCSprite_*sprite})" }
,
		{ "trigger": "CCTMXLayer_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTMXLayer_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTMXLayer_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTMXLayer_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTMXLayer_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTMXLayer_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTMXLayer_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTMXLayer_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTMXLayer_setBlendFunc(ccBlendFunc_blendFunc,)", "contents": "setBlendFunc(${1:ccBlendFunc_blendFunc})" }
,
		{ "trigger": "CCTMXLayer_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCTMXLayer_getMapTileSize()", "contents": "getMapTileSize()" }
,
		{ "trigger": "CCTMXLayer_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCTMXLayer_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTMXLayer_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTMXLayer_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTMXLayer_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTMXLayer_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTMXLayer_propertyNamed(const_char_*propertyName,)", "contents": "propertyNamed(${1:const_char_*propertyName})" }
,
		{ "trigger": "CCTMXLayer_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTMXLayer_removeChildAtIndex(unsigned_int_index,bool_doCleanup,)", "contents": "removeChildAtIndex(${1:unsigned_int_index},${2:bool_doCleanup})" }
,
		{ "trigger": "CCTMXLayer_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTMXLayer_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTMXLayer_setupTiles()", "contents": "setupTiles()" }
,
		{ "trigger": "CCTMXLayer_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTMXLayer_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCTMXLayer_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTMXLayer_tileGIDAt(const_CCPoint&_tileCoordinate,)", "contents": "tileGIDAt(${1:const_CCPoint&_tileCoordinate})" }
,
		{ "trigger": "CCTMXLayer_setTileGID(unsigned_int_gid,const_CCPoint&_tileCoordinate,)", "contents": "setTileGID(${1:unsigned_int_gid},${2:const_CCPoint&_tileCoordinate})" }
,
		{ "trigger": "CCTMXLayer_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTMXLayer_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTMXLayer_setTileGID(unsigned_int_gid,const_CCPoint&_tileCoordinate,ccTMXTileFlags_flags,)", "contents": "setTileGID(${1:unsigned_int_gid},${2:const_CCPoint&_tileCoordinate},${3:ccTMXTileFlags_flags})" }
,
		{ "trigger": "CCTMXLayer_removeSpriteFromAtlas(CCSprite_*sprite,)", "contents": "removeSpriteFromAtlas(${1:CCSprite_*sprite})" }
,
		{ "trigger": "CCTMXLayer_releaseMap()", "contents": "releaseMap()" }
,
		{ "trigger": "CCTMXLayer_setProperties(CCDictionary*_pval,)", "contents": "setProperties(${1:CCDictionary*_pval})" }
,
		{ "trigger": "CCTMXLayer_getLayerSize()", "contents": "getLayerSize()" }
,
		{ "trigger": "CCTMXLayer_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTMXLayer_reorderBatch(bool_reorder,)", "contents": "reorderBatch(${1:bool_reorder})" }
,
		{ "trigger": "CCTMXLayer_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTMXLayer_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTMXLayer_tileAt(CCPoint_tileCoordinate,)", "contents": "tileAt(${1:CCPoint_tileCoordinate})" }
,
		{ "trigger": "CCTMXLayer_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTMXLayer_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTMXLayer_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCTMXLayer_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTMXLayer_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTMXLayer_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTMXLayer_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTMXLayer_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTMXLayer_positionAt(CCPoint_tileCoordinate,)", "contents": "positionAt(${1:CCPoint_tileCoordinate})" }
,
		{ "trigger": "CCTMXLayer_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTMXLayer_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTMXLayer_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTMXLayer_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTMXLayer_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTMXLayer_getTextureAtlas()", "contents": "getTextureAtlas()" }
,
		{ "trigger": "CCTMXLayer_setTextureAtlas(CCTextureAtlas*_textureAtlas,)", "contents": "setTextureAtlas(${1:CCTextureAtlas*_textureAtlas})" }
,
		{ "trigger": "CCTMXLayer_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTMXLayer_setLayerOrientation(unsigned_int_val,)", "contents": "setLayerOrientation(${1:unsigned_int_val})" }
,
		{ "trigger": "CCTMXLayer_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTMXLayer_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTMXLayer_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTMXLayer_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTMXLayer_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTMXLayer_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTMXLayer_getProperties()", "contents": "getProperties()" }
,
		{ "trigger": "CCTMXLayer_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTMXLayer_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCTMXLayer_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTMXLayer_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTMXLayer_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCTMXLayer_getTileSet()", "contents": "getTileSet()" }
,
		{ "trigger": "CCTMXLayer_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTMXLayer_getLayerOrientation()", "contents": "getLayerOrientation()" }
,
		{ "trigger": "CCTMXLayer_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTMXLayer_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTMXLayer_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTMXLayer_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTMXLayer_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTMXLayer_atlasIndexForChild(CCSprite_*sprite,int_z,)", "contents": "atlasIndexForChild(${1:CCSprite_*sprite},${2:int_z})" }
,
		{ "trigger": "CCTMXLayer_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTMXLayer_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTMXLayer_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTMXLayer_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTMXLayer_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTMXLayer_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTMXLayer_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTMXLayer_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTMXLayer_setTileSet(CCTMXTilesetInfo*_pval,)", "contents": "setTileSet(${1:CCTMXTilesetInfo*_pval})" }
,
		{ "trigger": "CCTMXLayer_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTMXLayer_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTMXLayer_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTMXLayer_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTMXLayer_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTMXLayer_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTMXLayer_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTMXLayer_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTMXLayer_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTMXLayer_setLayerName(const_char_*layerName,)", "contents": "setLayerName(${1:const_char_*layerName})" }
,
		{ "trigger": "CCTMXLayer_sortAllChildren()", "contents": "sortAllChildren()" }
,
		{ "trigger": "CCTMXLayer_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTMXLayer_getTiles()", "contents": "getTiles()" }
,
		{ "trigger": "CCTMXLayer_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTMXLayer_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTMXLayer_rebuildIndexInOrder(CCSprite_*parent,unsigned_int_index,)", "contents": "rebuildIndexInOrder(${1:CCSprite_*parent},${2:unsigned_int_index})" }
,
		{ "trigger": "CCTMXLayer_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTMXLayer_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTMXLayer_getLayerName()", "contents": "getLayerName()" }
,
		{ "trigger": "CCTMXLayer_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTMXLayer_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTMXLayer_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTMXLayer_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTMXLayer_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTMXLayer_release()", "contents": "release()" }
,
		{ "trigger": "CCTMXLayer_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTMXLayer_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTMXLayer_setTexture(CCTexture2D_*texture,)", "contents": "setTexture(${1:CCTexture2D_*texture})" }
,
		{ "trigger": "CCTMXLayer_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTMXLayer_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTMXLayer_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTMXLayer_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTMXLayer_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCTMXLayer_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTMXLayer_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTMXLayer_insertChild(CCSprite_*child,unsigned_int_index,)", "contents": "insertChild(${1:CCSprite_*child},${2:unsigned_int_index})" }
,
		{ "trigger": "CCTMXLayer_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTMXLayer_appendChild(CCSprite_*child,)", "contents": "appendChild(${1:CCSprite_*child})" }
,
		{ "trigger": "CCTMXLayer_setLayerSize(CCSize_val,)", "contents": "setLayerSize(${1:CCSize_val})" }
,
		{ "trigger": "CCTMXLayer_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTMXLayer_increaseAtlasCapacity()", "contents": "increaseAtlasCapacity()" }
,
		{ "trigger": "CCTMXLayer_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTMXLayer_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTMXLayer_setMapTileSize(CCSize_val,)", "contents": "setMapTileSize(${1:CCSize_val})" }
,
		{ "trigger": "CCTMXLayer_highestAtlasIndexInChild(CCSprite_*sprite,)", "contents": "highestAtlasIndexInChild(${1:CCSprite_*sprite})" }
,
		{ "trigger": "CCTMXLayer_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTMXLayer_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTMXLayer_description()", "contents": "description()" }
,
		{ "trigger": "CCTMXLayer_setTiles(unsigned_int*_pval,)", "contents": "setTiles(${1:unsigned_int*_pval})" }
,
		{ "trigger": "CCTMXLayer_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTMXLayer_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTMXLayer_removeTileAt(CCPoint_tileCoordinate,)", "contents": "removeTileAt(${1:CCPoint_tileCoordinate})" }
,
		{ "trigger": "CCTMXLayer_create(CCTMXTilesetInfo_*tilesetInfo,CCTMXLayerInfo_*layerInfo,CCTMXMapInfo_*mapInfo,)", "contents": "CCTMXLayer:create(${1:CCTMXTilesetInfo_*tilesetInfo},${2:CCTMXLayerInfo_*layerInfo},${3:CCTMXMapInfo_*mapInfo})" }
,

		{ "trigger": "CCTexture2D_hasPremultipliedAlpha()", "contents": "hasPremultipliedAlpha()" }
,
		{ "trigger": "CCTexture2D_releaseData(void*_data,)", "contents": "releaseData(${1:void*_data})" }
,
		{ "trigger": "CCTexture2D_drawAtPoint(CCPoint_point,)", "contents": "drawAtPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCTexture2D_generateMipmap()", "contents": "generateMipmap()" }
,
		{ "trigger": "CCTexture2D_getMaxT()", "contents": "getMaxT()" }
,
		{ "trigger": "CCTexture2D_release()", "contents": "release()" }
,
		{ "trigger": "CCTexture2D_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTexture2D_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTexture2D_setTexParameters(ccTexParams*_texParams,)", "contents": "setTexParameters(${1:ccTexParams*_texParams})" }
,
		{ "trigger": "CCTexture2D_keepData(void*_data,unsigned_int_length,)", "contents": "keepData(${1:void*_data},${2:unsigned_int_length})" }
,
		{ "trigger": "CCTexture2D_getPixelsHigh()", "contents": "getPixelsHigh()" }
,
		{ "trigger": "CCTexture2D_getPixelsWide()", "contents": "getPixelsWide()" }
,
		{ "trigger": "CCTexture2D_getPixelFormat()", "contents": "getPixelFormat()" }
,
		{ "trigger": "CCTexture2D_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTexture2D_getContentSizeInPixels()", "contents": "getContentSizeInPixels()" }
,
		{ "trigger": "CCTexture2D_setAliasTexParameters()", "contents": "setAliasTexParameters()" }
,
		{ "trigger": "CCTexture2D_hasMipmaps()", "contents": "hasMipmaps()" }
,
		{ "trigger": "CCTexture2D_bitsPerPixelForFormat(CCTexture2DPixelFormat_format,)", "contents": "bitsPerPixelForFormat(${1:CCTexture2DPixelFormat_format})" }
,
		{ "trigger": "CCTexture2D_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTexture2D_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTexture2D_stringForFormat()", "contents": "stringForFormat()" }
,
		{ "trigger": "CCTexture2D_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTexture2D_getMaxS()", "contents": "getMaxS()" }
,
		{ "trigger": "CCTexture2D_setMaxT(GLfloat_val,)", "contents": "setMaxT(${1:GLfloat_val})" }
,
		{ "trigger": "CCTexture2D_setMaxS(GLfloat_val,)", "contents": "setMaxS(${1:GLfloat_val})" }
,
		{ "trigger": "CCTexture2D_setAntiAliasTexParameters()", "contents": "setAntiAliasTexParameters()" }
,
		{ "trigger": "CCTexture2D_drawInRect(CCRect_rect,)", "contents": "drawInRect(${1:CCRect_rect})" }
,
		{ "trigger": "CCTexture2D_getName()", "contents": "getName()" }
,
		{ "trigger": "CCTexture2D_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTexture2D_bitsPerPixelForFormat()", "contents": "bitsPerPixelForFormat()" }
,
		{ "trigger": "CCTexture2D_defaultAlphaPixelFormat()", "contents": "CCTexture2D:defaultAlphaPixelFormat()" }
,
		{ "trigger": "CCTexture2D_setDefaultAlphaPixelFormat(CCTexture2DPixelFormat_format,)", "contents": "CCTexture2D:setDefaultAlphaPixelFormat(${1:CCTexture2DPixelFormat_format})" }
,

		{ "trigger": "CCAccelDeccelAmplitude_setRate(float_fRate,)", "contents": "setRate(${1:float_fRate})" }
,
		{ "trigger": "CCAccelDeccelAmplitude_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCAccelDeccelAmplitude_copy()", "contents": "copy()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCAccelDeccelAmplitude_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCAccelDeccelAmplitude_retain()", "contents": "retain()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_getRate()", "contents": "getRate()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_release()", "contents": "release()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCAccelDeccelAmplitude_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCAccelDeccelAmplitude_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_create(CCAction_*pAction,float_duration,)", "contents": "CCAccelDeccelAmplitude:create(${1:CCAction_*pAction},${2:float_duration})" }
,

		{ "trigger": "CCJumpTiles3D_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCJumpTiles3D_originalTile(CCPoint_pos,)", "contents": "originalTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCJumpTiles3D_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCJumpTiles3D_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCJumpTiles3D_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCJumpTiles3D_release()", "contents": "release()" }
,
		{ "trigger": "CCJumpTiles3D_setTile(CCPoint_pos,ccQuad3_coords,)", "contents": "setTile(${1:CCPoint_pos},${2:ccQuad3_coords})" }
,
		{ "trigger": "CCJumpTiles3D_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCJumpTiles3D_retain()", "contents": "retain()" }
,
		{ "trigger": "CCJumpTiles3D_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCJumpTiles3D_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCJumpTiles3D_tile(CCPoint_pos,)", "contents": "tile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCJumpTiles3D_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCJumpTiles3D_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCJumpTiles3D_setAmplitude(float_fAmplitude,)", "contents": "setAmplitude(${1:float_fAmplitude})" }
,
		{ "trigger": "CCJumpTiles3D_copy()", "contents": "copy()" }
,
		{ "trigger": "CCJumpTiles3D_getAmplitude()", "contents": "getAmplitude()" }
,
		{ "trigger": "CCJumpTiles3D_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCJumpTiles3D_setAmplitudeRate(float_fAmplitudeRate,)", "contents": "setAmplitudeRate(${1:float_fAmplitudeRate})" }
,
		{ "trigger": "CCJumpTiles3D_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCJumpTiles3D_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCJumpTiles3D_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCJumpTiles3D_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCJumpTiles3D_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCJumpTiles3D_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCJumpTiles3D_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCJumpTiles3D_create(float_duration,CCSize_gridSize,unsigned_int_numberOfJumps,float_amplitude,)", "contents": "CCJumpTiles3D:create(${1:float_duration},${2:CCSize_gridSize},${3:unsigned_int_numberOfJumps},${4:float_amplitude})" }
,

		{ "trigger": "CCMoveTo_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCMoveTo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCMoveTo_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCMoveTo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCMoveTo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCMoveTo_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCMoveTo_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCMoveTo_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCMoveTo_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCMoveTo_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCMoveTo_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCMoveTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCMoveTo_release()", "contents": "release()" }
,
		{ "trigger": "CCMoveTo_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCMoveTo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCMoveTo_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCMoveTo_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCMoveTo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCMoveTo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCMoveTo_create(float_duration,CCPoint_position,)", "contents": "CCMoveTo:create(${1:float_duration},${2:CCPoint_position})" }
,

		{ "trigger": "CCGrid3DAction_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCGrid3DAction_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCGrid3DAction_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCGrid3DAction_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCGrid3DAction_release()", "contents": "release()" }
,
		{ "trigger": "CCGrid3DAction_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCGrid3DAction_retain()", "contents": "retain()" }
,
		{ "trigger": "CCGrid3DAction_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCGrid3DAction_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCGrid3DAction_vertex(const_CCPoint&_pos,)", "contents": "vertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCGrid3DAction_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCGrid3DAction_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCGrid3DAction_setVertex(const_CCPoint&_pos,const_ccVertex3F&_vertex,)", "contents": "setVertex(${1:const_CCPoint&_pos},${2:const_ccVertex3F&_vertex})" }
,
		{ "trigger": "CCGrid3DAction_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCGrid3DAction_copy()", "contents": "copy()" }
,
		{ "trigger": "CCGrid3DAction_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCGrid3DAction_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCGrid3DAction_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCGrid3DAction_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCGrid3DAction_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCGrid3DAction_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCGrid3DAction_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCGrid3DAction_originalVertex(const_CCPoint&_pos,)", "contents": "originalVertex(${1:const_CCPoint&_pos})" }
,

		{ "trigger": "LabelAtlas_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "LabelAtlas_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "LabelAtlas_getBottomInParent()", "contents": "getBottomInParent()" }
,
		{ "trigger": "LabelAtlas_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "LabelAtlas_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "LabelAtlas_setStringValue(const_std::string&_value,)", "contents": "setStringValue(${1:const_std::string&_value})" }
,
		{ "trigger": "LabelAtlas_getVirtualRenderer()", "contents": "getVirtualRenderer()" }
,
		{ "trigger": "LabelAtlas_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "LabelAtlas_draw()", "contents": "draw()" }
,
		{ "trigger": "LabelAtlas_getNodes()", "contents": "getNodes()" }
,
		{ "trigger": "LabelAtlas_active()", "contents": "active()" }
,
		{ "trigger": "LabelAtlas_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "LabelAtlas_getLayoutParameter(LayoutParameterType_type,)", "contents": "getLayoutParameter(${1:LayoutParameterType_type})" }
,
		{ "trigger": "LabelAtlas_ignoreContentAdaptWithSize(bool_ignore,)", "contents": "ignoreContentAdaptWithSize(${1:bool_ignore})" }
,
		{ "trigger": "LabelAtlas_onTouchBegan(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchBegan(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "LabelAtlas_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "LabelAtlas_getSize()", "contents": "getSize()" }
,
		{ "trigger": "LabelAtlas_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "LabelAtlas_getLayoutSize()", "contents": "getLayoutSize()" }
,
		{ "trigger": "LabelAtlas_visit()", "contents": "visit()" }
,
		{ "trigger": "LabelAtlas_getTopInParent()", "contents": "getTopInParent()" }
,
		{ "trigger": "LabelAtlas_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "LabelAtlas_disable()", "contents": "disable()" }
,
		{ "trigger": "LabelAtlas_didNotSelectSelf()", "contents": "didNotSelectSelf()" }
,
		{ "trigger": "LabelAtlas_setSizeType(SizeType_type,)", "contents": "setSizeType(${1:SizeType_type})" }
,
		{ "trigger": "LabelAtlas_getNodeByTag(int_tag,)", "contents": "getNodeByTag(${1:int_tag})" }
,
		{ "trigger": "LabelAtlas_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "LabelAtlas_getPositionPercent()", "contents": "getPositionPercent()" }
,
		{ "trigger": "LabelAtlas_setPosition(const_CCPoint_&pos,)", "contents": "setPosition(${1:const_CCPoint_&pos})" }
,
		{ "trigger": "LabelAtlas_setFlipY(bool_flipY,)", "contents": "setFlipY(${1:bool_flipY})" }
,
		{ "trigger": "LabelAtlas_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "LabelAtlas_setSize(const_CCSize_&size,)", "contents": "setSize(${1:const_CCSize_&size})" }
,
		{ "trigger": "LabelAtlas_clone()", "contents": "clone()" }
,
		{ "trigger": "LabelAtlas_onTouchEnded(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchEnded(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "LabelAtlas_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "LabelAtlas_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "LabelAtlas_getTouchEndPos()", "contents": "getTouchEndPos()" }
,
		{ "trigger": "LabelAtlas_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "LabelAtlas_onTouchMoved(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchMoved(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "LabelAtlas_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "LabelAtlas_setTouchEnable(bool_enabled,bool_containChildren_=_false,)", "contents": "setTouchEnable(${1:bool_enabled},${2:bool_containChildren_=_false})" }
,
		{ "trigger": "LabelAtlas_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "LabelAtlas_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "LabelAtlas_addNode(CCNode_*_node,int_zOrder,)", "contents": "addNode(${1:CCNode_*_node},${2:int_zOrder})" }
,
		{ "trigger": "LabelAtlas_removeAllNodes()", "contents": "removeAllNodes()" }
,
		{ "trigger": "LabelAtlas_getWidgetByTag(int_tag,)", "contents": "getWidgetByTag(${1:int_tag})" }
,
		{ "trigger": "LabelAtlas_getChildByName(const_char*_name,)", "contents": "getChildByName(${1:const_char*_name})" }
,
		{ "trigger": "LabelAtlas_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "LabelAtlas_setAnchorPoint(const_CCPoint_&pt,)", "contents": "setAnchorPoint(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "LabelAtlas_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "LabelAtlas_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "LabelAtlas_getCustomSize()", "contents": "getCustomSize()" }
,
		{ "trigger": "LabelAtlas_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "LabelAtlas_getRightInParent()", "contents": "getRightInParent()" }
,
		{ "trigger": "LabelAtlas_getDescription()", "contents": "getDescription()" }
,
		{ "trigger": "LabelAtlas_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "LabelAtlas_getRect()", "contents": "getRect()" }
,
		{ "trigger": "LabelAtlas_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "LabelAtlas_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "LabelAtlas_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "LabelAtlas_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "LabelAtlas_getName()", "contents": "getName()" }
,
		{ "trigger": "LabelAtlas_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "LabelAtlas_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "LabelAtlas_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "LabelAtlas_isFlipY()", "contents": "isFlipY()" }
,
		{ "trigger": "LabelAtlas_setSizePercent(const_CCPoint_&percent,)", "contents": "setSizePercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "LabelAtlas_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "LabelAtlas_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "LabelAtlas_addNode(CCNode*_node,)", "contents": "addNode(${1:CCNode*_node})" }
,
		{ "trigger": "LabelAtlas_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "LabelAtlas_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "LabelAtlas_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "LabelAtlas_setProperty(const_std::string&_stringValue,const_std::string&_charMapFile,int_itemWidth,int_itemHeight,const_std::string&_startCharMap,)", "contents": "setProperty(${1:const_std::string&_stringValue},${2:const_std::string&_charMapFile},${3:int_itemWidth},${4:int_itemHeight},${5:const_std::string&_startCharMap})" }
,
		{ "trigger": "LabelAtlas_setBright(bool_bright,)", "contents": "setBright(${1:bool_bright})" }
,
		{ "trigger": "LabelAtlas_isBright()", "contents": "isBright()" }
,
		{ "trigger": "LabelAtlas_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "LabelAtlas_removeChild(CCNode*_child,)", "contents": "removeChild(${1:CCNode*_child})" }
,
		{ "trigger": "LabelAtlas_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "LabelAtlas_getTag()", "contents": "getTag()" }
,
		{ "trigger": "LabelAtlas_removeAllChildren()", "contents": "removeAllChildren()" }
,
		{ "trigger": "LabelAtlas_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "LabelAtlas_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "LabelAtlas_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "LabelAtlas_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "LabelAtlas_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "LabelAtlas_setFocused(bool_fucosed,)", "contents": "setFocused(${1:bool_fucosed})" }
,
		{ "trigger": "LabelAtlas_executeScriptEvent(int_eventName,)", "contents": "executeScriptEvent(${1:int_eventName})" }
,
		{ "trigger": "LabelAtlas_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "LabelAtlas_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "LabelAtlas_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "LabelAtlas_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "LabelAtlas_setTouchEnabled(bool_enabled,)", "contents": "setTouchEnabled(${1:bool_enabled})" }
,
		{ "trigger": "LabelAtlas_setBrightStyle(BrightStyle_style,)", "contents": "setBrightStyle(${1:BrightStyle_style})" }
,
		{ "trigger": "LabelAtlas_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "LabelAtlas_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "LabelAtlas_setPositionType(PositionType_type,)", "contents": "setPositionType(${1:PositionType_type})" }
,
		{ "trigger": "LabelAtlas_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "LabelAtlas_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "LabelAtlas_updateSizeAndPosition(const_CCSize&_parentSize,)", "contents": "updateSizeAndPosition(${1:const_CCSize&_parentSize})" }
,
		{ "trigger": "LabelAtlas_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "LabelAtlas_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "LabelAtlas_setLayoutParameter(LayoutParameter*_parameter,)", "contents": "setLayoutParameter(${1:LayoutParameter*_parameter})" }
,
		{ "trigger": "LabelAtlas_getColor()", "contents": "getColor()" }
,
		{ "trigger": "LabelAtlas_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "LabelAtlas_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "LabelAtlas_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "LabelAtlas_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "LabelAtlas_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "LabelAtlas_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "LabelAtlas_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "LabelAtlas_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "LabelAtlas_removeNodeByTag(int_tag,)", "contents": "removeNodeByTag(${1:int_tag})" }
,
		{ "trigger": "LabelAtlas_setPositionPercent(const_CCPoint_&percent,)", "contents": "setPositionPercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "LabelAtlas_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "LabelAtlas_copy()", "contents": "copy()" }
,
		{ "trigger": "LabelAtlas_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "LabelAtlas_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "LabelAtlas_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "LabelAtlas_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "LabelAtlas_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "LabelAtlas_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "LabelAtlas_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "LabelAtlas_getTouchMovePos()", "contents": "getTouchMovePos()" }
,
		{ "trigger": "LabelAtlas_getTouchStartPos()", "contents": "getTouchStartPos()" }
,
		{ "trigger": "LabelAtlas_hitTest(const_CCPoint_&pt,)", "contents": "hitTest(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "LabelAtlas_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "LabelAtlas_sortAllChildren()", "contents": "sortAllChildren()" }
,
		{ "trigger": "LabelAtlas_getSizePercent()", "contents": "getSizePercent()" }
,
		{ "trigger": "LabelAtlas_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "LabelAtlas_updateSizeAndPosition()", "contents": "updateSizeAndPosition()" }
,
		{ "trigger": "LabelAtlas_isFlipX()", "contents": "isFlipX()" }
,
		{ "trigger": "LabelAtlas_getParent()", "contents": "getParent()" }
,
		{ "trigger": "LabelAtlas_setName(const_char*_name,)", "contents": "setName(${1:const_char*_name})" }
,
		{ "trigger": "LabelAtlas_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "LabelAtlas_transform()", "contents": "transform()" }
,
		{ "trigger": "LabelAtlas_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "LabelAtlas_isFocused()", "contents": "isFocused()" }
,
		{ "trigger": "LabelAtlas_retain()", "contents": "retain()" }
,
		{ "trigger": "LabelAtlas_setSoundEff(std::string_eff,)", "contents": "setSoundEff(${1:std::string_eff})" }
,
		{ "trigger": "LabelAtlas_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "LabelAtlas_visit()", "contents": "visit()" }
,
		{ "trigger": "LabelAtlas_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "LabelAtlas_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "LabelAtlas_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "LabelAtlas_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "LabelAtlas_addNode(CCNode*_node,int_zOrder,int_tag,)", "contents": "addNode(${1:CCNode*_node},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "LabelAtlas_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "LabelAtlas_getActionTag()", "contents": "getActionTag()" }
,
		{ "trigger": "LabelAtlas_release()", "contents": "release()" }
,
		{ "trigger": "LabelAtlas_setActionTag(int_tag,)", "contents": "setActionTag(${1:int_tag})" }
,
		{ "trigger": "LabelAtlas_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "LabelAtlas_setFlipX(bool_flipX,)", "contents": "setFlipX(${1:bool_flipX})" }
,
		{ "trigger": "LabelAtlas_checkChildInfo(int_handleState,Widget*_sender,const_CCPoint_&touchPoint,)", "contents": "checkChildInfo(${1:int_handleState},${2:Widget*_sender},${3:const_CCPoint_&touchPoint})" }
,
		{ "trigger": "LabelAtlas_removeFromParent()", "contents": "removeFromParent()" }
,
		{ "trigger": "LabelAtlas_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "LabelAtlas_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "LabelAtlas_getStringValue()", "contents": "getStringValue()" }
,
		{ "trigger": "LabelAtlas_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "LabelAtlas_isIgnoreContentAdaptWithSize()", "contents": "isIgnoreContentAdaptWithSize()" }
,
		{ "trigger": "LabelAtlas_getLeftInParent()", "contents": "getLeftInParent()" }
,
		{ "trigger": "LabelAtlas_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "LabelAtlas_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "LabelAtlas_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "LabelAtlas_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "LabelAtlas_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "LabelAtlas_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "LabelAtlas_getScale()", "contents": "getScale()" }
,
		{ "trigger": "LabelAtlas_removeNode(CCNode*_node,)", "contents": "removeNode(${1:CCNode*_node})" }
,
		{ "trigger": "LabelAtlas_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "LabelAtlas_onExit()", "contents": "onExit()" }
,
		{ "trigger": "LabelAtlas_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "LabelAtlas_getWorldPosition()", "contents": "getWorldPosition()" }
,
		{ "trigger": "LabelAtlas_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "LabelAtlas_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "LabelAtlas_clippingParentAreaContainPoint(const_CCPoint_&pt,)", "contents": "clippingParentAreaContainPoint(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "LabelAtlas_onTouchCancelled(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchCancelled(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "LabelAtlas_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "LabelAtlas_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "LabelAtlas_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "LabelAtlas_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "LabelAtlas_description()", "contents": "description()" }
,
		{ "trigger": "LabelAtlas_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "LabelAtlas_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "LabelAtlas_getWidgetType()", "contents": "getWidgetType()" }
,
		{ "trigger": "LabelAtlas_getSizeType()", "contents": "getSizeType()" }
,
		{ "trigger": "LabelAtlas_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "LabelAtlas_onEnter()", "contents": "onEnter()" }
,
		{ "trigger": "LabelAtlas_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "LabelAtlas_addChild(CCNode*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "LabelAtlas_create()", "contents": "LabelAtlas:create()" }
,

		{ "trigger": "CCMenuItemImage_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCMenuItemImage_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCMenuItemImage_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCMenuItemImage_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCMenuItemImage_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCMenuItemImage_getSelectedImage()", "contents": "getSelectedImage()" }
,
		{ "trigger": "CCMenuItemImage_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCMenuItemImage_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCMenuItemImage_init()", "contents": "init()" }
,
		{ "trigger": "CCMenuItemImage_draw()", "contents": "draw()" }
,
		{ "trigger": "CCMenuItemImage_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCMenuItemImage_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCMenuItemImage_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCMenuItemImage_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCMenuItemImage_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCMenuItemImage_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCMenuItemImage_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCMenuItemImage_getDisabledImage()", "contents": "getDisabledImage()" }
,
		{ "trigger": "CCMenuItemImage_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemImage_visit()", "contents": "visit()" }
,
		{ "trigger": "CCMenuItemImage_setSelectedImage(CCNode*_pImage,)", "contents": "setSelectedImage(${1:CCNode*_pImage})" }
,
		{ "trigger": "CCMenuItemImage_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCMenuItemImage_setNormalImage(CCNode*_pImage,)", "contents": "setNormalImage(${1:CCNode*_pImage})" }
,
		{ "trigger": "CCMenuItemImage_setNormalSpriteFrame(CCSpriteFrame*_frame,)", "contents": "setNormalSpriteFrame(${1:CCSpriteFrame*_frame})" }
,
		{ "trigger": "CCMenuItemImage_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItemImage_activate()", "contents": "activate()" }
,
		{ "trigger": "CCMenuItemImage_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItemImage_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCMenuItemImage_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCMenuItemImage_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemImage_unregisterScriptTapHandler()", "contents": "unregisterScriptTapHandler()" }
,
		{ "trigger": "CCMenuItemImage_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCMenuItemImage_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCMenuItemImage_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemImage_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCMenuItemImage_registerScriptTapHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptTapHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItemImage_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCMenuItemImage_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCMenuItemImage_selected()", "contents": "selected()" }
,
		{ "trigger": "CCMenuItemImage_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItemImage_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItemImage_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItemImage_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCMenuItemImage_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCMenuItemImage_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCMenuItemImage_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCMenuItemImage_setDisabledSpriteFrame(CCSpriteFrame*_frame,)", "contents": "setDisabledSpriteFrame(${1:CCSpriteFrame*_frame})" }
,
		{ "trigger": "CCMenuItemImage_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCMenuItemImage_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCMenuItemImage_isSelected()", "contents": "isSelected()" }
,
		{ "trigger": "CCMenuItemImage_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCMenuItemImage_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCMenuItemImage_setSelectedSpriteFrame(CCSpriteFrame*_frame,)", "contents": "setSelectedSpriteFrame(${1:CCSpriteFrame*_frame})" }
,
		{ "trigger": "CCMenuItemImage_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCMenuItemImage_unselected()", "contents": "unselected()" }
,
		{ "trigger": "CCMenuItemImage_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCMenuItemImage_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCMenuItemImage_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItemImage_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCMenuItemImage_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCMenuItemImage_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCMenuItemImage_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCMenuItemImage_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItemImage_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCMenuItemImage_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCMenuItemImage_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCMenuItemImage_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemImage_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemImage_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItemImage_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCMenuItemImage_setEnabled(bool_bEnabled,)", "contents": "setEnabled(${1:bool_bEnabled})" }
,
		{ "trigger": "CCMenuItemImage_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCMenuItemImage_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCMenuItemImage_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCMenuItemImage_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCMenuItemImage_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCMenuItemImage_retain()", "contents": "retain()" }
,
		{ "trigger": "CCMenuItemImage_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItemImage_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCMenuItemImage_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCMenuItemImage_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCMenuItemImage_setColor(ccColor3B_color,)", "contents": "setColor(${1:ccColor3B_color})" }
,
		{ "trigger": "CCMenuItemImage_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCMenuItemImage_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCMenuItemImage_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCMenuItemImage_rect()", "contents": "rect()" }
,
		{ "trigger": "CCMenuItemImage_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCMenuItemImage_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCMenuItemImage_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCMenuItemImage_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCMenuItemImage_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCMenuItemImage_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCMenuItemImage_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCMenuItemImage_getNormalImage()", "contents": "getNormalImage()" }
,
		{ "trigger": "CCMenuItemImage_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemImage_copy()", "contents": "copy()" }
,
		{ "trigger": "CCMenuItemImage_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCMenuItemImage_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCMenuItemImage_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCMenuItemImage_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCMenuItemImage_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCMenuItemImage_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCMenuItemImage_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCMenuItemImage_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCMenuItemImage_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItemImage_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCMenuItemImage_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCMenuItemImage_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCMenuItemImage_transform()", "contents": "transform()" }
,
		{ "trigger": "CCMenuItemImage_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItemImage_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCMenuItemImage_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCMenuItemImage_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCMenuItemImage_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCMenuItemImage_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCMenuItemImage_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCMenuItemImage_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItemImage_release()", "contents": "release()" }
,
		{ "trigger": "CCMenuItemImage_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItemImage_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemImage_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItemImage_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCMenuItemImage_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCMenuItemImage_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCMenuItemImage_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCMenuItemImage_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCMenuItemImage_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCMenuItemImage_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCMenuItemImage_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCMenuItemImage_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCMenuItemImage_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCMenuItemImage_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItemImage_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCMenuItemImage_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCMenuItemImage_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCMenuItemImage_setDisabledImage(CCNode*_pImage,)", "contents": "setDisabledImage(${1:CCNode*_pImage})" }
,
		{ "trigger": "CCMenuItemImage_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCMenuItemImage_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCMenuItemImage_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCMenuItemImage_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCMenuItemImage_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCMenuItemImage_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "CCMenuItemImage_description()", "contents": "description()" }
,
		{ "trigger": "CCMenuItemImage_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCMenuItemImage_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCMenuItemImage_create(const_char*_normalImage,const_char*_selectedImage,)", "contents": "CCMenuItemImage:create(${1:const_char*_normalImage},${2:const_char*_selectedImage})" }
,
		{ "trigger": "CCMenuItemImage_create()", "contents": "CCMenuItemImage:create()" }
,
		{ "trigger": "CCMenuItemImage_create(const_char*_normalImage,const_char*_selectedImage,const_char*_disabledImage,)", "contents": "CCMenuItemImage:create(${1:const_char*_normalImage},${2:const_char*_selectedImage},${3:const_char*_disabledImage})" }
,

		{ "trigger": "CCSequence_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCSequence_copy()", "contents": "copy()" }
,
		{ "trigger": "CCSequence_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCSequence_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCSequence_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCSequence_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCSequence_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCSequence_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCSequence_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCSequence_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCSequence_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCSequence_retain()", "contents": "retain()" }
,
		{ "trigger": "CCSequence_release()", "contents": "release()" }
,
		{ "trigger": "CCSequence_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCSequence_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCSequence_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCSequence_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCSequence_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCSequence_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCSequence_create(CCArray_*actions,)", "contents": "CCSequence:create(${1:CCArray_*actions})" }
,
		{ "trigger": "CCSequence_createWithTwoActions(CCFiniteTimeAction_*pActionOne,CCFiniteTimeAction_*pActionTwo,)", "contents": "CCSequence:createWithTwoActions(${1:CCFiniteTimeAction_*pActionOne},${2:CCFiniteTimeAction_*pActionTwo})" }
,

		{ "trigger": "CCTransitionScene_create(float_t,CCScene*_scene,)", "contents": "CCTransitionScene:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCTransitionCrossFade_create(float_t,CCScene*_scene,)", "contents": "CCTransitionCrossFade:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCPageTurn3D_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCPageTurn3D_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCPageTurn3D_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCPageTurn3D_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCPageTurn3D_release()", "contents": "release()" }
,
		{ "trigger": "CCPageTurn3D_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCPageTurn3D_retain()", "contents": "retain()" }
,
		{ "trigger": "CCPageTurn3D_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCPageTurn3D_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCPageTurn3D_vertex(const_CCPoint&_pos,)", "contents": "vertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCPageTurn3D_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCPageTurn3D_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCPageTurn3D_setVertex(const_CCPoint&_pos,const_ccVertex3F&_vertex,)", "contents": "setVertex(${1:const_CCPoint&_pos},${2:const_ccVertex3F&_vertex})" }
,
		{ "trigger": "CCPageTurn3D_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCPageTurn3D_copy()", "contents": "copy()" }
,
		{ "trigger": "CCPageTurn3D_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCPageTurn3D_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCPageTurn3D_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCPageTurn3D_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCPageTurn3D_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCPageTurn3D_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCPageTurn3D_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCPageTurn3D_originalVertex(const_CCPoint&_pos,)", "contents": "originalVertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCPageTurn3D_create(float_duration,CCSize_gridSize,)", "contents": "CCPageTurn3D:create(${1:float_duration},${2:CCSize_gridSize})" }
,

		{ "trigger": "CCAnimation_getLoops()", "contents": "getLoops()" }
,
		{ "trigger": "CCAnimation_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCAnimation_setRestoreOriginalFrame(bool_bRestoreFrame,)", "contents": "setRestoreOriginalFrame(${1:bool_bRestoreFrame})" }
,
		{ "trigger": "CCAnimation_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCAnimation_addSpriteFrameWithTexture(CCTexture2D*_pobTexture,const_CCRect&_rect,)", "contents": "addSpriteFrameWithTexture(${1:CCTexture2D*_pobTexture},${2:const_CCRect&_rect})" }
,
		{ "trigger": "CCAnimation_getRestoreOriginalFrame()", "contents": "getRestoreOriginalFrame()" }
,
		{ "trigger": "CCAnimation_setLoops(unsigned_int_uLoops,)", "contents": "setLoops(${1:unsigned_int_uLoops})" }
,
		{ "trigger": "CCAnimation_copy()", "contents": "copy()" }
,
		{ "trigger": "CCAnimation_release()", "contents": "release()" }
,
		{ "trigger": "CCAnimation_getTotalDelayUnits()", "contents": "getTotalDelayUnits()" }
,
		{ "trigger": "CCAnimation_setDelayPerUnit(float_fDelayPerUnits,)", "contents": "setDelayPerUnit(${1:float_fDelayPerUnits})" }
,
		{ "trigger": "CCAnimation_addSpriteFrameWithFileName(const_char_*pszFileName,)", "contents": "addSpriteFrameWithFileName(${1:const_char_*pszFileName})" }
,
		{ "trigger": "CCAnimation_retain()", "contents": "retain()" }
,
		{ "trigger": "CCAnimation_getDelayPerUnit()", "contents": "getDelayPerUnit()" }
,
		{ "trigger": "CCAnimation_addSpriteFrame(CCSpriteFrame_*pFrame,)", "contents": "addSpriteFrame(${1:CCSpriteFrame_*pFrame})" }
,
		{ "trigger": "CCAnimation_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCAnimation_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCAnimation_setFrames(CCArray*_pFrames,)", "contents": "setFrames(${1:CCArray*_pFrames})" }
,
		{ "trigger": "CCAnimation_getFrames()", "contents": "getFrames()" }
,
		{ "trigger": "CCAnimation_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCAnimation_createWithSpriteFrames(CCArray*_arrayOfSpriteFrameNames,float_delay,)", "contents": "CCAnimation:createWithSpriteFrames(${1:CCArray*_arrayOfSpriteFrameNames},${2:float_delay})" }
,
		{ "trigger": "CCAnimation_create(CCArray_*arrayOfAnimationFrameNames,float_delayPerUnit,unsigned_int_loops,)", "contents": "CCAnimation:create(${1:CCArray_*arrayOfAnimationFrameNames},${2:float_delayPerUnit},${3:unsigned_int_loops})" }
,
		{ "trigger": "CCAnimation_createWithSpriteFrames(CCArray*_arrayOfSpriteFrameNames,)", "contents": "CCAnimation:createWithSpriteFrames(${1:CCArray*_arrayOfSpriteFrameNames})" }
,
		{ "trigger": "CCAnimation_create()", "contents": "CCAnimation:create()" }
,

		{ "trigger": "CCTintTo_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCTintTo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTintTo_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCTintTo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTintTo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTintTo_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTintTo_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCTintTo_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCTintTo_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCTintTo_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCTintTo_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCTintTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCTintTo_release()", "contents": "release()" }
,
		{ "trigger": "CCTintTo_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCTintTo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTintTo_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCTintTo_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCTintTo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTintTo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTintTo_create(float_duration,GLubyte_red,GLubyte_green,GLubyte_blue,)", "contents": "CCTintTo:create(${1:float_duration},${2:GLubyte_red},${3:GLubyte_green},${4:GLubyte_blue})" }
,

		{ "trigger": "CCPoint_equals(const_CCPoint_&_target,)", "contents": "equals(${1:const_CCPoint_&_target})" }
,

		{ "trigger": "CCEGLView_getVisibleOrigin()", "contents": "getVisibleOrigin()" }
,
		{ "trigger": "CCEGLView_setFrameSize(float_width,float_height,)", "contents": "setFrameSize(${1:float_width},${2:float_height})" }
,
		{ "trigger": "CCEGLView_setDesignResolutionSize(float_width,float_height,ResolutionPolicy_resolutionPolicy,)", "contents": "setDesignResolutionSize(${1:float_width},${2:float_height},${3:ResolutionPolicy_resolutionPolicy})" }
,
		{ "trigger": "CCEGLView_getDesignResolutionSize()", "contents": "getDesignResolutionSize()" }
,
		{ "trigger": "CCEGLView_getViewPortRect()", "contents": "getViewPortRect()" }
,
		{ "trigger": "CCEGLView_getFrameSize()", "contents": "getFrameSize()" }
,
		{ "trigger": "CCEGLView_setScissorInPoints(float_x_,float_y_,float_w_,float_h,)", "contents": "setScissorInPoints(${1:float_x_},${2:float_y_},${3:float_w_},${4:float_h})" }
,
		{ "trigger": "CCEGLView_setViewPortInPoints(float_x_,float_y_,float_w_,float_h,)", "contents": "setViewPortInPoints(${1:float_x_},${2:float_y_},${3:float_w_},${4:float_h})" }
,
		{ "trigger": "CCEGLView_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCEGLView_setTouchDelegate(EGLTouchDelegate_*_pDelegate,)", "contents": "setTouchDelegate(${1:EGLTouchDelegate_*_pDelegate})" }
,
		{ "trigger": "CCEGLView_getVisibleSize()", "contents": "getVisibleSize()" }
,
		{ "trigger": "CCEGLView_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCEGLView_sharedOpenGLView()", "contents": "CCEGLView:sharedOpenGLView()" }
,

		{ "trigger": "CCEvent_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEvent_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEvent_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEvent_release()", "contents": "release()" }
,
		{ "trigger": "CCEvent_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEvent_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEvent_isSingleReference()", "contents": "isSingleReference()" }
,

		{ "trigger": "CCArray_insertObject(CCObject*_object,unsigned_int_index,)", "contents": "insertObject(${1:CCObject*_object},${2:unsigned_int_index})" }
,
		{ "trigger": "CCArray_lastObject()", "contents": "lastObject()" }
,
		{ "trigger": "CCArray_removeObject(CCObject*_object,bool_bReleaseObj_=_true,)", "contents": "removeObject(${1:CCObject*_object},${2:bool_bReleaseObj_=_true})" }
,
		{ "trigger": "CCArray_release()", "contents": "release()" }
,
		{ "trigger": "CCArray_retain()", "contents": "retain()" }
,
		{ "trigger": "CCArray_addObject(CCObject*_object,)", "contents": "addObject(${1:CCObject*_object})" }
,
		{ "trigger": "CCArray_exchangeObjectAtIndex(unsigned_int_index1,unsigned_int_index2,)", "contents": "exchangeObjectAtIndex(${1:unsigned_int_index1},${2:unsigned_int_index2})" }
,
		{ "trigger": "CCArray_replaceObjectAtIndex(unsigned_int_uIndex,CCObject*_pObject,bool_bReleaseObject_=_true,)", "contents": "replaceObjectAtIndex(${1:unsigned_int_uIndex},${2:CCObject*_pObject},${3:bool_bReleaseObject_=_true})" }
,
		{ "trigger": "CCArray_objectAtIndex(unsigned_int_index,)", "contents": "objectAtIndex(${1:unsigned_int_index})" }
,
		{ "trigger": "CCArray_addObjectsFromArray(CCArray*_otherArray,)", "contents": "addObjectsFromArray(${1:CCArray*_otherArray})" }
,
		{ "trigger": "CCArray_capacity()", "contents": "capacity()" }
,
		{ "trigger": "CCArray_exchangeObject(CCObject*_object1,CCObject*_object2,)", "contents": "exchangeObject(${1:CCObject*_object1},${2:CCObject*_object2})" }
,
		{ "trigger": "CCArray_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCArray_copy()", "contents": "copy()" }
,
		{ "trigger": "CCArray_indexOfObject(CCObject*_object,)", "contents": "indexOfObject(${1:CCObject*_object})" }
,
		{ "trigger": "CCArray_removeLastObject(bool_bReleaseObj_=_true,)", "contents": "removeLastObject(${1:bool_bReleaseObj_=_true})" }
,
		{ "trigger": "CCArray_removeObjectAtIndex(unsigned_int_index,bool_bReleaseObj_=_true,)", "contents": "removeObjectAtIndex(${1:unsigned_int_index},${2:bool_bReleaseObj_=_true})" }
,
		{ "trigger": "CCArray_fastRemoveObject(CCObject*_object,)", "contents": "fastRemoveObject(${1:CCObject*_object})" }
,
		{ "trigger": "CCArray_removeAllObjects()", "contents": "removeAllObjects()" }
,
		{ "trigger": "CCArray_randomObject()", "contents": "randomObject()" }
,
		{ "trigger": "CCArray_fastRemoveObjectAtIndex(unsigned_int_index,)", "contents": "fastRemoveObjectAtIndex(${1:unsigned_int_index})" }
,
		{ "trigger": "CCArray_isEqualToArray(CCArray*_pOtherArray,)", "contents": "isEqualToArray(${1:CCArray*_pOtherArray})" }
,
		{ "trigger": "CCArray_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCArray_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCArray_reverseObjects()", "contents": "reverseObjects()" }
,
		{ "trigger": "CCArray_reduceMemoryFootprint()", "contents": "reduceMemoryFootprint()" }
,
		{ "trigger": "CCArray_removeObjectsInArray(CCArray*_otherArray,)", "contents": "removeObjectsInArray(${1:CCArray*_otherArray})" }
,
		{ "trigger": "CCArray_count()", "contents": "count()" }
,
		{ "trigger": "CCArray_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCArray_containsObject(CCObject*_object,)", "contents": "containsObject(${1:CCObject*_object})" }
,
		{ "trigger": "CCArray_create()", "contents": "CCArray:create()" }
,
		{ "trigger": "CCArray_createWithObject(CCObject*_pObject,)", "contents": "CCArray:createWithObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCArray_createWithArray(CCArray*_otherArray,)", "contents": "CCArray:createWithArray(${1:CCArray*_otherArray})" }
,
		{ "trigger": "CCArray_createWithCapacity(unsigned_int_capacity,)", "contents": "CCArray:createWithCapacity(${1:unsigned_int_capacity})" }
,
		{ "trigger": "CCArray_createWithContentsOfFile(const_char*_pFileName,)", "contents": "CCArray:createWithContentsOfFile(${1:const_char*_pFileName})" }
,

		{ "trigger": "CCEaseElasticIn_setPeriod(float_fPeriod,)", "contents": "setPeriod(${1:float_fPeriod})" }
,
		{ "trigger": "CCEaseElasticIn_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseElasticIn_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseElasticIn_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseElasticIn_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseElasticIn_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseElasticIn_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseElasticIn_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseElasticIn_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseElasticIn_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseElasticIn_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseElasticIn_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseElasticIn_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseElasticIn_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseElasticIn_getPeriod()", "contents": "getPeriod()" }
,
		{ "trigger": "CCEaseElasticIn_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseElasticIn_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseElasticIn_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseElasticIn_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseElasticIn_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseElasticIn_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseElasticIn_create(CCActionInterval_*pAction,float_fPeriod_=_0.3,)", "contents": "CCEaseElasticIn:create(${1:CCActionInterval_*pAction},${2:float_fPeriod_=_0.3})" }
,

		{ "trigger": "CCSpeed_copy()", "contents": "copy()" }
,
		{ "trigger": "CCSpeed_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCSpeed_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCSpeed_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCSpeed_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCSpeed_setSpeed(float_fSpeed,)", "contents": "setSpeed(${1:float_fSpeed})" }
,
		{ "trigger": "CCSpeed_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCSpeed_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCSpeed_retain()", "contents": "retain()" }
,
		{ "trigger": "CCSpeed_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCSpeed_release()", "contents": "release()" }
,
		{ "trigger": "CCSpeed_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCSpeed_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCSpeed_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCSpeed_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCSpeed_create(CCActionInterval_*pAction,float_fRate,)", "contents": "CCSpeed:create(${1:CCActionInterval_*pAction},${2:float_fRate})" }
,

		{ "trigger": "CCRotateTo_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCRotateTo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCRotateTo_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCRotateTo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCRotateTo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCRotateTo_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCRotateTo_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCRotateTo_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCRotateTo_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCRotateTo_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCRotateTo_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCRotateTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCRotateTo_release()", "contents": "release()" }
,
		{ "trigger": "CCRotateTo_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCRotateTo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCRotateTo_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCRotateTo_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCRotateTo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCRotateTo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCRotateTo_create(float_duration,float_fDeltaAngle,)", "contents": "CCRotateTo:create(${1:float_duration},${2:float_fDeltaAngle})" }
,

		{ "trigger": "CCActionCamera_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCActionCamera_copy()", "contents": "copy()" }
,
		{ "trigger": "CCActionCamera_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCActionCamera_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCActionCamera_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCActionCamera_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCActionCamera_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCActionCamera_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCActionCamera_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCActionCamera_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCActionCamera_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCActionCamera_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCActionCamera_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCActionCamera_release()", "contents": "release()" }
,
		{ "trigger": "CCActionCamera_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCActionCamera_startWithTarget(CCNode_*pTarget,)", "contents": "startWithTarget(${1:CCNode_*pTarget})" }
,
		{ "trigger": "CCActionCamera_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCActionCamera_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCActionCamera_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCActionCamera_retain()", "contents": "retain()" }
,
		{ "trigger": "CCActionCamera_isSingleReference()", "contents": "isSingleReference()" }
,


		{ "trigger": "UIRootWidget_getDescription()", "contents": "getDescription()" }
,
		{ "trigger": "UIRootWidget_create()", "contents": "UIRootWidget:create()" }
,

		{ "trigger": "CCCardinalSplineBy_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCCardinalSplineBy_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCCardinalSplineBy_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCCardinalSplineBy_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCCardinalSplineBy_release()", "contents": "release()" }
,
		{ "trigger": "CCCardinalSplineBy_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCCardinalSplineBy_retain()", "contents": "retain()" }
,
		{ "trigger": "CCCardinalSplineBy_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCCardinalSplineBy_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCCardinalSplineBy_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCCardinalSplineBy_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCCardinalSplineBy_getPoints()", "contents": "getPoints()" }
,
		{ "trigger": "CCCardinalSplineBy_setPoints(CCPointArray*_points,)", "contents": "setPoints(${1:CCPointArray*_points})" }
,
		{ "trigger": "CCCardinalSplineBy_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCCardinalSplineBy_copy()", "contents": "copy()" }
,
		{ "trigger": "CCCardinalSplineBy_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCCardinalSplineBy_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCCardinalSplineBy_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCCardinalSplineBy_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCCardinalSplineBy_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCCardinalSplineBy_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCCardinalSplineBy_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCCardinalSplineBy_create(float_duration,CCPointArray*_points,float_tension,)", "contents": "CCCardinalSplineBy:create(${1:float_duration},${2:CCPointArray*_points},${3:float_tension})" }
,

		{ "trigger": "CCComController_serialize(void*_r,)", "contents": "serialize(${1:void*_r})" }
,
		{ "trigger": "CCComController_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCComController_setOwner(CCNode_*pOwner,)", "contents": "setOwner(${1:CCNode_*pOwner})" }
,
		{ "trigger": "CCComController_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCComController_setEnabled(bool_b,)", "contents": "setEnabled(${1:bool_b})" }
,
		{ "trigger": "CCComController_copy()", "contents": "copy()" }
,
		{ "trigger": "CCComController_setName(const_char_*pName,)", "contents": "setName(${1:const_char_*pName})" }
,
		{ "trigger": "CCComController_getName()", "contents": "getName()" }
,
		{ "trigger": "CCComController_retain()", "contents": "retain()" }
,
		{ "trigger": "CCComController_release()", "contents": "release()" }
,
		{ "trigger": "CCComController_getOwner()", "contents": "getOwner()" }
,
		{ "trigger": "CCComController_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCComController_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCComController_init()", "contents": "init()" }
,
		{ "trigger": "CCComController_update(float_delta,)", "contents": "update(${1:float_delta})" }
,
		{ "trigger": "CCComController_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCComController_create()", "contents": "CCComController:create()" }
,

		{ "trigger": "CCArmature_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCArmature_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCArmature_update(float_dt,)", "contents": "update(${1:float_dt})" }
,
		{ "trigger": "CCArmature_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCArmature_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCArmature_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCArmature_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCArmature_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCArmature_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCArmature_init()", "contents": "init()" }
,
		{ "trigger": "CCArmature_draw()", "contents": "draw()" }
,
		{ "trigger": "CCArmature_setVersion(float_var,)", "contents": "setVersion(${1:float_var})" }
,
		{ "trigger": "CCArmature_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCArmature_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCArmature_setBlendFunc(ccBlendFunc_blendFunc,)", "contents": "setBlendFunc(${1:ccBlendFunc_blendFunc})" }
,
		{ "trigger": "CCArmature_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCArmature_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCArmature_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCArmature_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCArmature_visit()", "contents": "visit()" }
,
		{ "trigger": "CCArmature_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCArmature_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCArmature_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCArmature_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCArmature_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCArmature_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCArmature_setArmatureData(CCArmatureData*_var,)", "contents": "setArmatureData(${1:CCArmatureData*_var})" }
,
		{ "trigger": "CCArmature_transform()", "contents": "transform()" }
,
		{ "trigger": "CCArmature_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCArmature_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCArmature_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCArmature_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCArmature_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCArmature_setTextureAtlas(CCTextureAtlas*_var,)", "contents": "setTextureAtlas(${1:CCTextureAtlas*_var})" }
,
		{ "trigger": "CCArmature_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCArmature_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCArmature_addBone(CCBone_*bone,const_char_*parentName,)", "contents": "addBone(${1:CCBone_*bone},${2:const_char_*parentName})" }
,
		{ "trigger": "CCArmature_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCArmature_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCArmature_setBatchNode(CCBatchNode*_var,)", "contents": "setBatchNode(${1:CCBatchNode*_var})" }
,
		{ "trigger": "CCArmature_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCArmature_getVersion()", "contents": "getVersion()" }
,
		{ "trigger": "CCArmature_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCArmature_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCArmature_removeBone(CCBone_*bone,bool_recursion,)", "contents": "removeBone(${1:CCBone_*bone},${2:bool_recursion})" }
,
		{ "trigger": "CCArmature_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCArmature_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCArmature_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCArmature_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCArmature_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCArmature_getArmatureTransformDirty()", "contents": "getArmatureTransformDirty()" }
,
		{ "trigger": "CCArmature_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCArmature_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCArmature_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCArmature_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCArmature_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCArmature_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCArmature_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCArmature_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCArmature_getTextureAtlas()", "contents": "getTextureAtlas()" }
,
		{ "trigger": "CCArmature_getBoneAtPoint(float_x,float_y,)", "contents": "getBoneAtPoint(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCArmature_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCArmature_setAnimation(CCArmatureAnimation_*animation,)", "contents": "setAnimation(${1:CCArmatureAnimation_*animation})" }
,
		{ "trigger": "CCArmature_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCArmature_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCArmature_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCArmature_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCArmature_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCArmature_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCArmature_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCArmature_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCArmature_getTexureAtlasWithTexture(CCTexture2D_*texture,)", "contents": "getTexureAtlasWithTexture(${1:CCTexture2D_*texture})" }
,
		{ "trigger": "CCArmature_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCArmature_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCArmature_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCArmature_getBone(const_char_*name,)", "contents": "getBone(${1:const_char_*name})" }
,
		{ "trigger": "CCArmature_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCArmature_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCArmature_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCArmature_retain()", "contents": "retain()" }
,
		{ "trigger": "CCArmature_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCArmature_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCArmature_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCArmature_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCArmature_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCArmature_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCArmature_getName()", "contents": "getName()" }
,
		{ "trigger": "CCArmature_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCArmature_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCArmature_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCArmature_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCArmature_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCArmature_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCArmature_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCArmature_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCArmature_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCArmature_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCArmature_getParentBone()", "contents": "getParentBone()" }
,
		{ "trigger": "CCArmature_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCArmature_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCArmature_init(const_char_*name,CCBone_*parentBone,)", "contents": "init(${1:const_char_*name},${2:CCBone_*parentBone})" }
,
		{ "trigger": "CCArmature_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCArmature_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCArmature_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCArmature_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCArmature_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCArmature_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCArmature_init(const_char_*name,)", "contents": "init(${1:const_char_*name})" }
,
		{ "trigger": "CCArmature_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCArmature_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCArmature_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCArmature_getArmatureData()", "contents": "getArmatureData()" }
,
		{ "trigger": "CCArmature_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCArmature_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCArmature_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCArmature_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCArmature_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCArmature_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCArmature_changeBoneParent(CCBone_*bone,const_char_*parentName,)", "contents": "changeBoneParent(${1:CCBone_*bone},${2:const_char_*parentName})" }
,
		{ "trigger": "CCArmature_visit()", "contents": "visit()" }
,
		{ "trigger": "CCArmature_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCArmature_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCArmature_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCArmature_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCArmature_draw()", "contents": "draw()" }
,
		{ "trigger": "CCArmature_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCArmature_getBoneDic()", "contents": "getBoneDic()" }
,
		{ "trigger": "CCArmature_release()", "contents": "release()" }
,
		{ "trigger": "CCArmature_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCArmature_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCArmature_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCArmature_setName(std::string_var,)", "contents": "setName(${1:std::string_var})" }
,
		{ "trigger": "CCArmature_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCArmature_setParentBone(CCBone*_var,)", "contents": "setParentBone(${1:CCBone*_var})" }
,
		{ "trigger": "CCArmature_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCArmature_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCArmature_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCArmature_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCArmature_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCArmature_updateOffsetPoint()", "contents": "updateOffsetPoint()" }
,
		{ "trigger": "CCArmature_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCArmature_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCArmature_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCArmature_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCArmature_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCArmature_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCArmature_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCArmature_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCArmature_copy()", "contents": "copy()" }
,
		{ "trigger": "CCArmature_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCArmature_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCArmature_description()", "contents": "description()" }
,
		{ "trigger": "CCArmature_getAnimation()", "contents": "getAnimation()" }
,
		{ "trigger": "CCArmature_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCArmature_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCArmature_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCArmature_create()", "contents": "CCArmature:create()" }
,
		{ "trigger": "CCArmature_create(const_char_*name,CCBone_*parentBone,)", "contents": "CCArmature:create(${1:const_char_*name},${2:CCBone_*parentBone})" }
,
		{ "trigger": "CCArmature_create(const_char_*name,)", "contents": "CCArmature:create(${1:const_char_*name})" }
,

		{ "trigger": "CCAccelAmplitude_setRate(float_fRate,)", "contents": "setRate(${1:float_fRate})" }
,
		{ "trigger": "CCAccelAmplitude_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCAccelAmplitude_copy()", "contents": "copy()" }
,
		{ "trigger": "CCAccelAmplitude_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCAccelAmplitude_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCAccelAmplitude_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCAccelAmplitude_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCAccelAmplitude_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCAccelAmplitude_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCAccelAmplitude_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCAccelAmplitude_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCAccelAmplitude_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCAccelAmplitude_retain()", "contents": "retain()" }
,
		{ "trigger": "CCAccelAmplitude_getRate()", "contents": "getRate()" }
,
		{ "trigger": "CCAccelAmplitude_release()", "contents": "release()" }
,
		{ "trigger": "CCAccelAmplitude_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCAccelAmplitude_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCAccelAmplitude_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCAccelAmplitude_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCAccelAmplitude_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCAccelAmplitude_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCAccelAmplitude_create(CCAction_*pAction,float_duration,)", "contents": "CCAccelAmplitude:create(${1:CCAction_*pAction},${2:float_duration})" }
,

		{ "trigger": "CCLens3D_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCLens3D_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCLens3D_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCLens3D_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCLens3D_setLensEffect(float_fLensEffect,)", "contents": "setLensEffect(${1:float_fLensEffect})" }
,
		{ "trigger": "CCLens3D_release()", "contents": "release()" }
,
		{ "trigger": "CCLens3D_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCLens3D_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCLens3D_retain()", "contents": "retain()" }
,
		{ "trigger": "CCLens3D_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCLens3D_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCLens3D_getLensEffect()", "contents": "getLensEffect()" }
,
		{ "trigger": "CCLens3D_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCLens3D_vertex(const_CCPoint&_pos,)", "contents": "vertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCLens3D_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCLens3D_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCLens3D_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCLens3D_copy()", "contents": "copy()" }
,
		{ "trigger": "CCLens3D_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCLens3D_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCLens3D_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCLens3D_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCLens3D_setVertex(const_CCPoint&_pos,const_ccVertex3F&_vertex,)", "contents": "setVertex(${1:const_CCPoint&_pos},${2:const_ccVertex3F&_vertex})" }
,
		{ "trigger": "CCLens3D_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCLens3D_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCLens3D_originalVertex(const_CCPoint&_pos,)", "contents": "originalVertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCLens3D_create(float_duration,CCSize_gridSize,CCPoint_position,float_radius,)", "contents": "CCLens3D:create(${1:float_duration},${2:CCSize_gridSize},${3:CCPoint_position},${4:float_radius})" }
,

		{ "trigger": "CCFadeOut_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCFadeOut_copy()", "contents": "copy()" }
,
		{ "trigger": "CCFadeOut_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCFadeOut_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCFadeOut_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCFadeOut_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCFadeOut_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCFadeOut_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCFadeOut_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCFadeOut_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCFadeOut_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCFadeOut_retain()", "contents": "retain()" }
,
		{ "trigger": "CCFadeOut_release()", "contents": "release()" }
,
		{ "trigger": "CCFadeOut_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCFadeOut_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCFadeOut_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCFadeOut_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCFadeOut_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCFadeOut_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCFadeOut_create(float_d,)", "contents": "CCFadeOut:create(${1:float_d})" }
,

		{ "trigger": "CCBone_getDisplayRenderNodeType()", "contents": "getDisplayRenderNodeType()" }
,
		{ "trigger": "CCBone_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCBone_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCBone_removeDisplay(int_index,)", "contents": "removeDisplay(${1:int_index})" }
,
		{ "trigger": "CCBone_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCBone_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCBone_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCBone_setChildArmature(CCArmature*_var,)", "contents": "setChildArmature(${1:CCArmature*_var})" }
,
		{ "trigger": "CCBone_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCBone_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCBone_addDisplay(CCDisplayData_*displayData,int_index,)", "contents": "addDisplay(${1:CCDisplayData_*displayData},${2:int_index})" }
,
		{ "trigger": "CCBone_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCBone_init()", "contents": "init()" }
,
		{ "trigger": "CCBone_draw()", "contents": "draw()" }
,
		{ "trigger": "CCBone_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCBone_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCBone_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCBone_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCBone_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCBone_updateColor()", "contents": "updateColor()" }
,
		{ "trigger": "CCBone_setArmature(CCArmature*_var,)", "contents": "setArmature(${1:CCArmature*_var})" }
,
		{ "trigger": "CCBone_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCBone_visit()", "contents": "visit()" }
,
		{ "trigger": "CCBone_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCBone_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCBone_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCBone_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCBone_getWorldInfo()", "contents": "getWorldInfo()" }
,
		{ "trigger": "CCBone_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCBone_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCBone_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCBone_transform()", "contents": "transform()" }
,
		{ "trigger": "CCBone_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCBone_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCBone_removeFromParent(bool_recursion,)", "contents": "removeFromParent(${1:bool_recursion})" }
,
		{ "trigger": "CCBone_getChildArmature()", "contents": "getChildArmature()" }
,
		{ "trigger": "CCBone_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCBone_init(const_char_*name,)", "contents": "init(${1:const_char_*name})" }
,
		{ "trigger": "CCBone_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCBone_isTransformDirty()", "contents": "isTransformDirty()" }
,
		{ "trigger": "CCBone_update(float_delta,)", "contents": "update(${1:float_delta})" }
,
		{ "trigger": "CCBone_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCBone_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCBone_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCBone_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCBone_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCBone_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCBone_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCBone_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCBone_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCBone_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCBone_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCBone_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCBone_setParentBone(CCBone_*parent,)", "contents": "setParentBone(${1:CCBone_*parent})" }
,
		{ "trigger": "CCBone_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCBone_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCBone_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCBone_setIgnoreMovementBoneData(bool_var,)", "contents": "setIgnoreMovementBoneData(${1:bool_var})" }
,
		{ "trigger": "CCBone_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCBone_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCBone_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCBone_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCBone_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCBone_setDisplayManager(CCDisplayManager*_var,)", "contents": "setDisplayManager(${1:CCDisplayManager*_var})" }
,
		{ "trigger": "CCBone_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCBone_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCBone_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCBone_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCBone_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCBone_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCBone_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCBone_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCBone_getIgnoreMovementBoneData()", "contents": "getIgnoreMovementBoneData()" }
,
		{ "trigger": "CCBone_nodeToArmatureTransform()", "contents": "nodeToArmatureTransform()" }
,
		{ "trigger": "CCBone_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCBone_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCBone_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCBone_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCBone_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCBone_retain()", "contents": "retain()" }
,
		{ "trigger": "CCBone_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCBone_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCBone_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCBone_setColor(const_ccColor3B_&color,)", "contents": "setColor(${1:const_ccColor3B_&color})" }
,
		{ "trigger": "CCBone_changeDisplayWithIndex(int_index,bool_force,)", "contents": "changeDisplayWithIndex(${1:int_index},${2:bool_force})" }
,
		{ "trigger": "CCBone_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCBone_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCBone_getArmature()", "contents": "getArmature()" }
,
		{ "trigger": "CCBone_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCBone_getName()", "contents": "getName()" }
,
		{ "trigger": "CCBone_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCBone_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCBone_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCBone_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCBone_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCBone_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCBone_getParentBone()", "contents": "getParentBone()" }
,
		{ "trigger": "CCBone_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCBone_addDisplay(CCNode_*display,int_index,)", "contents": "addDisplay(${1:CCNode_*display},${2:int_index})" }
,
		{ "trigger": "CCBone_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCBone_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCBone_addChildBone(CCBone_*child,)", "contents": "addChildBone(${1:CCBone_*child})" }
,
		{ "trigger": "CCBone_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCBone_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCBone_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCBone_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCBone_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCBone_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCBone_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCBone_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCBone_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCBone_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCBone_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCBone_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCBone_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCBone_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCBone_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCBone_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCBone_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCBone_updateDisplayedColor(const_ccColor3B_&parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B_&parentColor})" }
,
		{ "trigger": "CCBone_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCBone_getTween()", "contents": "getTween()" }
,
		{ "trigger": "CCBone_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCBone_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCBone_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCBone_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCBone_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCBone_release()", "contents": "release()" }
,
		{ "trigger": "CCBone_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCBone_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCBone_removeFromParent()", "contents": "removeFromParent()" }
,
		{ "trigger": "CCBone_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCBone_setName(std::string_var,)", "contents": "setName(${1:std::string_var})" }
,
		{ "trigger": "CCBone_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCBone_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCBone_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCBone_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCBone_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCBone_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCBone_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCBone_updateZOrder()", "contents": "updateZOrder()" }
,
		{ "trigger": "CCBone_getDisplayRenderNode()", "contents": "getDisplayRenderNode()" }
,
		{ "trigger": "CCBone_setTransformDirty(bool_dirty,)", "contents": "setTransformDirty(${1:bool_dirty})" }
,
		{ "trigger": "CCBone_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCBone_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCBone_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCBone_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCBone_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCBone_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCBone_removeChildBone(CCBone_*bone,bool_recursion,)", "contents": "removeChildBone(${1:CCBone_*bone},${2:bool_recursion})" }
,
		{ "trigger": "CCBone_getDisplayManager()", "contents": "getDisplayManager()" }
,
		{ "trigger": "CCBone_copy()", "contents": "copy()" }
,
		{ "trigger": "CCBone_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCBone_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCBone_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCBone_description()", "contents": "description()" }
,
		{ "trigger": "CCBone_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCBone_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCBone_create()", "contents": "CCBone:create()" }
,
		{ "trigger": "CCBone_create(const_char_*name,)", "contents": "CCBone:create(${1:const_char_*name})" }
,

		{ "trigger": "CCControlSwitch_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCControlSwitch_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCControlSwitch_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCControlSwitch_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCControlSwitch_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCControlSwitch_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCControlSwitch_setOpacityModifyRGB(bool_bOpacityModifyRGB,)", "contents": "setOpacityModifyRGB(${1:bool_bOpacityModifyRGB})" }
,
		{ "trigger": "CCControlSwitch_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCControlSwitch_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCControlSwitch_init()", "contents": "init()" }
,
		{ "trigger": "CCControlSwitch_draw()", "contents": "draw()" }
,
		{ "trigger": "CCControlSwitch_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCControlSwitch_removeHandleOfControlEvent(CCControlEvent_controlEvents,)", "contents": "removeHandleOfControlEvent(${1:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlSwitch_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCControlSwitch_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCControlSwitch_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCControlSwitch_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCControlSwitch_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCControlSwitch_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCControlSwitch_setOn(bool_isOn,)", "contents": "setOn(${1:bool_isOn})" }
,
		{ "trigger": "CCControlSwitch_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCControlSwitch_initWithMaskSprite(CCSprite_*maskSprite,CCSprite_*_onSprite,CCSprite_*_offSprite,CCSprite_*_thumbSprite,)", "contents": "initWithMaskSprite(${1:CCSprite_*maskSprite},${2:CCSprite_*_onSprite},${3:CCSprite_*_offSprite},${4:CCSprite_*_thumbSprite})" }
,
		{ "trigger": "CCControlSwitch_visit()", "contents": "visit()" }
,
		{ "trigger": "CCControlSwitch_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCControlSwitch_isHighlighted()", "contents": "isHighlighted()" }
,
		{ "trigger": "CCControlSwitch_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCControlSwitch_setOn(bool_isOn,bool_animated,)", "contents": "setOn(${1:bool_isOn},${2:bool_animated})" }
,
		{ "trigger": "CCControlSwitch_registerScriptAccelerateHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptAccelerateHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCControlSwitch_registerWithTouchDispatcher()", "contents": "registerWithTouchDispatcher()" }
,
		{ "trigger": "CCControlSwitch_getTouchMode()", "contents": "getTouchMode()" }
,
		{ "trigger": "CCControlSwitch_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCControlSwitch_setAccelerometerEnabled(bool_bValue,)", "contents": "setAccelerometerEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCControlSwitch_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCControlSwitch_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCControlSwitch_unregisterScriptTouchHandler()", "contents": "unregisterScriptTouchHandler()" }
,
		{ "trigger": "CCControlSwitch_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCControlSwitch_transform()", "contents": "transform()" }
,
		{ "trigger": "CCControlSwitch_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCControlSwitch_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCControlSwitch_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCControlSwitch_sendActionsForControlEvents(CCControlEvent_controlEvents,)", "contents": "sendActionsForControlEvents(${1:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlSwitch_unregisterScriptAccelerateHandler()", "contents": "unregisterScriptAccelerateHandler()" }
,
		{ "trigger": "CCControlSwitch_removeTargetWithActionForControlEvents(CCObject*_target,SEL_CCControlHandler_action,CCControlEvent_controlEvents,)", "contents": "removeTargetWithActionForControlEvents(${1:CCObject*_target},${2:SEL_CCControlHandler_action},${3:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlSwitch_initWithMaskSprite(CCSprite_*maskSprite,CCSprite_*_onSprite,CCSprite_*_offSprite,CCSprite_*_thumbSprite,CCLabelTTF*_onLabel,CCLabelTTF*_offLabel,)", "contents": "initWithMaskSprite(${1:CCSprite_*maskSprite},${2:CCSprite_*_onSprite},${3:CCSprite_*_offSprite},${4:CCSprite_*_thumbSprite},${5:CCLabelTTF*_onLabel},${6:CCLabelTTF*_offLabel})" }
,
		{ "trigger": "CCControlSwitch_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCControlSwitch_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCControlSwitch_registerScriptKeypadHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptKeypadHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCControlSwitch_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCControlSwitch_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCControlSwitch_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCControlSwitch_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCControlSwitch_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCControlSwitch_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCControlSwitch_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCControlSwitch_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCControlSwitch_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCControlSwitch_setKeypadEnabled(bool_bValue,)", "contents": "setKeypadEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCControlSwitch_isSelected()", "contents": "isSelected()" }
,
		{ "trigger": "CCControlSwitch_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCControlSwitch_setTouchPriority(int_priority,)", "contents": "setTouchPriority(${1:int_priority})" }
,
		{ "trigger": "CCControlSwitch_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCControlSwitch_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCControlSwitch_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCControlSwitch_addTargetWithActionForControlEvents(CCObject*_target,SEL_CCControlHandler_action,CCControlEvent_controlEvents,)", "contents": "addTargetWithActionForControlEvents(${1:CCObject*_target},${2:SEL_CCControlHandler_action},${3:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlSwitch_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCControlSwitch_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCControlSwitch_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCControlSwitch_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCControlSwitch_setSelected(bool_bSelected,)", "contents": "setSelected(${1:bool_bSelected})" }
,
		{ "trigger": "CCControlSwitch_setTouchEnabled(bool_bValue,)", "contents": "setTouchEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCControlSwitch_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCControlSwitch_init()", "contents": "init()" }
,
		{ "trigger": "CCControlSwitch_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCControlSwitch_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCControlSwitch_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCControlSwitch_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCControlSwitch_onExit()", "contents": "onExit()" }
,
		{ "trigger": "CCControlSwitch_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCControlSwitch_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCControlSwitch_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCControlSwitch_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "CCControlSwitch_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCControlSwitch_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCControlSwitch_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCControlSwitch_setEnabled(bool_bEnabled,)", "contents": "setEnabled(${1:bool_bEnabled})" }
,
		{ "trigger": "CCControlSwitch_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCControlSwitch_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCControlSwitch_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCControlSwitch_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCControlSwitch_retain()", "contents": "retain()" }
,
		{ "trigger": "CCControlSwitch_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCControlSwitch_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCControlSwitch_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCControlSwitch_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCControlSwitch_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCControlSwitch_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCControlSwitch_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCControlSwitch_unregisterScriptKeypadHandler()", "contents": "unregisterScriptKeypadHandler()" }
,
		{ "trigger": "CCControlSwitch_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCControlSwitch_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCControlSwitch_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCControlSwitch_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCControlSwitch_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCControlSwitch_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCControlSwitch_getTouchLocation(CCTouch*_touch,)", "contents": "getTouchLocation(${1:CCTouch*_touch})" }
,
		{ "trigger": "CCControlSwitch_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCControlSwitch_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCControlSwitch_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCControlSwitch_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCControlSwitch_isAccelerometerEnabled()", "contents": "isAccelerometerEnabled()" }
,
		{ "trigger": "CCControlSwitch_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCControlSwitch_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCControlSwitch_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCControlSwitch_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCControlSwitch_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCControlSwitch_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCControlSwitch_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCControlSwitch_isKeypadEnabled()", "contents": "isKeypadEnabled()" }
,
		{ "trigger": "CCControlSwitch_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCControlSwitch_hasVisibleParents()", "contents": "hasVisibleParents()" }
,
		{ "trigger": "CCControlSwitch_getState()", "contents": "getState()" }
,
		{ "trigger": "CCControlSwitch_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCControlSwitch_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCControlSwitch_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCControlSwitch_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCControlSwitch_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCControlSwitch_registerScriptTouchHandler(LUA_FUNCTION_nHandler,bool_bIsMultiTouches_=_false,int_nPriority_=_0,bool_bSwallowsTouches_=_false,)", "contents": "registerScriptTouchHandler(${1:LUA_FUNCTION_nHandler},${2:bool_bIsMultiTouches_=_false},${3:int_nPriority_=_0},${4:bool_bSwallowsTouches_=_false})" }
,
		{ "trigger": "CCControlSwitch_isTouchInside(CCTouch_*_touch,)", "contents": "isTouchInside(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCControlSwitch_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCControlSwitch_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCControlSwitch_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCControlSwitch_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCControlSwitch_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCControlSwitch_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCControlSwitch_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCControlSwitch_release()", "contents": "release()" }
,
		{ "trigger": "CCControlSwitch_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCControlSwitch_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCControlSwitch_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCControlSwitch_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCControlSwitch_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCControlSwitch_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCControlSwitch_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCControlSwitch_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCControlSwitch_setHighlighted(bool_bHighlighted,)", "contents": "setHighlighted(${1:bool_bHighlighted})" }
,
		{ "trigger": "CCControlSwitch_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCControlSwitch_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCControlSwitch_isOn()", "contents": "isOn()" }
,
		{ "trigger": "CCControlSwitch_needsLayout()", "contents": "needsLayout()" }
,
		{ "trigger": "CCControlSwitch_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCControlSwitch_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCControlSwitch_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCControlSwitch_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCControlSwitch_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCControlSwitch_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCControlSwitch_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCControlSwitch_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCControlSwitch_getTouchPriority()", "contents": "getTouchPriority()" }
,
		{ "trigger": "CCControlSwitch_copy()", "contents": "copy()" }
,
		{ "trigger": "CCControlSwitch_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCControlSwitch_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCControlSwitch_addHandleOfControlEvent(LUA_FUNCTION_nFunID,CCControlEvent_controlEvents,)", "contents": "addHandleOfControlEvent(${1:LUA_FUNCTION_nFunID},${2:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlSwitch_description()", "contents": "description()" }
,
		{ "trigger": "CCControlSwitch_setTouchMode(ccTouchesMode_mode,)", "contents": "setTouchMode(${1:ccTouchesMode_mode})" }
,
		{ "trigger": "CCControlSwitch_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCControlSwitch_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCControlSwitch_onEnter()", "contents": "onEnter()" }
,
		{ "trigger": "CCControlSwitch_create(CCSprite_*maskSprite,CCSprite_*_onSprite,CCSprite_*_offSprite,CCSprite_*_thumbSprite,)", "contents": "CCControlSwitch:create(${1:CCSprite_*maskSprite},${2:CCSprite_*_onSprite},${3:CCSprite_*_offSprite},${4:CCSprite_*_thumbSprite})" }
,
		{ "trigger": "CCControlSwitch_create(CCSprite_*maskSprite,CCSprite_*_onSprite,CCSprite_*_offSprite,CCSprite_*_thumbSprite,CCLabelTTF*_onLabel,CCLabelTTF*_offLabel,)", "contents": "CCControlSwitch:create(${1:CCSprite_*maskSprite},${2:CCSprite_*_onSprite},${3:CCSprite_*_offSprite},${4:CCSprite_*_thumbSprite},${5:CCLabelTTF*_onLabel},${6:CCLabelTTF*_offLabel})" }
,


		{ "trigger": "CCTransitionPageTurn_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTransitionPageTurn_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTransitionPageTurn_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTransitionPageTurn_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTransitionPageTurn_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTransitionPageTurn_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTransitionPageTurn_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTransitionPageTurn_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTransitionPageTurn_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCTransitionPageTurn_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCTransitionPageTurn_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionPageTurn_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTransitionPageTurn_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTransitionPageTurn_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionPageTurn_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionPageTurn_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTransitionPageTurn_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionPageTurn_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTransitionPageTurn_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCTransitionPageTurn_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionPageTurn_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTransitionPageTurn_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionPageTurn_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTransitionPageTurn_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionPageTurn_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTransitionPageTurn_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTransitionPageTurn_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCTransitionPageTurn_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTransitionPageTurn_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTransitionPageTurn_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTransitionPageTurn_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTransitionPageTurn_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTransitionPageTurn_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTransitionPageTurn_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionPageTurn_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTransitionPageTurn_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTransitionPageTurn_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionPageTurn_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTransitionPageTurn_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTransitionPageTurn_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTransitionPageTurn_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTransitionPageTurn_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionPageTurn_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionPageTurn_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionPageTurn_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTransitionPageTurn_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTransitionPageTurn_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTransitionPageTurn_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTransitionPageTurn_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTransitionPageTurn_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTransitionPageTurn_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTransitionPageTurn_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionPageTurn_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTransitionPageTurn_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTransitionPageTurn_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTransitionPageTurn_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTransitionPageTurn_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTransitionPageTurn_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTransitionPageTurn_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTransitionPageTurn_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTransitionPageTurn_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTransitionPageTurn_actionWithSize(CCSize_vector,)", "contents": "actionWithSize(${1:CCSize_vector})" }
,
		{ "trigger": "CCTransitionPageTurn_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionPageTurn_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTransitionPageTurn_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTransitionPageTurn_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTransitionPageTurn_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTransitionPageTurn_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTransitionPageTurn_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTransitionPageTurn_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTransitionPageTurn_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTransitionPageTurn_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionPageTurn_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTransitionPageTurn_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTransitionPageTurn_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTransitionPageTurn_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTransitionPageTurn_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionPageTurn_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTransitionPageTurn_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTransitionPageTurn_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTransitionPageTurn_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTransitionPageTurn_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTransitionPageTurn_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionPageTurn_release()", "contents": "release()" }
,
		{ "trigger": "CCTransitionPageTurn_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionPageTurn_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionPageTurn_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionPageTurn_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTransitionPageTurn_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTransitionPageTurn_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTransitionPageTurn_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCTransitionPageTurn_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTransitionPageTurn_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTransitionPageTurn_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTransitionPageTurn_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTransitionPageTurn_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionPageTurn_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTransitionPageTurn_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTransitionPageTurn_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTransitionPageTurn_description()", "contents": "description()" }
,
		{ "trigger": "CCTransitionPageTurn_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTransitionPageTurn_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTransitionPageTurn_create(float_t,CCScene*_scene,bool_backwards,)", "contents": "CCTransitionPageTurn:create(${1:float_t},${2:CCScene*_scene},${3:bool_backwards})" }
,

		{ "trigger": "CCAnimationCache_addAnimationsWithDictionary(CCDictionary*_dictionary,)", "contents": "addAnimationsWithDictionary(${1:CCDictionary*_dictionary})" }
,
		{ "trigger": "CCAnimationCache_copy()", "contents": "copy()" }
,
		{ "trigger": "CCAnimationCache_addAnimationsWithFile(const_char*_plist,)", "contents": "addAnimationsWithFile(${1:const_char*_plist})" }
,
		{ "trigger": "CCAnimationCache_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCAnimationCache_animationByName(const_char*_name,)", "contents": "animationByName(${1:const_char*_name})" }
,
		{ "trigger": "CCAnimationCache_removeAnimationByName(const_char*_name,)", "contents": "removeAnimationByName(${1:const_char*_name})" }
,
		{ "trigger": "CCAnimationCache_addAnimation(CCAnimation_*animation,const_char_*_name,)", "contents": "addAnimation(${1:CCAnimation_*animation},${2:const_char_*_name})" }
,
		{ "trigger": "CCAnimationCache_release()", "contents": "release()" }
,
		{ "trigger": "CCAnimationCache_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCAnimationCache_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCAnimationCache_retain()", "contents": "retain()" }
,
		{ "trigger": "CCAnimationCache_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCAnimationCache_purgeSharedAnimationCache()", "contents": "CCAnimationCache:purgeSharedAnimationCache()" }
,
		{ "trigger": "CCAnimationCache_sharedAnimationCache()", "contents": "CCAnimationCache:sharedAnimationCache()" }
,

		{ "trigger": "CCRepeatForever_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCRepeatForever_copy()", "contents": "copy()" }
,
		{ "trigger": "CCRepeatForever_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCRepeatForever_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCRepeatForever_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCRepeatForever_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCRepeatForever_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCRepeatForever_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCRepeatForever_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCRepeatForever_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCRepeatForever_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCRepeatForever_retain()", "contents": "retain()" }
,
		{ "trigger": "CCRepeatForever_release()", "contents": "release()" }
,
		{ "trigger": "CCRepeatForever_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCRepeatForever_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCRepeatForever_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCRepeatForever_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCRepeatForever_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCRepeatForever_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCRepeatForever_create(CCActionInterval_*pAction,)", "contents": "CCRepeatForever:create(${1:CCActionInterval_*pAction})" }
,

		{ "trigger": "CCLayerGradient_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCLayerGradient_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCLayerGradient_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCLayerGradient_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCLayerGradient_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCLayerGradient_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCLayerGradient_setStartOpacity(GLubyte_Value,)", "contents": "setStartOpacity(${1:GLubyte_Value})" }
,
		{ "trigger": "CCLayerGradient_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCLayerGradient_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCLayerGradient_init()", "contents": "init()" }
,
		{ "trigger": "CCLayerGradient_draw()", "contents": "draw()" }
,
		{ "trigger": "CCLayerGradient_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCLayerGradient_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCLayerGradient_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCLayerGradient_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCLayerGradient_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCLayerGradient_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCLayerGradient_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCLayerGradient_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLayerGradient_visit()", "contents": "visit()" }
,
		{ "trigger": "CCLayerGradient_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCLayerGradient_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCLayerGradient_registerScriptAccelerateHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptAccelerateHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCLayerGradient_getTouchMode()", "contents": "getTouchMode()" }
,
		{ "trigger": "CCLayerGradient_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLayerGradient_setEndOpacity(GLubyte_Value,)", "contents": "setEndOpacity(${1:GLubyte_Value})" }
,
		{ "trigger": "CCLayerGradient_setAccelerometerEnabled(bool_bValue,)", "contents": "setAccelerometerEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCLayerGradient_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCLayerGradient_isCompressedInterpolation()", "contents": "isCompressedInterpolation()" }
,
		{ "trigger": "CCLayerGradient_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCLayerGradient_changeWidth(GLfloat_w,)", "contents": "changeWidth(${1:GLfloat_w})" }
,
		{ "trigger": "CCLayerGradient_unregisterScriptTouchHandler()", "contents": "unregisterScriptTouchHandler()" }
,
		{ "trigger": "CCLayerGradient_setTouchPriority(int_priority,)", "contents": "setTouchPriority(${1:int_priority})" }
,
		{ "trigger": "CCLayerGradient_setEndColor(ccColor3B_Value,)", "contents": "setEndColor(${1:ccColor3B_Value})" }
,
		{ "trigger": "CCLayerGradient_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCLayerGradient_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLayerGradient_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCLayerGradient_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCLayerGradient_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCLayerGradient_registerScriptKeypadHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptKeypadHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCLayerGradient_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLayerGradient_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCLayerGradient_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCLayerGradient_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLayerGradient_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCLayerGradient_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCLayerGradient_getStartOpacity()", "contents": "getStartOpacity()" }
,
		{ "trigger": "CCLayerGradient_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCLayerGradient_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCLayerGradient_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCLayerGradient_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCLayerGradient_setKeypadEnabled(bool_bValue,)", "contents": "setKeypadEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCLayerGradient_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCLayerGradient_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCLayerGradient_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCLayerGradient_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCLayerGradient_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLayerGradient_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCLayerGradient_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCLayerGradient_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLayerGradient_setBlendFunc(ccBlendFunc_Value,)", "contents": "setBlendFunc(${1:ccBlendFunc_Value})" }
,
		{ "trigger": "CCLayerGradient_setTouchEnabled(bool_bValue,)", "contents": "setTouchEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCLayerGradient_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCLayerGradient_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCLayerGradient_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCLayerGradient_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCLayerGradient_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCLayerGradient_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCLayerGradient_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLayerGradient_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "CCLayerGradient_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLayerGradient_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLayerGradient_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCLayerGradient_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCLayerGradient_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCLayerGradient_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCLayerGradient_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCLayerGradient_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCLayerGradient_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCLayerGradient_retain()", "contents": "retain()" }
,
		{ "trigger": "CCLayerGradient_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLayerGradient_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCLayerGradient_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCLayerGradient_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCLayerGradient_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCLayerGradient_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCLayerGradient_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCLayerGradient_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCLayerGradient_unregisterScriptKeypadHandler()", "contents": "unregisterScriptKeypadHandler()" }
,
		{ "trigger": "CCLayerGradient_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCLayerGradient_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCLayerGradient_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCLayerGradient_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCLayerGradient_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCLayerGradient_setStartColor(ccColor3B_colors,)", "contents": "setStartColor(${1:ccColor3B_colors})" }
,
		{ "trigger": "CCLayerGradient_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCLayerGradient_setOpacity(GLubyte_var,)", "contents": "setOpacity(${1:GLubyte_var})" }
,
		{ "trigger": "CCLayerGradient_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCLayerGradient_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCLayerGradient_copy()", "contents": "copy()" }
,
		{ "trigger": "CCLayerGradient_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCLayerGradient_isAccelerometerEnabled()", "contents": "isAccelerometerEnabled()" }
,
		{ "trigger": "CCLayerGradient_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCLayerGradient_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCLayerGradient_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCLayerGradient_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCLayerGradient_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCLayerGradient_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCLayerGradient_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCLayerGradient_setCompressedInterpolation(bool_Value,)", "contents": "setCompressedInterpolation(${1:bool_Value})" }
,
		{ "trigger": "CCLayerGradient_isKeypadEnabled()", "contents": "isKeypadEnabled()" }
,
		{ "trigger": "CCLayerGradient_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCLayerGradient_changeHeight(GLfloat_h,)", "contents": "changeHeight(${1:GLfloat_h})" }
,
		{ "trigger": "CCLayerGradient_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCLayerGradient_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCLayerGradient_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCLayerGradient_transform()", "contents": "transform()" }
,
		{ "trigger": "CCLayerGradient_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLayerGradient_registerScriptTouchHandler(LUA_FUNCTION_nHandler,bool_bIsMultiTouches_=_false,int_nPriority_=_0,bool_bSwallowsTouches_=_false,)", "contents": "registerScriptTouchHandler(${1:LUA_FUNCTION_nHandler},${2:bool_bIsMultiTouches_=_false},${3:int_nPriority_=_0},${4:bool_bSwallowsTouches_=_false})" }
,
		{ "trigger": "CCLayerGradient_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCLayerGradient_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCLayerGradient_changeWidthAndHeight(GLfloat_w_,GLfloat_h,)", "contents": "changeWidthAndHeight(${1:GLfloat_w_},${2:GLfloat_h})" }
,
		{ "trigger": "CCLayerGradient_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCLayerGradient_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCLayerGradient_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCLayerGradient_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCLayerGradient_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLayerGradient_release()", "contents": "release()" }
,
		{ "trigger": "CCLayerGradient_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLayerGradient_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCLayerGradient_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLayerGradient_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCLayerGradient_getVector()", "contents": "getVector()" }
,
		{ "trigger": "CCLayerGradient_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCLayerGradient_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCLayerGradient_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCLayerGradient_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCLayerGradient_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCLayerGradient_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCLayerGradient_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCLayerGradient_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCLayerGradient_getEndOpacity()", "contents": "getEndOpacity()" }
,
		{ "trigger": "CCLayerGradient_unregisterScriptAccelerateHandler()", "contents": "unregisterScriptAccelerateHandler()" }
,
		{ "trigger": "CCLayerGradient_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCLayerGradient_setVector(CCPoint_Value,)", "contents": "setVector(${1:CCPoint_Value})" }
,
		{ "trigger": "CCLayerGradient_setColor(ccColor3B_Value,)", "contents": "setColor(${1:ccColor3B_Value})" }
,
		{ "trigger": "CCLayerGradient_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLayerGradient_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCLayerGradient_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCLayerGradient_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCLayerGradient_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCLayerGradient_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCLayerGradient_getTouchPriority()", "contents": "getTouchPriority()" }
,
		{ "trigger": "CCLayerGradient_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCLayerGradient_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCLayerGradient_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCLayerGradient_description()", "contents": "description()" }
,
		{ "trigger": "CCLayerGradient_setTouchMode(ccTouchesMode_mode,)", "contents": "setTouchMode(${1:ccTouchesMode_mode})" }
,
		{ "trigger": "CCLayerGradient_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCLayerGradient_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCLayerGradient_create(ccColor4B_start,ccColor4B_end,CCPoint_v,)", "contents": "CCLayerGradient:create(${1:ccColor4B_start},${2:ccColor4B_end},${3:CCPoint_v})" }
,
		{ "trigger": "CCLayerGradient_create(ccColor4B_start,ccColor4B_end,)", "contents": "CCLayerGradient:create(${1:ccColor4B_start},${2:ccColor4B_end})" }
,
		{ "trigger": "CCLayerGradient_create()", "contents": "CCLayerGradient:create()" }
,

		{ "trigger": "CCFadeIn_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCFadeIn_copy()", "contents": "copy()" }
,
		{ "trigger": "CCFadeIn_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCFadeIn_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCFadeIn_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCFadeIn_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCFadeIn_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCFadeIn_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCFadeIn_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCFadeIn_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCFadeIn_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCFadeIn_retain()", "contents": "retain()" }
,
		{ "trigger": "CCFadeIn_release()", "contents": "release()" }
,
		{ "trigger": "CCFadeIn_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCFadeIn_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCFadeIn_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCFadeIn_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCFadeIn_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCFadeIn_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCFadeIn_create(float_d,)", "contents": "CCFadeIn:create(${1:float_d})" }
,

		{ "trigger": "CCLayerMultiplex_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLayerMultiplex_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCLayerMultiplex_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCLayerMultiplex_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCLayerMultiplex_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCLayerMultiplex_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCLayerMultiplex_draw()", "contents": "draw()" }
,
		{ "trigger": "CCLayerMultiplex_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCLayerMultiplex_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCLayerMultiplex_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCLayerMultiplex_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCLayerMultiplex_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLayerMultiplex_visit()", "contents": "visit()" }
,
		{ "trigger": "CCLayerMultiplex_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCLayerMultiplex_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCLayerMultiplex_registerScriptAccelerateHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptAccelerateHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCLayerMultiplex_getTouchMode()", "contents": "getTouchMode()" }
,
		{ "trigger": "CCLayerMultiplex_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLayerMultiplex_setAccelerometerEnabled(bool_bValue,)", "contents": "setAccelerometerEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCLayerMultiplex_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCLayerMultiplex_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCLayerMultiplex_unregisterScriptTouchHandler()", "contents": "unregisterScriptTouchHandler()" }
,
		{ "trigger": "CCLayerMultiplex_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCLayerMultiplex_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCLayerMultiplex_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLayerMultiplex_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCLayerMultiplex_unregisterScriptAccelerateHandler()", "contents": "unregisterScriptAccelerateHandler()" }
,
		{ "trigger": "CCLayerMultiplex_addLayer(CCLayer*_layer,)", "contents": "addLayer(${1:CCLayer*_layer})" }
,
		{ "trigger": "CCLayerMultiplex_registerScriptKeypadHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptKeypadHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCLayerMultiplex_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLayerMultiplex_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCLayerMultiplex_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLayerMultiplex_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCLayerMultiplex_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCLayerMultiplex_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCLayerMultiplex_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCLayerMultiplex_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCLayerMultiplex_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCLayerMultiplex_setKeypadEnabled(bool_bValue,)", "contents": "setKeypadEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCLayerMultiplex_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCLayerMultiplex_setTouchPriority(int_priority,)", "contents": "setTouchPriority(${1:int_priority})" }
,
		{ "trigger": "CCLayerMultiplex_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCLayerMultiplex_getTouchPriority()", "contents": "getTouchPriority()" }
,
		{ "trigger": "CCLayerMultiplex_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCLayerMultiplex_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLayerMultiplex_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCLayerMultiplex_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCLayerMultiplex_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLayerMultiplex_setTouchEnabled(bool_bValue,)", "contents": "setTouchEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCLayerMultiplex_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCLayerMultiplex_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCLayerMultiplex_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCLayerMultiplex_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCLayerMultiplex_switchTo(unsigned_int_n,)", "contents": "switchTo(${1:unsigned_int_n})" }
,
		{ "trigger": "CCLayerMultiplex_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "CCLayerMultiplex_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLayerMultiplex_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLayerMultiplex_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCLayerMultiplex_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCLayerMultiplex_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCLayerMultiplex_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCLayerMultiplex_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCLayerMultiplex_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCLayerMultiplex_retain()", "contents": "retain()" }
,
		{ "trigger": "CCLayerMultiplex_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLayerMultiplex_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCLayerMultiplex_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCLayerMultiplex_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCLayerMultiplex_unregisterScriptKeypadHandler()", "contents": "unregisterScriptKeypadHandler()" }
,
		{ "trigger": "CCLayerMultiplex_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCLayerMultiplex_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCLayerMultiplex_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCLayerMultiplex_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCLayerMultiplex_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCLayerMultiplex_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCLayerMultiplex_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCLayerMultiplex_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCLayerMultiplex_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCLayerMultiplex_isAccelerometerEnabled()", "contents": "isAccelerometerEnabled()" }
,
		{ "trigger": "CCLayerMultiplex_switchToAndReleaseMe(unsigned_int_n,)", "contents": "switchToAndReleaseMe(${1:unsigned_int_n})" }
,
		{ "trigger": "CCLayerMultiplex_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCLayerMultiplex_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCLayerMultiplex_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCLayerMultiplex_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCLayerMultiplex_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCLayerMultiplex_isKeypadEnabled()", "contents": "isKeypadEnabled()" }
,
		{ "trigger": "CCLayerMultiplex_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCLayerMultiplex_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCLayerMultiplex_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCLayerMultiplex_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCLayerMultiplex_transform()", "contents": "transform()" }
,
		{ "trigger": "CCLayerMultiplex_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLayerMultiplex_registerScriptTouchHandler(LUA_FUNCTION_nHandler,bool_bIsMultiTouches_=_false,int_nPriority_=_0,bool_bSwallowsTouches_=_false,)", "contents": "registerScriptTouchHandler(${1:LUA_FUNCTION_nHandler},${2:bool_bIsMultiTouches_=_false},${3:int_nPriority_=_0},${4:bool_bSwallowsTouches_=_false})" }
,
		{ "trigger": "CCLayerMultiplex_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCLayerMultiplex_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCLayerMultiplex_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCLayerMultiplex_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCLayerMultiplex_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCLayerMultiplex_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLayerMultiplex_release()", "contents": "release()" }
,
		{ "trigger": "CCLayerMultiplex_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLayerMultiplex_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCLayerMultiplex_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLayerMultiplex_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCLayerMultiplex_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCLayerMultiplex_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCLayerMultiplex_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCLayerMultiplex_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCLayerMultiplex_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCLayerMultiplex_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCLayerMultiplex_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCLayerMultiplex_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLayerMultiplex_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCLayerMultiplex_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCLayerMultiplex_copy()", "contents": "copy()" }
,
		{ "trigger": "CCLayerMultiplex_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCLayerMultiplex_description()", "contents": "description()" }
,
		{ "trigger": "CCLayerMultiplex_setTouchMode(ccTouchesMode_mode,)", "contents": "setTouchMode(${1:ccTouchesMode_mode})" }
,
		{ "trigger": "CCLayerMultiplex_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCLayerMultiplex_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCLayerMultiplex_create()", "contents": "CCLayerMultiplex:create()" }
,
		{ "trigger": "CCLayerMultiplex_createWithLayer(CCLayer*_layer,)", "contents": "CCLayerMultiplex:createWithLayer(${1:CCLayer*_layer})" }
,
		{ "trigger": "CCLayerMultiplex_createWithArray(CCArray*_arrayOfLayers,)", "contents": "CCLayerMultiplex:createWithArray(${1:CCArray*_arrayOfLayers})" }
,

		{ "trigger": "CCTransitionProgressVertical_create(float_t,CCScene*_scene,)", "contents": "CCTransitionProgressVertical:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCFileUtils_fullPathForFilename(const_char_*pszFileName,)", "contents": "fullPathForFilename(${1:const_char_*pszFileName})" }
,
		{ "trigger": "CCFileUtils_setPopupNotify(bool_bNotify,)", "contents": "setPopupNotify(${1:bool_bNotify})" }
,
		{ "trigger": "CCFileUtils_loadFilenameLookupDictionaryFromFile(const_char*_filename,)", "contents": "loadFilenameLookupDictionaryFromFile(${1:const_char*_filename})" }
,
		{ "trigger": "CCFileUtils_addSearchPath(const_char*_path,)", "contents": "addSearchPath(${1:const_char*_path})" }
,
		{ "trigger": "CCFileUtils_fullPathFromRelativeFile(const_char_*pszFilename,const_char_*pszRelativeFile,)", "contents": "fullPathFromRelativeFile(${1:const_char_*pszFilename},${2:const_char_*pszRelativeFile})" }
,
		{ "trigger": "CCFileUtils_addSearchResolutionsOrder(const_char*_order,)", "contents": "addSearchResolutionsOrder(${1:const_char*_order})" }
,
		{ "trigger": "CCFileUtils_getWritablePath()", "contents": "getWritablePath()" }
,
		{ "trigger": "CCFileUtils_purgeCachedEntries()", "contents": "purgeCachedEntries()" }
,
		{ "trigger": "CCFileUtils_isPopupNotify()", "contents": "isPopupNotify()" }
,
		{ "trigger": "CCFileUtils_sharedFileUtils()", "contents": "CCFileUtils:sharedFileUtils()" }
,
		{ "trigger": "CCFileUtils_purgeFileUtils()", "contents": "CCFileUtils:purgeFileUtils()" }
,

		{ "trigger": "CCParticleSpiral_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleSpiral_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleSpiral_setStartSizeVar(float_size,)", "contents": "setStartSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleSpiral_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleSpiral_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleSpiral_getRadialAccelVar()", "contents": "getRadialAccelVar()" }
,
		{ "trigger": "CCParticleSpiral_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleSpiral_setStartRadiusVar(float_startRadiusVar,)", "contents": "setStartRadiusVar(${1:float_startRadiusVar})" }
,
		{ "trigger": "CCParticleSpiral_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleSpiral_setTexture(CCTexture2D*_var,)", "contents": "setTexture(${1:CCTexture2D*_var})" }
,
		{ "trigger": "CCParticleSpiral_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleSpiral_isAutoRemoveOnFinish()", "contents": "isAutoRemoveOnFinish()" }
,
		{ "trigger": "CCParticleSpiral_getTotalParticles()", "contents": "getTotalParticles()" }
,
		{ "trigger": "CCParticleSpiral_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleSpiral_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleSpiral_setPositionType(tCCPositionType_type,)", "contents": "setPositionType(${1:tCCPositionType_type})" }
,
		{ "trigger": "CCParticleSpiral_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCParticleSpiral_setDisplayFrame(CCSpriteFrame*_spriteFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame*_spriteFrame})" }
,
		{ "trigger": "CCParticleSpiral_getSourcePosition()", "contents": "getSourcePosition()" }
,
		{ "trigger": "CCParticleSpiral_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleSpiral_setBlendAdditive(bool_value,)", "contents": "setBlendAdditive(${1:bool_value})" }
,
		{ "trigger": "CCParticleSpiral_setGravity(const_CCPoint&_g,)", "contents": "setGravity(${1:const_CCPoint&_g})" }
,
		{ "trigger": "CCParticleSpiral_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSpiral_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleSpiral_stopSystem()", "contents": "stopSystem()" }
,
		{ "trigger": "CCParticleSpiral_setLifeVar(float_lifeVar,)", "contents": "setLifeVar(${1:float_lifeVar})" }
,
		{ "trigger": "CCParticleSpiral_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleSpiral_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleSpiral_setPosVar(CCPoint_pos,)", "contents": "setPosVar(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSpiral_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleSpiral_setEmissionRate(float_rate,)", "contents": "setEmissionRate(${1:float_rate})" }
,
		{ "trigger": "CCParticleSpiral_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCParticleSpiral_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleSpiral_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleSpiral_getEndColorVar()", "contents": "getEndColorVar()" }
,
		{ "trigger": "CCParticleSpiral_getEndSize()", "contents": "getEndSize()" }
,
		{ "trigger": "CCParticleSpiral_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleSpiral_setEndRadiusVar(float_endRadiusVar,)", "contents": "setEndRadiusVar(${1:float_endRadiusVar})" }
,
		{ "trigger": "CCParticleSpiral_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleSpiral_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleSpiral_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleSpiral_setEndColorVar(const_ccColor4F_var,)", "contents": "setEndColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSpiral_getEndSpin()", "contents": "getEndSpin()" }
,
		{ "trigger": "CCParticleSpiral_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleSpiral_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCParticleSpiral_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleSpiral_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCParticleSpiral_setDuration(float_d,)", "contents": "setDuration(${1:float_d})" }
,
		{ "trigger": "CCParticleSpiral_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleSpiral_setStartSpinVar(float_var,)", "contents": "setStartSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleSpiral_getEmitterMode()", "contents": "getEmitterMode()" }
,
		{ "trigger": "CCParticleSpiral_updateQuadWithParticle(tCCParticle*_particle,const_CCPoint&_newPosition,)", "contents": "updateQuadWithParticle(${1:tCCParticle*_particle},${2:const_CCPoint&_newPosition})" }
,
		{ "trigger": "CCParticleSpiral_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleSpiral_setSpeed(float_speed,)", "contents": "setSpeed(${1:float_speed})" }
,
		{ "trigger": "CCParticleSpiral_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleSpiral_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleSpiral_getGravity()", "contents": "getGravity()" }
,
		{ "trigger": "CCParticleSpiral_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleSpiral_setEndSpinVar(float_var,)", "contents": "setEndSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleSpiral_getAngle()", "contents": "getAngle()" }
,
		{ "trigger": "CCParticleSpiral_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleSpiral_setStartRadius(float_startRadius,)", "contents": "setStartRadius(${1:float_startRadius})" }
,
		{ "trigger": "CCParticleSpiral_getAngleVar()", "contents": "getAngleVar()" }
,
		{ "trigger": "CCParticleSpiral_setEmitterMode(int_mode,)", "contents": "setEmitterMode(${1:int_mode})" }
,
		{ "trigger": "CCParticleSpiral_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleSpiral_getTangentialAccel()", "contents": "getTangentialAccel()" }
,
		{ "trigger": "CCParticleSpiral_getRotatePerSecondVar()", "contents": "getRotatePerSecondVar()" }
,
		{ "trigger": "CCParticleSpiral_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleSpiral_getLifeVar()", "contents": "getLifeVar()" }
,
		{ "trigger": "CCParticleSpiral_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSpiral_setStartSpin(float_var,)", "contents": "setStartSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleSpiral_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleSpiral_getStartSize()", "contents": "getStartSize()" }
,
		{ "trigger": "CCParticleSpiral_getEndRadius()", "contents": "getEndRadius()" }
,
		{ "trigger": "CCParticleSpiral_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleSpiral_addParticle()", "contents": "addParticle()" }
,
		{ "trigger": "CCParticleSpiral_setBlendFunc(ccBlendFunc_var,)", "contents": "setBlendFunc(${1:ccBlendFunc_var})" }
,
		{ "trigger": "CCParticleSpiral_initParticle(tCCParticle*_particle,)", "contents": "initParticle(${1:tCCParticle*_particle})" }
,
		{ "trigger": "CCParticleSpiral_getTangentialAccelVar()", "contents": "getTangentialAccelVar()" }
,
		{ "trigger": "CCParticleSpiral_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleSpiral_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleSpiral_setAngle(float_angle,)", "contents": "setAngle(${1:float_angle})" }
,
		{ "trigger": "CCParticleSpiral_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleSpiral_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleSpiral_getEndRadiusVar()", "contents": "getEndRadiusVar()" }
,
		{ "trigger": "CCParticleSpiral_getStartSpin()", "contents": "getStartSpin()" }
,
		{ "trigger": "CCParticleSpiral_setSpeedVar(float_speed,)", "contents": "setSpeedVar(${1:float_speed})" }
,
		{ "trigger": "CCParticleSpiral_getLife()", "contents": "getLife()" }
,
		{ "trigger": "CCParticleSpiral_isBlendAdditive()", "contents": "isBlendAdditive()" }
,
		{ "trigger": "CCParticleSpiral_getParticleCount()", "contents": "getParticleCount()" }
,
		{ "trigger": "CCParticleSpiral_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleSpiral_getEndSpinVar()", "contents": "getEndSpinVar()" }
,
		{ "trigger": "CCParticleSpiral_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleSpiral_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleSpiral_setStartSize(float_size,)", "contents": "setStartSize(${1:float_size})" }
,
		{ "trigger": "CCParticleSpiral_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleSpiral_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSpiral_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleSpiral_getStartSpinVar()", "contents": "getStartSpinVar()" }
,
		{ "trigger": "CCParticleSpiral_setRadialAccelVar(float_t,)", "contents": "setRadialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleSpiral_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCParticleSpiral_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleSpiral_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleSpiral_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleSpiral_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleSpiral_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleSpiral_setTextureWithRect(CCTexture2D_*texture,const_CCRect&_rect,)", "contents": "setTextureWithRect(${1:CCTexture2D_*texture},${2:const_CCRect&_rect})" }
,
		{ "trigger": "CCParticleSpiral_setSourcePosition(CCPoint_pos,)", "contents": "setSourcePosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSpiral_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleSpiral_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleSpiral_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleSpiral_getRotatePerSecond()", "contents": "getRotatePerSecond()" }
,
		{ "trigger": "CCParticleSpiral_initWithTotalParticles(unsigned_int_number,)", "contents": "initWithTotalParticles(${1:unsigned_int_number})" }
,
		{ "trigger": "CCParticleSpiral_setBatchNode(CCParticleBatchNode*_node,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_node})" }
,
		{ "trigger": "CCParticleSpiral_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleSpiral_isActive()", "contents": "isActive()" }
,
		{ "trigger": "CCParticleSpiral_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleSpiral_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleSpiral_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleSpiral_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleSpiral_setEndSpin(float_var,)", "contents": "setEndSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleSpiral_resetSystem()", "contents": "resetSystem()" }
,
		{ "trigger": "CCParticleSpiral_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleSpiral_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleSpiral_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleSpiral_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleSpiral_getEndSizeVar()", "contents": "getEndSizeVar()" }
,
		{ "trigger": "CCParticleSpiral_setStartColorVar(const_ccColor4F_var,)", "contents": "setStartColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSpiral_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSpiral_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleSpiral_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleSpiral_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleSpiral_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleSpiral_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleSpiral_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleSpiral_setStartColor(const_ccColor4F_var,)", "contents": "setStartColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSpiral_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleSpiral_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleSpiral_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleSpiral_setAngleVar(float_angle,)", "contents": "setAngleVar(${1:float_angle})" }
,
		{ "trigger": "CCParticleSpiral_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleSpiral_setTexture(CCTexture2D*_texture,)", "contents": "setTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCParticleSpiral_setTangentialAccelVar(float_t,)", "contents": "setTangentialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleSpiral_setRotatePerSecond(float_degrees,)", "contents": "setRotatePerSecond(${1:float_degrees})" }
,
		{ "trigger": "CCParticleSpiral_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleSpiral_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleSpiral_setTotalParticles(unsigned_int_tp,)", "contents": "setTotalParticles(${1:unsigned_int_tp})" }
,
		{ "trigger": "CCParticleSpiral_getSpeedVar()", "contents": "getSpeedVar()" }
,
		{ "trigger": "CCParticleSpiral_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleSpiral_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleSpiral_getStartSizeVar()", "contents": "getStartSizeVar()" }
,
		{ "trigger": "CCParticleSpiral_setAutoRemoveOnFinish(bool_var,)", "contents": "setAutoRemoveOnFinish(${1:bool_var})" }
,
		{ "trigger": "CCParticleSpiral_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleSpiral_setTangentialAccel(float_t,)", "contents": "setTangentialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleSpiral_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleSpiral_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleSpiral_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleSpiral_setLife(float_life,)", "contents": "setLife(${1:float_life})" }
,
		{ "trigger": "CCParticleSpiral_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleSpiral_setEndColor(const_ccColor4F_var,)", "contents": "setEndColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSpiral_getRadialAccel()", "contents": "getRadialAccel()" }
,
		{ "trigger": "CCParticleSpiral_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleSpiral_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleSpiral_setRotatePerSecondVar(float_degrees,)", "contents": "setRotatePerSecondVar(${1:float_degrees})" }
,
		{ "trigger": "CCParticleSpiral_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleSpiral_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleSpiral_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCParticleSpiral_getStartRadiusVar()", "contents": "getStartRadiusVar()" }
,
		{ "trigger": "CCParticleSpiral_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleSpiral_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleSpiral_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleSpiral_setBatchNode(CCParticleBatchNode*_batchNode,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_batchNode})" }
,
		{ "trigger": "CCParticleSpiral_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleSpiral_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCParticleSpiral_getPosVar()", "contents": "getPosVar()" }
,
		{ "trigger": "CCParticleSpiral_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleSpiral_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "CCParticleSpiral_setEndSize(float_size,)", "contents": "setEndSize(${1:float_size})" }
,
		{ "trigger": "CCParticleSpiral_getEmissionRate()", "contents": "getEmissionRate()" }
,
		{ "trigger": "CCParticleSpiral_setRadialAccel(float_t,)", "contents": "setRadialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleSpiral_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleSpiral_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleSpiral_initWithFile(const_char*_plistFile,)", "contents": "initWithFile(${1:const_char*_plistFile})" }
,
		{ "trigger": "CCParticleSpiral_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleSpiral_setEndSizeVar(float_size,)", "contents": "setEndSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleSpiral_isFull()", "contents": "isFull()" }
,
		{ "trigger": "CCParticleSpiral_getStartRadius()", "contents": "getStartRadius()" }
,
		{ "trigger": "CCParticleSpiral_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleSpiral_setScale(float_s,)", "contents": "setScale(${1:float_s})" }
,
		{ "trigger": "CCParticleSpiral_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCParticleSpiral_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleSpiral_getStartColorVar()", "contents": "getStartColorVar()" }
,
		{ "trigger": "CCParticleSpiral_postStep()", "contents": "postStep()" }
,
		{ "trigger": "CCParticleSpiral_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleSpiral_setEndRadius(float_endRadius,)", "contents": "setEndRadius(${1:float_endRadius})" }
,
		{ "trigger": "CCParticleSpiral_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCParticleSpiral_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCParticleSpiral_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleSpiral_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleSpiral_create()", "contents": "CCParticleSpiral:create()" }
,

		{ "trigger": "CCScaleTo_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCScaleTo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCScaleTo_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCScaleTo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCScaleTo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCScaleTo_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCScaleTo_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCScaleTo_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCScaleTo_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCScaleTo_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCScaleTo_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCScaleTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCScaleTo_release()", "contents": "release()" }
,
		{ "trigger": "CCScaleTo_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCScaleTo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCScaleTo_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCScaleTo_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCScaleTo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCScaleTo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCScaleTo_create(float_duration,float_sx,float_sy,)", "contents": "CCScaleTo:create(${1:float_duration},${2:float_sx},${3:float_sy})" }
,
		{ "trigger": "CCScaleTo_create(float_duration,float_s,)", "contents": "CCScaleTo:create(${1:float_duration},${2:float_s})" }
,

		{ "trigger": "CCTileMapAtlas_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTileMapAtlas_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTileMapAtlas_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCTileMapAtlas_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCTileMapAtlas_getTextureAtlas()", "contents": "getTextureAtlas()" }
,
		{ "trigger": "CCTileMapAtlas_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTileMapAtlas_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTileMapAtlas_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTileMapAtlas_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCTileMapAtlas_init()", "contents": "init()" }
,
		{ "trigger": "CCTileMapAtlas_updateAtlasValues()", "contents": "updateAtlasValues()" }
,
		{ "trigger": "CCTileMapAtlas_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTileMapAtlas_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCTileMapAtlas_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTileMapAtlas_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTileMapAtlas_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCTileMapAtlas_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCTileMapAtlas_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCTileMapAtlas_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCTileMapAtlas_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTileMapAtlas_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTileMapAtlas_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTileMapAtlas_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTileMapAtlas_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTileMapAtlas_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCTileMapAtlas_setOpacityModifyRGB(bool_isOpacityModifyRGB,)", "contents": "setOpacityModifyRGB(${1:bool_isOpacityModifyRGB})" }
,
		{ "trigger": "CCTileMapAtlas_setQuadsToDraw(unsigned_int_quadsToDraw,)", "contents": "setQuadsToDraw(${1:unsigned_int_quadsToDraw})" }
,
		{ "trigger": "CCTileMapAtlas_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTileMapAtlas_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTileMapAtlas_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTileMapAtlas_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCTileMapAtlas_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTileMapAtlas_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTileMapAtlas_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCTileMapAtlas_releaseMap()", "contents": "releaseMap()" }
,
		{ "trigger": "CCTileMapAtlas_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTileMapAtlas_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTileMapAtlas_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTileMapAtlas_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTileMapAtlas_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTileMapAtlas_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCTileMapAtlas_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTileMapAtlas_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTileMapAtlas_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTileMapAtlas_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTileMapAtlas_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTileMapAtlas_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTileMapAtlas_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTileMapAtlas_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTileMapAtlas_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTileMapAtlas_getQuadsToDraw()", "contents": "getQuadsToDraw()" }
,
		{ "trigger": "CCTileMapAtlas_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTileMapAtlas_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCTileMapAtlas_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTileMapAtlas_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCTileMapAtlas_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCTileMapAtlas_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTileMapAtlas_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTileMapAtlas_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTileMapAtlas_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTileMapAtlas_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTileMapAtlas_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTileMapAtlas_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTileMapAtlas_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCTileMapAtlas_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTileMapAtlas_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTileMapAtlas_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTileMapAtlas_tileAt(const_CCPoint_&_pos,)", "contents": "tileAt(${1:const_CCPoint_&_pos})" }
,
		{ "trigger": "CCTileMapAtlas_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTileMapAtlas_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTileMapAtlas_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTileMapAtlas_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTileMapAtlas_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTileMapAtlas_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCTileMapAtlas_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTileMapAtlas_setColor(ccColor3B_color,)", "contents": "setColor(${1:ccColor3B_color})" }
,
		{ "trigger": "CCTileMapAtlas_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTileMapAtlas_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCTileMapAtlas_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCTileMapAtlas_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTileMapAtlas_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTileMapAtlas_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTileMapAtlas_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTileMapAtlas_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTileMapAtlas_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTileMapAtlas_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCTileMapAtlas_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTileMapAtlas_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTileMapAtlas_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTileMapAtlas_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTileMapAtlas_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTileMapAtlas_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTileMapAtlas_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTileMapAtlas_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTileMapAtlas_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCTileMapAtlas_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTileMapAtlas_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTileMapAtlas_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTileMapAtlas_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTileMapAtlas_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTileMapAtlas_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTileMapAtlas_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTileMapAtlas_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCTileMapAtlas_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTileMapAtlas_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTileMapAtlas_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTileMapAtlas_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTileMapAtlas_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTileMapAtlas_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTileMapAtlas_release()", "contents": "release()" }
,
		{ "trigger": "CCTileMapAtlas_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTileMapAtlas_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTileMapAtlas_setTexture(CCTexture2D_*texture,)", "contents": "setTexture(${1:CCTexture2D_*texture})" }
,
		{ "trigger": "CCTileMapAtlas_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTileMapAtlas_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTileMapAtlas_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTileMapAtlas_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTileMapAtlas_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCTileMapAtlas_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCTileMapAtlas_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTileMapAtlas_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTileMapAtlas_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCTileMapAtlas_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTileMapAtlas_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTileMapAtlas_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTileMapAtlas_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCTileMapAtlas_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTileMapAtlas_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCTileMapAtlas_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTileMapAtlas_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCTileMapAtlas_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTileMapAtlas_setTextureAtlas(CCTextureAtlas*_atlas,)", "contents": "setTextureAtlas(${1:CCTextureAtlas*_atlas})" }
,
		{ "trigger": "CCTileMapAtlas_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTileMapAtlas_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCTileMapAtlas_description()", "contents": "description()" }
,
		{ "trigger": "CCTileMapAtlas_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTileMapAtlas_setTile(ccColor3B_tile,CCPoint_position,)", "contents": "setTile(${1:ccColor3B_tile},${2:CCPoint_position})" }
,
		{ "trigger": "CCTileMapAtlas_create(const_char_*tile,const_char_*mapFile,int_tileWidth,int_tileHeight,)", "contents": "CCTileMapAtlas:create(${1:const_char_*tile},${2:const_char_*mapFile},${3:int_tileWidth},${4:int_tileHeight})" }
,

		{ "trigger": "CCPointArray_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCPointArray_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCPointArray_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCPointArray_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCPointArray_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCPointArray_addControlPoint(CCPoint_controlPoint,)", "contents": "addControlPoint(${1:CCPoint_controlPoint})" }
,
		{ "trigger": "CCPointArray_draw()", "contents": "draw()" }
,
		{ "trigger": "CCPointArray_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCPointArray_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCPointArray_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCPointArray_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCPointArray_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCPointArray_visit()", "contents": "visit()" }
,
		{ "trigger": "CCPointArray_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCPointArray_setControlPoints(std::vector<CCPoint*>_*controlPoints,)", "contents": "setControlPoints(${1:std::vector<CCPoint*>_*controlPoints})" }
,
		{ "trigger": "CCPointArray_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCPointArray_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCPointArray_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCPointArray_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCPointArray_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCPointArray_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCPointArray_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCPointArray_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCPointArray_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCPointArray_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCPointArray_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCPointArray_removeControlPointAtIndex(unsigned_int_index,)", "contents": "removeControlPointAtIndex(${1:unsigned_int_index})" }
,
		{ "trigger": "CCPointArray_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCPointArray_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCPointArray_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCPointArray_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCPointArray_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCPointArray_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCPointArray_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCPointArray_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCPointArray_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCPointArray_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCPointArray_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCPointArray_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCPointArray_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCPointArray_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCPointArray_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCPointArray_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCPointArray_getControlPointAtIndex(unsigned_int_index,)", "contents": "getControlPointAtIndex(${1:unsigned_int_index})" }
,
		{ "trigger": "CCPointArray_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCPointArray_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCPointArray_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCPointArray_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCPointArray_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCPointArray_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCPointArray_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCPointArray_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCPointArray_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCPointArray_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCPointArray_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCPointArray_retain()", "contents": "retain()" }
,
		{ "trigger": "CCPointArray_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCPointArray_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCPointArray_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCPointArray_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCPointArray_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCPointArray_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCPointArray_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCPointArray_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCPointArray_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCPointArray_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCPointArray_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCPointArray_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCPointArray_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCPointArray_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCPointArray_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCPointArray_count()", "contents": "count()" }
,
		{ "trigger": "CCPointArray_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCPointArray_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCPointArray_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCPointArray_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCPointArray_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCPointArray_insertControlPoint(CCPoint_&controlPoint,unsigned_int_index,)", "contents": "insertControlPoint(${1:CCPoint_&controlPoint},${2:unsigned_int_index})" }
,
		{ "trigger": "CCPointArray_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCPointArray_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCPointArray_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCPointArray_transform()", "contents": "transform()" }
,
		{ "trigger": "CCPointArray_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCPointArray_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCPointArray_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCPointArray_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCPointArray_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCPointArray_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCPointArray_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCPointArray_release()", "contents": "release()" }
,
		{ "trigger": "CCPointArray_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCPointArray_initWithCapacity(unsigned_int_capacity,)", "contents": "initWithCapacity(${1:unsigned_int_capacity})" }
,
		{ "trigger": "CCPointArray_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCPointArray_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCPointArray_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCPointArray_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCPointArray_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCPointArray_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCPointArray_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCPointArray_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCPointArray_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCPointArray_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCPointArray_replaceControlPoint(CCPoint_&controlPoint,unsigned_int_index,)", "contents": "replaceControlPoint(${1:CCPoint_&controlPoint},${2:unsigned_int_index})" }
,
		{ "trigger": "CCPointArray_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCPointArray_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCPointArray_copy()", "contents": "copy()" }
,
		{ "trigger": "CCPointArray_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCPointArray_reverseInline()", "contents": "reverseInline()" }
,
		{ "trigger": "CCPointArray_description()", "contents": "description()" }
,
		{ "trigger": "CCPointArray_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCPointArray_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCPointArray_create(unsigned_int_capacity,)", "contents": "CCPointArray:create(${1:unsigned_int_capacity})" }
,

		{ "trigger": "CCParticleFlower_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleFlower_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleFlower_setStartSizeVar(float_size,)", "contents": "setStartSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleFlower_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleFlower_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleFlower_getRadialAccelVar()", "contents": "getRadialAccelVar()" }
,
		{ "trigger": "CCParticleFlower_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleFlower_setStartRadiusVar(float_startRadiusVar,)", "contents": "setStartRadiusVar(${1:float_startRadiusVar})" }
,
		{ "trigger": "CCParticleFlower_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleFlower_setTexture(CCTexture2D*_var,)", "contents": "setTexture(${1:CCTexture2D*_var})" }
,
		{ "trigger": "CCParticleFlower_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleFlower_isAutoRemoveOnFinish()", "contents": "isAutoRemoveOnFinish()" }
,
		{ "trigger": "CCParticleFlower_getTotalParticles()", "contents": "getTotalParticles()" }
,
		{ "trigger": "CCParticleFlower_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleFlower_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleFlower_setPositionType(tCCPositionType_type,)", "contents": "setPositionType(${1:tCCPositionType_type})" }
,
		{ "trigger": "CCParticleFlower_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCParticleFlower_setDisplayFrame(CCSpriteFrame*_spriteFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame*_spriteFrame})" }
,
		{ "trigger": "CCParticleFlower_getSourcePosition()", "contents": "getSourcePosition()" }
,
		{ "trigger": "CCParticleFlower_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleFlower_setBlendAdditive(bool_value,)", "contents": "setBlendAdditive(${1:bool_value})" }
,
		{ "trigger": "CCParticleFlower_setGravity(const_CCPoint&_g,)", "contents": "setGravity(${1:const_CCPoint&_g})" }
,
		{ "trigger": "CCParticleFlower_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleFlower_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleFlower_stopSystem()", "contents": "stopSystem()" }
,
		{ "trigger": "CCParticleFlower_setLifeVar(float_lifeVar,)", "contents": "setLifeVar(${1:float_lifeVar})" }
,
		{ "trigger": "CCParticleFlower_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleFlower_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleFlower_setPosVar(CCPoint_pos,)", "contents": "setPosVar(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleFlower_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleFlower_setEmissionRate(float_rate,)", "contents": "setEmissionRate(${1:float_rate})" }
,
		{ "trigger": "CCParticleFlower_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCParticleFlower_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleFlower_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleFlower_getEndColorVar()", "contents": "getEndColorVar()" }
,
		{ "trigger": "CCParticleFlower_getEndSize()", "contents": "getEndSize()" }
,
		{ "trigger": "CCParticleFlower_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleFlower_setEndRadiusVar(float_endRadiusVar,)", "contents": "setEndRadiusVar(${1:float_endRadiusVar})" }
,
		{ "trigger": "CCParticleFlower_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleFlower_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleFlower_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleFlower_setEndColorVar(const_ccColor4F_var,)", "contents": "setEndColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleFlower_getEndSpin()", "contents": "getEndSpin()" }
,
		{ "trigger": "CCParticleFlower_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleFlower_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCParticleFlower_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleFlower_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCParticleFlower_setDuration(float_d,)", "contents": "setDuration(${1:float_d})" }
,
		{ "trigger": "CCParticleFlower_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleFlower_setStartSpinVar(float_var,)", "contents": "setStartSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleFlower_getEmitterMode()", "contents": "getEmitterMode()" }
,
		{ "trigger": "CCParticleFlower_updateQuadWithParticle(tCCParticle*_particle,const_CCPoint&_newPosition,)", "contents": "updateQuadWithParticle(${1:tCCParticle*_particle},${2:const_CCPoint&_newPosition})" }
,
		{ "trigger": "CCParticleFlower_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleFlower_setSpeed(float_speed,)", "contents": "setSpeed(${1:float_speed})" }
,
		{ "trigger": "CCParticleFlower_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleFlower_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleFlower_getGravity()", "contents": "getGravity()" }
,
		{ "trigger": "CCParticleFlower_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleFlower_setEndSpinVar(float_var,)", "contents": "setEndSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleFlower_getAngle()", "contents": "getAngle()" }
,
		{ "trigger": "CCParticleFlower_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleFlower_setStartRadius(float_startRadius,)", "contents": "setStartRadius(${1:float_startRadius})" }
,
		{ "trigger": "CCParticleFlower_getAngleVar()", "contents": "getAngleVar()" }
,
		{ "trigger": "CCParticleFlower_setEmitterMode(int_mode,)", "contents": "setEmitterMode(${1:int_mode})" }
,
		{ "trigger": "CCParticleFlower_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleFlower_getTangentialAccel()", "contents": "getTangentialAccel()" }
,
		{ "trigger": "CCParticleFlower_getRotatePerSecondVar()", "contents": "getRotatePerSecondVar()" }
,
		{ "trigger": "CCParticleFlower_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleFlower_getLifeVar()", "contents": "getLifeVar()" }
,
		{ "trigger": "CCParticleFlower_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleFlower_setStartSpin(float_var,)", "contents": "setStartSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleFlower_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleFlower_getStartSize()", "contents": "getStartSize()" }
,
		{ "trigger": "CCParticleFlower_getEndRadius()", "contents": "getEndRadius()" }
,
		{ "trigger": "CCParticleFlower_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleFlower_addParticle()", "contents": "addParticle()" }
,
		{ "trigger": "CCParticleFlower_setBlendFunc(ccBlendFunc_var,)", "contents": "setBlendFunc(${1:ccBlendFunc_var})" }
,
		{ "trigger": "CCParticleFlower_initParticle(tCCParticle*_particle,)", "contents": "initParticle(${1:tCCParticle*_particle})" }
,
		{ "trigger": "CCParticleFlower_getTangentialAccelVar()", "contents": "getTangentialAccelVar()" }
,
		{ "trigger": "CCParticleFlower_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleFlower_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleFlower_setAngle(float_angle,)", "contents": "setAngle(${1:float_angle})" }
,
		{ "trigger": "CCParticleFlower_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleFlower_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleFlower_getEndRadiusVar()", "contents": "getEndRadiusVar()" }
,
		{ "trigger": "CCParticleFlower_getStartSpin()", "contents": "getStartSpin()" }
,
		{ "trigger": "CCParticleFlower_setSpeedVar(float_speed,)", "contents": "setSpeedVar(${1:float_speed})" }
,
		{ "trigger": "CCParticleFlower_getLife()", "contents": "getLife()" }
,
		{ "trigger": "CCParticleFlower_isBlendAdditive()", "contents": "isBlendAdditive()" }
,
		{ "trigger": "CCParticleFlower_getParticleCount()", "contents": "getParticleCount()" }
,
		{ "trigger": "CCParticleFlower_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleFlower_getEndSpinVar()", "contents": "getEndSpinVar()" }
,
		{ "trigger": "CCParticleFlower_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleFlower_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleFlower_setStartSize(float_size,)", "contents": "setStartSize(${1:float_size})" }
,
		{ "trigger": "CCParticleFlower_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleFlower_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleFlower_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleFlower_getStartSpinVar()", "contents": "getStartSpinVar()" }
,
		{ "trigger": "CCParticleFlower_setRadialAccelVar(float_t,)", "contents": "setRadialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleFlower_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCParticleFlower_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleFlower_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleFlower_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleFlower_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleFlower_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleFlower_setTextureWithRect(CCTexture2D_*texture,const_CCRect&_rect,)", "contents": "setTextureWithRect(${1:CCTexture2D_*texture},${2:const_CCRect&_rect})" }
,
		{ "trigger": "CCParticleFlower_setSourcePosition(CCPoint_pos,)", "contents": "setSourcePosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleFlower_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleFlower_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleFlower_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleFlower_getRotatePerSecond()", "contents": "getRotatePerSecond()" }
,
		{ "trigger": "CCParticleFlower_initWithTotalParticles(unsigned_int_number,)", "contents": "initWithTotalParticles(${1:unsigned_int_number})" }
,
		{ "trigger": "CCParticleFlower_setBatchNode(CCParticleBatchNode*_node,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_node})" }
,
		{ "trigger": "CCParticleFlower_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleFlower_isActive()", "contents": "isActive()" }
,
		{ "trigger": "CCParticleFlower_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleFlower_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleFlower_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleFlower_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleFlower_setEndSpin(float_var,)", "contents": "setEndSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleFlower_resetSystem()", "contents": "resetSystem()" }
,
		{ "trigger": "CCParticleFlower_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleFlower_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleFlower_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleFlower_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleFlower_getEndSizeVar()", "contents": "getEndSizeVar()" }
,
		{ "trigger": "CCParticleFlower_setStartColorVar(const_ccColor4F_var,)", "contents": "setStartColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleFlower_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleFlower_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleFlower_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleFlower_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleFlower_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleFlower_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleFlower_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleFlower_setStartColor(const_ccColor4F_var,)", "contents": "setStartColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleFlower_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleFlower_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleFlower_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleFlower_setAngleVar(float_angle,)", "contents": "setAngleVar(${1:float_angle})" }
,
		{ "trigger": "CCParticleFlower_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleFlower_setTexture(CCTexture2D*_texture,)", "contents": "setTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCParticleFlower_setTangentialAccelVar(float_t,)", "contents": "setTangentialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleFlower_setRotatePerSecond(float_degrees,)", "contents": "setRotatePerSecond(${1:float_degrees})" }
,
		{ "trigger": "CCParticleFlower_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleFlower_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleFlower_setTotalParticles(unsigned_int_tp,)", "contents": "setTotalParticles(${1:unsigned_int_tp})" }
,
		{ "trigger": "CCParticleFlower_getSpeedVar()", "contents": "getSpeedVar()" }
,
		{ "trigger": "CCParticleFlower_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleFlower_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleFlower_getStartSizeVar()", "contents": "getStartSizeVar()" }
,
		{ "trigger": "CCParticleFlower_setAutoRemoveOnFinish(bool_var,)", "contents": "setAutoRemoveOnFinish(${1:bool_var})" }
,
		{ "trigger": "CCParticleFlower_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleFlower_setTangentialAccel(float_t,)", "contents": "setTangentialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleFlower_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleFlower_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleFlower_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleFlower_setLife(float_life,)", "contents": "setLife(${1:float_life})" }
,
		{ "trigger": "CCParticleFlower_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleFlower_setEndColor(const_ccColor4F_var,)", "contents": "setEndColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleFlower_getRadialAccel()", "contents": "getRadialAccel()" }
,
		{ "trigger": "CCParticleFlower_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleFlower_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleFlower_setRotatePerSecondVar(float_degrees,)", "contents": "setRotatePerSecondVar(${1:float_degrees})" }
,
		{ "trigger": "CCParticleFlower_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleFlower_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleFlower_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCParticleFlower_getStartRadiusVar()", "contents": "getStartRadiusVar()" }
,
		{ "trigger": "CCParticleFlower_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleFlower_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleFlower_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleFlower_setBatchNode(CCParticleBatchNode*_batchNode,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_batchNode})" }
,
		{ "trigger": "CCParticleFlower_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleFlower_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCParticleFlower_getPosVar()", "contents": "getPosVar()" }
,
		{ "trigger": "CCParticleFlower_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleFlower_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "CCParticleFlower_setEndSize(float_size,)", "contents": "setEndSize(${1:float_size})" }
,
		{ "trigger": "CCParticleFlower_getEmissionRate()", "contents": "getEmissionRate()" }
,
		{ "trigger": "CCParticleFlower_setRadialAccel(float_t,)", "contents": "setRadialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleFlower_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleFlower_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleFlower_initWithFile(const_char*_plistFile,)", "contents": "initWithFile(${1:const_char*_plistFile})" }
,
		{ "trigger": "CCParticleFlower_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleFlower_setEndSizeVar(float_size,)", "contents": "setEndSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleFlower_isFull()", "contents": "isFull()" }
,
		{ "trigger": "CCParticleFlower_getStartRadius()", "contents": "getStartRadius()" }
,
		{ "trigger": "CCParticleFlower_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleFlower_setScale(float_s,)", "contents": "setScale(${1:float_s})" }
,
		{ "trigger": "CCParticleFlower_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCParticleFlower_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleFlower_getStartColorVar()", "contents": "getStartColorVar()" }
,
		{ "trigger": "CCParticleFlower_postStep()", "contents": "postStep()" }
,
		{ "trigger": "CCParticleFlower_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleFlower_setEndRadius(float_endRadius,)", "contents": "setEndRadius(${1:float_endRadius})" }
,
		{ "trigger": "CCParticleFlower_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCParticleFlower_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCParticleFlower_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleFlower_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleFlower_create()", "contents": "CCParticleFlower:create()" }
,

		{ "trigger": "CCFadeOutTRTiles_turnOffTile(CCPoint_pos,)", "contents": "turnOffTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutTRTiles_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCFadeOutTRTiles_originalTile(CCPoint_pos,)", "contents": "originalTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutTRTiles_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCFadeOutTRTiles_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCFadeOutTRTiles_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCFadeOutTRTiles_release()", "contents": "release()" }
,
		{ "trigger": "CCFadeOutTRTiles_setTile(CCPoint_pos,ccQuad3_coords,)", "contents": "setTile(${1:CCPoint_pos},${2:ccQuad3_coords})" }
,
		{ "trigger": "CCFadeOutTRTiles_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCFadeOutTRTiles_retain()", "contents": "retain()" }
,
		{ "trigger": "CCFadeOutTRTiles_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCFadeOutTRTiles_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCFadeOutTRTiles_tile(CCPoint_pos,)", "contents": "tile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutTRTiles_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCFadeOutTRTiles_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCFadeOutTRTiles_transformTile(CCPoint_pos,float_distance,)", "contents": "transformTile(${1:CCPoint_pos},${2:float_distance})" }
,
		{ "trigger": "CCFadeOutTRTiles_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCFadeOutTRTiles_copy()", "contents": "copy()" }
,
		{ "trigger": "CCFadeOutTRTiles_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCFadeOutTRTiles_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCFadeOutTRTiles_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCFadeOutTRTiles_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCFadeOutTRTiles_turnOnTile(CCPoint_pos,)", "contents": "turnOnTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutTRTiles_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCFadeOutTRTiles_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCFadeOutTRTiles_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCFadeOutTRTiles_create(float_duration,CCSize_gridSize,)", "contents": "CCFadeOutTRTiles:create(${1:float_duration},${2:CCSize_gridSize})" }
,

		{ "trigger": "MGNCommon_registerLoginScriptEvent(LUA_FUNCTION_handle,)", "contents": "registerLoginScriptEvent(${1:LUA_FUNCTION_handle})" }
,
		{ "trigger": "MGNCommon_addPush(string_title,string_content,int_delalt,int_key,int_repeatTime,)", "contents": "addPush(${1:string_title},${2:string_content},${3:int_delalt},${4:int_key},${5:int_repeatTime})" }
,
		{ "trigger": "MGNCommon_getUDID()", "contents": "getUDID()" }
,
		{ "trigger": "MGNCommon_antiAddictionQuery(string_userId,)", "contents": "antiAddictionQuery(${1:string_userId})" }
,
		{ "trigger": "MGNCommon_registerantiAddictionQueryEvent(LUA_FUNCTION_handle,)", "contents": "registerantiAddictionQueryEvent(${1:LUA_FUNCTION_handle})" }
,
		{ "trigger": "MGNCommon_loginSDK()", "contents": "loginSDK()" }
,
		{ "trigger": "MGNCommon_setGameFPS(double_value,)", "contents": "setGameFPS(${1:double_value})" }
,
		{ "trigger": "MGNCommon_openUrl(string_url,)", "contents": "openUrl(${1:string_url})" }
,
		{ "trigger": "MGNCommon_getOSVersion()", "contents": "getOSVersion()" }
,
		{ "trigger": "MGNCommon_isLoginedSDK()", "contents": "isLoginedSDK()" }
,
		{ "trigger": "MGNCommon_getMODEL()", "contents": "getMODEL()" }
,
		{ "trigger": "MGNCommon_registerCancelLoginEvent(LUA_FUNCTION_handle,)", "contents": "registerCancelLoginEvent(${1:LUA_FUNCTION_handle})" }
,
		{ "trigger": "MGNCommon_SubmitUserInfo(std::string_service,std::string_role,std::string_grade,std::string_serviceId,std::string_roleId,)", "contents": "SubmitUserInfo(${1:std::string_service},${2:std::string_role},${3:std::string_grade},${4:std::string_serviceId},${5:std::string_roleId})" }
,
		{ "trigger": "MGNCommon_getInstance()", "contents": "MGNCommon:getInstance()" }
,

		{ "trigger": "CCParticleSystem_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleSystem_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleSystem_setStartSizeVar(float_size,)", "contents": "setStartSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleSystem_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleSystem_getEndSize()", "contents": "getEndSize()" }
,
		{ "trigger": "CCParticleSystem_getRadialAccelVar()", "contents": "getRadialAccelVar()" }
,
		{ "trigger": "CCParticleSystem_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleSystem_setStartRadiusVar(float_startRadiusVar,)", "contents": "setStartRadiusVar(${1:float_startRadiusVar})" }
,
		{ "trigger": "CCParticleSystem_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleSystem_setTexture(CCTexture2D*_var,)", "contents": "setTexture(${1:CCTexture2D*_var})" }
,
		{ "trigger": "CCParticleSystem_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleSystem_isAutoRemoveOnFinish()", "contents": "isAutoRemoveOnFinish()" }
,
		{ "trigger": "CCParticleSystem_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleSystem_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleSystem_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleSystem_setPositionType(tCCPositionType_type,)", "contents": "setPositionType(${1:tCCPositionType_type})" }
,
		{ "trigger": "CCParticleSystem_isActive()", "contents": "isActive()" }
,
		{ "trigger": "CCParticleSystem_getSourcePosition()", "contents": "getSourcePosition()" }
,
		{ "trigger": "CCParticleSystem_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCParticleSystem_getAngle()", "contents": "getAngle()" }
,
		{ "trigger": "CCParticleSystem_setGravity(const_CCPoint&_g,)", "contents": "setGravity(${1:const_CCPoint&_g})" }
,
		{ "trigger": "CCParticleSystem_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSystem_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleSystem_stopSystem()", "contents": "stopSystem()" }
,
		{ "trigger": "CCParticleSystem_setLifeVar(float_lifeVar,)", "contents": "setLifeVar(${1:float_lifeVar})" }
,
		{ "trigger": "CCParticleSystem_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleSystem_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleSystem_setPosVar(CCPoint_pos,)", "contents": "setPosVar(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSystem_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleSystem_setEmissionRate(float_rate,)", "contents": "setEmissionRate(${1:float_rate})" }
,
		{ "trigger": "CCParticleSystem_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCParticleSystem_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleSystem_getAngleVar()", "contents": "getAngleVar()" }
,
		{ "trigger": "CCParticleSystem_getEndColorVar()", "contents": "getEndColorVar()" }
,
		{ "trigger": "CCParticleSystem_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleSystem_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleSystem_setEndRadiusVar(float_endRadiusVar,)", "contents": "setEndRadiusVar(${1:float_endRadiusVar})" }
,
		{ "trigger": "CCParticleSystem_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleSystem_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleSystem_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleSystem_setEndColorVar(const_ccColor4F_var,)", "contents": "setEndColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSystem_getEndSpin()", "contents": "getEndSpin()" }
,
		{ "trigger": "CCParticleSystem_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleSystem_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCParticleSystem_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleSystem_setBlendAdditive(bool_value,)", "contents": "setBlendAdditive(${1:bool_value})" }
,
		{ "trigger": "CCParticleSystem_setDuration(float_d,)", "contents": "setDuration(${1:float_d})" }
,
		{ "trigger": "CCParticleSystem_setEndSpin(float_var,)", "contents": "setEndSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleSystem_setStartSpinVar(float_var,)", "contents": "setStartSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleSystem_getEmitterMode()", "contents": "getEmitterMode()" }
,
		{ "trigger": "CCParticleSystem_updateQuadWithParticle(tCCParticle*_particle,const_CCPoint&_newPosition,)", "contents": "updateQuadWithParticle(${1:tCCParticle*_particle},${2:const_CCPoint&_newPosition})" }
,
		{ "trigger": "CCParticleSystem_setScale(float_s,)", "contents": "setScale(${1:float_s})" }
,
		{ "trigger": "CCParticleSystem_setSpeed(float_speed,)", "contents": "setSpeed(${1:float_speed})" }
,
		{ "trigger": "CCParticleSystem_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleSystem_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleSystem_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleSystem_getGravity()", "contents": "getGravity()" }
,
		{ "trigger": "CCParticleSystem_getTotalParticles()", "contents": "getTotalParticles()" }
,
		{ "trigger": "CCParticleSystem_setEndSpinVar(float_var,)", "contents": "setEndSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleSystem_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCParticleSystem_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleSystem_setStartRadius(float_startRadius,)", "contents": "setStartRadius(${1:float_startRadius})" }
,
		{ "trigger": "CCParticleSystem_getSpeedVar()", "contents": "getSpeedVar()" }
,
		{ "trigger": "CCParticleSystem_setEmitterMode(int_mode,)", "contents": "setEmitterMode(${1:int_mode})" }
,
		{ "trigger": "CCParticleSystem_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleSystem_getTangentialAccel()", "contents": "getTangentialAccel()" }
,
		{ "trigger": "CCParticleSystem_getRotatePerSecondVar()", "contents": "getRotatePerSecondVar()" }
,
		{ "trigger": "CCParticleSystem_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleSystem_getLifeVar()", "contents": "getLifeVar()" }
,
		{ "trigger": "CCParticleSystem_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSystem_setStartSpin(float_var,)", "contents": "setStartSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleSystem_getStartSize()", "contents": "getStartSize()" }
,
		{ "trigger": "CCParticleSystem_getEndRadius()", "contents": "getEndRadius()" }
,
		{ "trigger": "CCParticleSystem_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleSystem_addParticle()", "contents": "addParticle()" }
,
		{ "trigger": "CCParticleSystem_setBlendFunc(ccBlendFunc_var,)", "contents": "setBlendFunc(${1:ccBlendFunc_var})" }
,
		{ "trigger": "CCParticleSystem_initParticle(tCCParticle*_particle,)", "contents": "initParticle(${1:tCCParticle*_particle})" }
,
		{ "trigger": "CCParticleSystem_getTangentialAccelVar()", "contents": "getTangentialAccelVar()" }
,
		{ "trigger": "CCParticleSystem_getEndSpinVar()", "contents": "getEndSpinVar()" }
,
		{ "trigger": "CCParticleSystem_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleSystem_setAngle(float_angle,)", "contents": "setAngle(${1:float_angle})" }
,
		{ "trigger": "CCParticleSystem_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleSystem_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleSystem_getEndRadiusVar()", "contents": "getEndRadiusVar()" }
,
		{ "trigger": "CCParticleSystem_getStartSpin()", "contents": "getStartSpin()" }
,
		{ "trigger": "CCParticleSystem_setSpeedVar(float_speed,)", "contents": "setSpeedVar(${1:float_speed})" }
,
		{ "trigger": "CCParticleSystem_getLife()", "contents": "getLife()" }
,
		{ "trigger": "CCParticleSystem_isBlendAdditive()", "contents": "isBlendAdditive()" }
,
		{ "trigger": "CCParticleSystem_getParticleCount()", "contents": "getParticleCount()" }
,
		{ "trigger": "CCParticleSystem_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleSystem_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleSystem_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleSystem_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleSystem_setStartSize(float_size,)", "contents": "setStartSize(${1:float_size})" }
,
		{ "trigger": "CCParticleSystem_setEndRadius(float_endRadius,)", "contents": "setEndRadius(${1:float_endRadius})" }
,
		{ "trigger": "CCParticleSystem_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSystem_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleSystem_getStartSpinVar()", "contents": "getStartSpinVar()" }
,
		{ "trigger": "CCParticleSystem_setRadialAccelVar(float_t,)", "contents": "setRadialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleSystem_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleSystem_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleSystem_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleSystem_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleSystem_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleSystem_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleSystem_setSourcePosition(CCPoint_pos,)", "contents": "setSourcePosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSystem_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleSystem_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleSystem_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleSystem_getRotatePerSecond()", "contents": "getRotatePerSecond()" }
,
		{ "trigger": "CCParticleSystem_initWithTotalParticles(unsigned_int_number,)", "contents": "initWithTotalParticles(${1:unsigned_int_number})" }
,
		{ "trigger": "CCParticleSystem_setBatchNode(CCParticleBatchNode*_node,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_node})" }
,
		{ "trigger": "CCParticleSystem_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleSystem_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCParticleSystem_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleSystem_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleSystem_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleSystem_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleSystem_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleSystem_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleSystem_resetSystem()", "contents": "resetSystem()" }
,
		{ "trigger": "CCParticleSystem_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleSystem_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleSystem_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleSystem_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleSystem_getEndSizeVar()", "contents": "getEndSizeVar()" }
,
		{ "trigger": "CCParticleSystem_setStartColorVar(const_ccColor4F_var,)", "contents": "setStartColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSystem_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSystem_setEndSizeVar(float_size,)", "contents": "setEndSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleSystem_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleSystem_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleSystem_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleSystem_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleSystem_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleSystem_setStartColor(const_ccColor4F_var,)", "contents": "setStartColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSystem_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleSystem_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleSystem_initWithFile(const_char*_plistFile,)", "contents": "initWithFile(${1:const_char*_plistFile})" }
,
		{ "trigger": "CCParticleSystem_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleSystem_setAngleVar(float_angle,)", "contents": "setAngleVar(${1:float_angle})" }
,
		{ "trigger": "CCParticleSystem_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleSystem_setTangentialAccelVar(float_t,)", "contents": "setTangentialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleSystem_setRotatePerSecond(float_degrees,)", "contents": "setRotatePerSecond(${1:float_degrees})" }
,
		{ "trigger": "CCParticleSystem_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleSystem_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleSystem_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleSystem_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleSystem_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleSystem_getStartSizeVar()", "contents": "getStartSizeVar()" }
,
		{ "trigger": "CCParticleSystem_setAutoRemoveOnFinish(bool_var,)", "contents": "setAutoRemoveOnFinish(${1:bool_var})" }
,
		{ "trigger": "CCParticleSystem_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleSystem_setTangentialAccel(float_t,)", "contents": "setTangentialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleSystem_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleSystem_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleSystem_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleSystem_setLife(float_life,)", "contents": "setLife(${1:float_life})" }
,
		{ "trigger": "CCParticleSystem_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleSystem_setEndColor(const_ccColor4F_var,)", "contents": "setEndColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSystem_getRadialAccel()", "contents": "getRadialAccel()" }
,
		{ "trigger": "CCParticleSystem_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleSystem_getStartRadiusVar()", "contents": "getStartRadiusVar()" }
,
		{ "trigger": "CCParticleSystem_setRotatePerSecondVar(float_degrees,)", "contents": "setRotatePerSecondVar(${1:float_degrees})" }
,
		{ "trigger": "CCParticleSystem_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleSystem_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleSystem_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCParticleSystem_getStartRadius()", "contents": "getStartRadius()" }
,
		{ "trigger": "CCParticleSystem_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleSystem_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleSystem_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleSystem_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleSystem_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleSystem_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCParticleSystem_getPosVar()", "contents": "getPosVar()" }
,
		{ "trigger": "CCParticleSystem_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleSystem_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "CCParticleSystem_setEndSize(float_size,)", "contents": "setEndSize(${1:float_size})" }
,
		{ "trigger": "CCParticleSystem_getEmissionRate()", "contents": "getEmissionRate()" }
,
		{ "trigger": "CCParticleSystem_setRadialAccel(float_t,)", "contents": "setRadialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleSystem_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleSystem_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleSystem_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleSystem_isFull()", "contents": "isFull()" }
,
		{ "trigger": "CCParticleSystem_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleSystem_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleSystem_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCParticleSystem_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleSystem_getStartColorVar()", "contents": "getStartColorVar()" }
,
		{ "trigger": "CCParticleSystem_postStep()", "contents": "postStep()" }
,
		{ "trigger": "CCParticleSystem_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleSystem_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleSystem_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCParticleSystem_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCParticleSystem_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleSystem_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleSystem_create(const_char_*plistFile,)", "contents": "CCParticleSystem:create(${1:const_char_*plistFile})" }
,

		{ "trigger": "TextField_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "TextField_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "TextField_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "TextField_update(float_dt,)", "contents": "update(${1:float_dt})" }
,
		{ "trigger": "TextField_getBottomInParent()", "contents": "getBottomInParent()" }
,
		{ "trigger": "TextField_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "TextField_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "TextField_getVirtualRenderer()", "contents": "getVirtualRenderer()" }
,
		{ "trigger": "TextField_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "TextField_executeScriptEvent(int_eventName,)", "contents": "executeScriptEvent(${1:int_eventName})" }
,
		{ "trigger": "TextField_draw()", "contents": "draw()" }
,
		{ "trigger": "TextField_attachWithIME()", "contents": "attachWithIME()" }
,
		{ "trigger": "TextField_isBright()", "contents": "isBright()" }
,
		{ "trigger": "TextField_getTag()", "contents": "getTag()" }
,
		{ "trigger": "TextField_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "TextField_ignoreContentAdaptWithSize(bool_ignore,)", "contents": "ignoreContentAdaptWithSize(${1:bool_ignore})" }
,
		{ "trigger": "TextField_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "TextField_getDeleteBackward()", "contents": "getDeleteBackward()" }
,
		{ "trigger": "TextField_getTouchStartPos()", "contents": "getTouchStartPos()" }
,
		{ "trigger": "TextField_isMaxLengthEnabled()", "contents": "isMaxLengthEnabled()" }
,
		{ "trigger": "TextField_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "TextField_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "TextField_getLayoutSize()", "contents": "getLayoutSize()" }
,
		{ "trigger": "TextField_setDeleteBackward(bool_deleteBackward,)", "contents": "setDeleteBackward(${1:bool_deleteBackward})" }
,
		{ "trigger": "TextField_visit()", "contents": "visit()" }
,
		{ "trigger": "TextField_getTopInParent()", "contents": "getTopInParent()" }
,
		{ "trigger": "TextField_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "TextField_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "TextField_didNotSelectSelf()", "contents": "didNotSelectSelf()" }
,
		{ "trigger": "TextField_setAttachWithIME(bool_attach,)", "contents": "setAttachWithIME(${1:bool_attach})" }
,
		{ "trigger": "TextField_getTouchSize()", "contents": "getTouchSize()" }
,
		{ "trigger": "TextField_getNodeByTag(int_tag,)", "contents": "getNodeByTag(${1:int_tag})" }
,
		{ "trigger": "TextField_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "TextField_getPositionPercent()", "contents": "getPositionPercent()" }
,
		{ "trigger": "TextField_setPosition(const_CCPoint_&pos,)", "contents": "setPosition(${1:const_CCPoint_&pos})" }
,
		{ "trigger": "TextField_setFlipY(bool_flipY,)", "contents": "setFlipY(${1:bool_flipY})" }
,
		{ "trigger": "TextField_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "TextField_setSize(const_CCSize_&size,)", "contents": "setSize(${1:const_CCSize_&size})" }
,
		{ "trigger": "TextField_clone()", "contents": "clone()" }
,
		{ "trigger": "TextField_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "TextField_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "TextField_getTouchEndPos()", "contents": "getTouchEndPos()" }
,
		{ "trigger": "TextField_onTouchEnded(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchEnded(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "TextField_onTouchMoved(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchMoved(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "TextField_getInsertText()", "contents": "getInsertText()" }
,
		{ "trigger": "TextField_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "TextField_setFlipX(bool_flipX,)", "contents": "setFlipX(${1:bool_flipX})" }
,
		{ "trigger": "TextField_setTouchEnabled(bool_enabled,)", "contents": "setTouchEnabled(${1:bool_enabled})" }
,
		{ "trigger": "TextField_setTouchEnable(bool_enabled,bool_containChildren_=_false,)", "contents": "setTouchEnable(${1:bool_enabled},${2:bool_containChildren_=_false})" }
,
		{ "trigger": "TextField_setMaxLength(int_length,)", "contents": "setMaxLength(${1:int_length})" }
,
		{ "trigger": "TextField_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "TextField_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "TextField_getAttachWithIME()", "contents": "getAttachWithIME()" }
,
		{ "trigger": "TextField_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "TextField_removeAllNodes()", "contents": "removeAllNodes()" }
,
		{ "trigger": "TextField_getLayoutParameter(LayoutParameterType_type,)", "contents": "getLayoutParameter(${1:LayoutParameterType_type})" }
,
		{ "trigger": "TextField_getFontName()", "contents": "getFontName()" }
,
		{ "trigger": "TextField_getChildByName(const_char*_name,)", "contents": "getChildByName(${1:const_char*_name})" }
,
		{ "trigger": "TextField_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "TextField_onTouchBegan(const_CCPoint_&touchPoint,)", "contents": "onTouchBegan(${1:const_CCPoint_&touchPoint})" }
,
		{ "trigger": "TextField_setAnchorPoint(const_CCPoint_&pt,)", "contents": "setAnchorPoint(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "TextField_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "TextField_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "TextField_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "TextField_setSizeType(SizeType_type,)", "contents": "setSizeType(${1:SizeType_type})" }
,
		{ "trigger": "TextField_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "TextField_isPasswordEnabled()", "contents": "isPasswordEnabled()" }
,
		{ "trigger": "TextField_getDescription()", "contents": "getDescription()" }
,
		{ "trigger": "TextField_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "TextField_getRect()", "contents": "getRect()" }
,
		{ "trigger": "TextField_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "TextField_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "TextField_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "TextField_disable()", "contents": "disable()" }
,
		{ "trigger": "TextField_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "TextField_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "TextField_getName()", "contents": "getName()" }
,
		{ "trigger": "TextField_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "TextField_setTextVerticalAlignment(CCVerticalTextAlignment_alignment,)", "contents": "setTextVerticalAlignment(${1:CCVerticalTextAlignment_alignment})" }
,
		{ "trigger": "TextField_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "TextField_addNode(CCNode_*_node,int_zOrder,)", "contents": "addNode(${1:CCNode_*_node},${2:int_zOrder})" }
,
		{ "trigger": "TextField_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "TextField_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "TextField_setDetachWithIME(bool_detach,)", "contents": "setDetachWithIME(${1:bool_detach})" }
,
		{ "trigger": "TextField_getNodes()", "contents": "getNodes()" }
,
		{ "trigger": "TextField_setSizePercent(const_CCPoint_&percent,)", "contents": "setSizePercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "TextField_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "TextField_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "TextField_setPlaceHolder(const_std::string&_value,)", "contents": "setPlaceHolder(${1:const_std::string&_value})" }
,
		{ "trigger": "TextField_addNode(CCNode*_node,)", "contents": "addNode(${1:CCNode*_node})" }
,
		{ "trigger": "TextField_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "TextField_getTouchMovePos()", "contents": "getTouchMovePos()" }
,
		{ "trigger": "TextField_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "TextField_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "TextField_setBright(bool_bright,)", "contents": "setBright(${1:bool_bright})" }
,
		{ "trigger": "TextField_active()", "contents": "active()" }
,
		{ "trigger": "TextField_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "TextField_removeChild(CCNode*_child,)", "contents": "removeChild(${1:CCNode*_child})" }
,
		{ "trigger": "TextField_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "TextField_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "TextField_removeAllChildren()", "contents": "removeAllChildren()" }
,
		{ "trigger": "TextField_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "TextField_setMaxLengthEnabled(bool_enable,)", "contents": "setMaxLengthEnabled(${1:bool_enable})" }
,
		{ "trigger": "TextField_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "TextField_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "TextField_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "TextField_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "TextField_setFocused(bool_fucosed,)", "contents": "setFocused(${1:bool_fucosed})" }
,
		{ "trigger": "TextField_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "TextField_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "TextField_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "TextField_setFontName(const_std::string&_name,)", "contents": "setFontName(${1:const_std::string&_name})" }
,
		{ "trigger": "TextField_isFlipY()", "contents": "isFlipY()" }
,
		{ "trigger": "TextField_setBrightStyle(BrightStyle_style,)", "contents": "setBrightStyle(${1:BrightStyle_style})" }
,
		{ "trigger": "TextField_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "TextField_setFontSize(int_size,)", "contents": "setFontSize(${1:int_size})" }
,
		{ "trigger": "TextField_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "TextField_retain()", "contents": "retain()" }
,
		{ "trigger": "TextField_getDetachWithIME()", "contents": "getDetachWithIME()" }
,
		{ "trigger": "TextField_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "TextField_updateSizeAndPosition(const_CCSize&_parentSize,)", "contents": "updateSizeAndPosition(${1:const_CCSize&_parentSize})" }
,
		{ "trigger": "TextField_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "TextField_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "TextField_setLayoutParameter(LayoutParameter*_parameter,)", "contents": "setLayoutParameter(${1:LayoutParameter*_parameter})" }
,
		{ "trigger": "TextField_getFontSize()", "contents": "getFontSize()" }
,
		{ "trigger": "TextField_getColor()", "contents": "getColor()" }
,
		{ "trigger": "TextField_transform()", "contents": "transform()" }
,
		{ "trigger": "TextField_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "TextField_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "TextField_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "TextField_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "TextField_setTextHorizontalAlignment(CCTextAlignment_alignment,)", "contents": "setTextHorizontalAlignment(${1:CCTextAlignment_alignment})" }
,
		{ "trigger": "TextField_hitTest(const_CCPoint_&pt,)", "contents": "hitTest(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "TextField_setPasswordStyleText(const_char*_styleText,)", "contents": "setPasswordStyleText(${1:const_char*_styleText})" }
,
		{ "trigger": "TextField_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "TextField_isFlipX()", "contents": "isFlipX()" }
,
		{ "trigger": "TextField_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "TextField_removeNodeByTag(int_tag,)", "contents": "removeNodeByTag(${1:int_tag})" }
,
		{ "trigger": "TextField_setPositionPercent(const_CCPoint_&percent,)", "contents": "setPositionPercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "TextField_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "TextField_getSize()", "contents": "getSize()" }
,
		{ "trigger": "TextField_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "TextField_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "TextField_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "TextField_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "TextField_setTextAreaSize(const_CCSize_&size,)", "contents": "setTextAreaSize(${1:const_CCSize_&size})" }
,
		{ "trigger": "TextField_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "TextField_setText(const_std::string&_text,)", "contents": "setText(${1:const_std::string&_text})" }
,
		{ "trigger": "TextField_setInsertText(bool_insertText,)", "contents": "setInsertText(${1:bool_insertText})" }
,
		{ "trigger": "TextField_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "TextField_onTouchBegan(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchBegan(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "TextField_setTouchAreaEnabled(bool_enable,)", "contents": "setTouchAreaEnabled(${1:bool_enable})" }
,
		{ "trigger": "TextField_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "TextField_clippingParentAreaContainPoint(const_CCPoint_&pt,)", "contents": "clippingParentAreaContainPoint(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "TextField_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "TextField_sortAllChildren()", "contents": "sortAllChildren()" }
,
		{ "trigger": "TextField_getSizePercent()", "contents": "getSizePercent()" }
,
		{ "trigger": "TextField_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "TextField_updateSizeAndPosition()", "contents": "updateSizeAndPosition()" }
,
		{ "trigger": "TextField_getWidgetByTag(int_tag,)", "contents": "getWidgetByTag(${1:int_tag})" }
,
		{ "trigger": "TextField_getParent()", "contents": "getParent()" }
,
		{ "trigger": "TextField_setName(const_char*_name,)", "contents": "setName(${1:const_char*_name})" }
,
		{ "trigger": "TextField_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "TextField_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "TextField_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "TextField_isFocused()", "contents": "isFocused()" }
,
		{ "trigger": "TextField_setSoundEff(std::string_eff,)", "contents": "setSoundEff(${1:std::string_eff})" }
,
		{ "trigger": "TextField_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "TextField_visit()", "contents": "visit()" }
,
		{ "trigger": "TextField_getMaxLength()", "contents": "getMaxLength()" }
,
		{ "trigger": "TextField_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "TextField_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "TextField_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "TextField_addNode(CCNode*_node,int_zOrder,int_tag,)", "contents": "addNode(${1:CCNode*_node},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "TextField_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "TextField_setPasswordEnabled(bool_enable,)", "contents": "setPasswordEnabled(${1:bool_enable})" }
,
		{ "trigger": "TextField_getActionTag()", "contents": "getActionTag()" }
,
		{ "trigger": "TextField_release()", "contents": "release()" }
,
		{ "trigger": "TextField_setActionTag(int_tag,)", "contents": "setActionTag(${1:int_tag})" }
,
		{ "trigger": "TextField_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "TextField_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "TextField_checkChildInfo(int_handleState,Widget*_sender,const_CCPoint_&touchPoint,)", "contents": "checkChildInfo(${1:int_handleState},${2:Widget*_sender},${3:const_CCPoint_&touchPoint})" }
,
		{ "trigger": "TextField_removeFromParent()", "contents": "removeFromParent()" }
,
		{ "trigger": "TextField_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "TextField_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "TextField_getStringValue()", "contents": "getStringValue()" }
,
		{ "trigger": "TextField_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "TextField_isIgnoreContentAdaptWithSize()", "contents": "isIgnoreContentAdaptWithSize()" }
,
		{ "trigger": "TextField_getLeftInParent()", "contents": "getLeftInParent()" }
,
		{ "trigger": "TextField_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "TextField_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "TextField_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "TextField_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "TextField_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "TextField_getScale()", "contents": "getScale()" }
,
		{ "trigger": "TextField_setTouchSize(const_CCSize_&size,)", "contents": "setTouchSize(${1:const_CCSize_&size})" }
,
		{ "trigger": "TextField_getRightInParent()", "contents": "getRightInParent()" }
,
		{ "trigger": "TextField_getPlaceHolder()", "contents": "getPlaceHolder()" }
,
		{ "trigger": "TextField_removeNode(CCNode*_node,)", "contents": "removeNode(${1:CCNode*_node})" }
,
		{ "trigger": "TextField_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "TextField_onExit()", "contents": "onExit()" }
,
		{ "trigger": "TextField_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "TextField_getWorldPosition()", "contents": "getWorldPosition()" }
,
		{ "trigger": "TextField_copy()", "contents": "copy()" }
,
		{ "trigger": "TextField_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "TextField_setPositionType(PositionType_type,)", "contents": "setPositionType(${1:PositionType_type})" }
,
		{ "trigger": "TextField_onTouchCancelled(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchCancelled(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "TextField_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "TextField_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "TextField_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "TextField_description()", "contents": "description()" }
,
		{ "trigger": "TextField_getPasswordStyleText()", "contents": "getPasswordStyleText()" }
,
		{ "trigger": "TextField_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "TextField_getWidgetType()", "contents": "getWidgetType()" }
,
		{ "trigger": "TextField_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "TextField_getSizeType()", "contents": "getSizeType()" }
,
		{ "trigger": "TextField_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "TextField_onEnter()", "contents": "onEnter()" }
,
		{ "trigger": "TextField_getCustomSize()", "contents": "getCustomSize()" }
,
		{ "trigger": "TextField_addChild(CCNode*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "TextField_create()", "contents": "TextField:create()" }
,

		{ "trigger": "CCTransitionShrinkGrow_create(float_t,CCScene*_scene,)", "contents": "CCTransitionShrinkGrow:create(${1:float_t},${2:CCScene*_scene})" }
,


		{ "trigger": "CCParticleRain_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleRain_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleRain_setStartSizeVar(float_size,)", "contents": "setStartSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleRain_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleRain_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleRain_getRadialAccelVar()", "contents": "getRadialAccelVar()" }
,
		{ "trigger": "CCParticleRain_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleRain_setStartRadiusVar(float_startRadiusVar,)", "contents": "setStartRadiusVar(${1:float_startRadiusVar})" }
,
		{ "trigger": "CCParticleRain_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleRain_setTexture(CCTexture2D*_var,)", "contents": "setTexture(${1:CCTexture2D*_var})" }
,
		{ "trigger": "CCParticleRain_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleRain_isAutoRemoveOnFinish()", "contents": "isAutoRemoveOnFinish()" }
,
		{ "trigger": "CCParticleRain_getTotalParticles()", "contents": "getTotalParticles()" }
,
		{ "trigger": "CCParticleRain_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleRain_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleRain_setPositionType(tCCPositionType_type,)", "contents": "setPositionType(${1:tCCPositionType_type})" }
,
		{ "trigger": "CCParticleRain_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCParticleRain_setDisplayFrame(CCSpriteFrame*_spriteFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame*_spriteFrame})" }
,
		{ "trigger": "CCParticleRain_getSourcePosition()", "contents": "getSourcePosition()" }
,
		{ "trigger": "CCParticleRain_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleRain_setBlendAdditive(bool_value,)", "contents": "setBlendAdditive(${1:bool_value})" }
,
		{ "trigger": "CCParticleRain_setGravity(const_CCPoint&_g,)", "contents": "setGravity(${1:const_CCPoint&_g})" }
,
		{ "trigger": "CCParticleRain_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleRain_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleRain_stopSystem()", "contents": "stopSystem()" }
,
		{ "trigger": "CCParticleRain_setLifeVar(float_lifeVar,)", "contents": "setLifeVar(${1:float_lifeVar})" }
,
		{ "trigger": "CCParticleRain_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleRain_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleRain_setPosVar(CCPoint_pos,)", "contents": "setPosVar(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleRain_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleRain_setEmissionRate(float_rate,)", "contents": "setEmissionRate(${1:float_rate})" }
,
		{ "trigger": "CCParticleRain_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCParticleRain_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleRain_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleRain_getEndColorVar()", "contents": "getEndColorVar()" }
,
		{ "trigger": "CCParticleRain_getEndSize()", "contents": "getEndSize()" }
,
		{ "trigger": "CCParticleRain_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleRain_setEndRadiusVar(float_endRadiusVar,)", "contents": "setEndRadiusVar(${1:float_endRadiusVar})" }
,
		{ "trigger": "CCParticleRain_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleRain_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleRain_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleRain_setEndColorVar(const_ccColor4F_var,)", "contents": "setEndColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleRain_getEndSpin()", "contents": "getEndSpin()" }
,
		{ "trigger": "CCParticleRain_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleRain_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCParticleRain_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleRain_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCParticleRain_setDuration(float_d,)", "contents": "setDuration(${1:float_d})" }
,
		{ "trigger": "CCParticleRain_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleRain_setStartSpinVar(float_var,)", "contents": "setStartSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleRain_getEmitterMode()", "contents": "getEmitterMode()" }
,
		{ "trigger": "CCParticleRain_updateQuadWithParticle(tCCParticle*_particle,const_CCPoint&_newPosition,)", "contents": "updateQuadWithParticle(${1:tCCParticle*_particle},${2:const_CCPoint&_newPosition})" }
,
		{ "trigger": "CCParticleRain_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleRain_setSpeed(float_speed,)", "contents": "setSpeed(${1:float_speed})" }
,
		{ "trigger": "CCParticleRain_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleRain_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleRain_getGravity()", "contents": "getGravity()" }
,
		{ "trigger": "CCParticleRain_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleRain_setEndSpinVar(float_var,)", "contents": "setEndSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleRain_getAngle()", "contents": "getAngle()" }
,
		{ "trigger": "CCParticleRain_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleRain_setStartRadius(float_startRadius,)", "contents": "setStartRadius(${1:float_startRadius})" }
,
		{ "trigger": "CCParticleRain_getAngleVar()", "contents": "getAngleVar()" }
,
		{ "trigger": "CCParticleRain_setEmitterMode(int_mode,)", "contents": "setEmitterMode(${1:int_mode})" }
,
		{ "trigger": "CCParticleRain_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleRain_getTangentialAccel()", "contents": "getTangentialAccel()" }
,
		{ "trigger": "CCParticleRain_getRotatePerSecondVar()", "contents": "getRotatePerSecondVar()" }
,
		{ "trigger": "CCParticleRain_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleRain_getLifeVar()", "contents": "getLifeVar()" }
,
		{ "trigger": "CCParticleRain_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleRain_setStartSpin(float_var,)", "contents": "setStartSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleRain_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleRain_getStartSize()", "contents": "getStartSize()" }
,
		{ "trigger": "CCParticleRain_getEndRadius()", "contents": "getEndRadius()" }
,
		{ "trigger": "CCParticleRain_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleRain_addParticle()", "contents": "addParticle()" }
,
		{ "trigger": "CCParticleRain_setBlendFunc(ccBlendFunc_var,)", "contents": "setBlendFunc(${1:ccBlendFunc_var})" }
,
		{ "trigger": "CCParticleRain_initParticle(tCCParticle*_particle,)", "contents": "initParticle(${1:tCCParticle*_particle})" }
,
		{ "trigger": "CCParticleRain_getTangentialAccelVar()", "contents": "getTangentialAccelVar()" }
,
		{ "trigger": "CCParticleRain_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleRain_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleRain_setAngle(float_angle,)", "contents": "setAngle(${1:float_angle})" }
,
		{ "trigger": "CCParticleRain_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleRain_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleRain_getEndRadiusVar()", "contents": "getEndRadiusVar()" }
,
		{ "trigger": "CCParticleRain_getStartSpin()", "contents": "getStartSpin()" }
,
		{ "trigger": "CCParticleRain_setSpeedVar(float_speed,)", "contents": "setSpeedVar(${1:float_speed})" }
,
		{ "trigger": "CCParticleRain_getLife()", "contents": "getLife()" }
,
		{ "trigger": "CCParticleRain_isBlendAdditive()", "contents": "isBlendAdditive()" }
,
		{ "trigger": "CCParticleRain_getParticleCount()", "contents": "getParticleCount()" }
,
		{ "trigger": "CCParticleRain_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleRain_getEndSpinVar()", "contents": "getEndSpinVar()" }
,
		{ "trigger": "CCParticleRain_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleRain_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleRain_setStartSize(float_size,)", "contents": "setStartSize(${1:float_size})" }
,
		{ "trigger": "CCParticleRain_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleRain_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleRain_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleRain_getStartSpinVar()", "contents": "getStartSpinVar()" }
,
		{ "trigger": "CCParticleRain_setRadialAccelVar(float_t,)", "contents": "setRadialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleRain_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCParticleRain_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleRain_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleRain_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleRain_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleRain_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleRain_setTextureWithRect(CCTexture2D_*texture,const_CCRect&_rect,)", "contents": "setTextureWithRect(${1:CCTexture2D_*texture},${2:const_CCRect&_rect})" }
,
		{ "trigger": "CCParticleRain_setSourcePosition(CCPoint_pos,)", "contents": "setSourcePosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleRain_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleRain_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleRain_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleRain_getRotatePerSecond()", "contents": "getRotatePerSecond()" }
,
		{ "trigger": "CCParticleRain_initWithTotalParticles(unsigned_int_number,)", "contents": "initWithTotalParticles(${1:unsigned_int_number})" }
,
		{ "trigger": "CCParticleRain_setBatchNode(CCParticleBatchNode*_node,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_node})" }
,
		{ "trigger": "CCParticleRain_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleRain_isActive()", "contents": "isActive()" }
,
		{ "trigger": "CCParticleRain_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleRain_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleRain_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleRain_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleRain_setEndSpin(float_var,)", "contents": "setEndSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleRain_resetSystem()", "contents": "resetSystem()" }
,
		{ "trigger": "CCParticleRain_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleRain_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleRain_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleRain_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleRain_getEndSizeVar()", "contents": "getEndSizeVar()" }
,
		{ "trigger": "CCParticleRain_setStartColorVar(const_ccColor4F_var,)", "contents": "setStartColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleRain_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleRain_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleRain_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleRain_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleRain_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleRain_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleRain_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleRain_setStartColor(const_ccColor4F_var,)", "contents": "setStartColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleRain_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleRain_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleRain_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleRain_setAngleVar(float_angle,)", "contents": "setAngleVar(${1:float_angle})" }
,
		{ "trigger": "CCParticleRain_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleRain_setTexture(CCTexture2D*_texture,)", "contents": "setTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCParticleRain_setTangentialAccelVar(float_t,)", "contents": "setTangentialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleRain_setRotatePerSecond(float_degrees,)", "contents": "setRotatePerSecond(${1:float_degrees})" }
,
		{ "trigger": "CCParticleRain_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleRain_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleRain_setTotalParticles(unsigned_int_tp,)", "contents": "setTotalParticles(${1:unsigned_int_tp})" }
,
		{ "trigger": "CCParticleRain_getSpeedVar()", "contents": "getSpeedVar()" }
,
		{ "trigger": "CCParticleRain_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleRain_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleRain_getStartSizeVar()", "contents": "getStartSizeVar()" }
,
		{ "trigger": "CCParticleRain_setAutoRemoveOnFinish(bool_var,)", "contents": "setAutoRemoveOnFinish(${1:bool_var})" }
,
		{ "trigger": "CCParticleRain_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleRain_setTangentialAccel(float_t,)", "contents": "setTangentialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleRain_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleRain_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleRain_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleRain_setLife(float_life,)", "contents": "setLife(${1:float_life})" }
,
		{ "trigger": "CCParticleRain_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleRain_setEndColor(const_ccColor4F_var,)", "contents": "setEndColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleRain_getRadialAccel()", "contents": "getRadialAccel()" }
,
		{ "trigger": "CCParticleRain_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleRain_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleRain_setRotatePerSecondVar(float_degrees,)", "contents": "setRotatePerSecondVar(${1:float_degrees})" }
,
		{ "trigger": "CCParticleRain_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleRain_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleRain_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCParticleRain_getStartRadiusVar()", "contents": "getStartRadiusVar()" }
,
		{ "trigger": "CCParticleRain_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleRain_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleRain_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleRain_setBatchNode(CCParticleBatchNode*_batchNode,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_batchNode})" }
,
		{ "trigger": "CCParticleRain_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleRain_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCParticleRain_getPosVar()", "contents": "getPosVar()" }
,
		{ "trigger": "CCParticleRain_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleRain_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "CCParticleRain_setEndSize(float_size,)", "contents": "setEndSize(${1:float_size})" }
,
		{ "trigger": "CCParticleRain_getEmissionRate()", "contents": "getEmissionRate()" }
,
		{ "trigger": "CCParticleRain_setRadialAccel(float_t,)", "contents": "setRadialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleRain_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleRain_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleRain_initWithFile(const_char*_plistFile,)", "contents": "initWithFile(${1:const_char*_plistFile})" }
,
		{ "trigger": "CCParticleRain_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleRain_setEndSizeVar(float_size,)", "contents": "setEndSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleRain_isFull()", "contents": "isFull()" }
,
		{ "trigger": "CCParticleRain_getStartRadius()", "contents": "getStartRadius()" }
,
		{ "trigger": "CCParticleRain_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleRain_setScale(float_s,)", "contents": "setScale(${1:float_s})" }
,
		{ "trigger": "CCParticleRain_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCParticleRain_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleRain_getStartColorVar()", "contents": "getStartColorVar()" }
,
		{ "trigger": "CCParticleRain_postStep()", "contents": "postStep()" }
,
		{ "trigger": "CCParticleRain_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleRain_setEndRadius(float_endRadius,)", "contents": "setEndRadius(${1:float_endRadius})" }
,
		{ "trigger": "CCParticleRain_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCParticleRain_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCParticleRain_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleRain_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleRain_create()", "contents": "CCParticleRain:create()" }
,

		{ "trigger": "CCTintBy_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCTintBy_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTintBy_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCTintBy_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTintBy_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTintBy_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTintBy_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCTintBy_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCTintBy_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCTintBy_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCTintBy_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCTintBy_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTintBy_release()", "contents": "release()" }
,
		{ "trigger": "CCTintBy_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCTintBy_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTintBy_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCTintBy_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCTintBy_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCTintBy_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTintBy_create(float_duration,GLshort_deltaRed,GLshort_deltaGreen,GLshort_deltaBlue,)", "contents": "CCTintBy:create(${1:float_duration},${2:GLshort_deltaRed},${3:GLshort_deltaGreen},${4:GLshort_deltaBlue})" }
,

		{ "trigger": "CCMenuItemFont_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCMenuItemFont_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCMenuItemFont_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCMenuItemFont_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCMenuItemFont_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCMenuItemFont_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCMenuItemFont_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCMenuItemFont_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCMenuItemFont_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCMenuItemFont_draw()", "contents": "draw()" }
,
		{ "trigger": "CCMenuItemFont_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCMenuItemFont_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCMenuItemFont_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCMenuItemFont_setDisabledColor(const_ccColor3B_&_color,)", "contents": "setDisabledColor(${1:const_ccColor3B_&_color})" }
,
		{ "trigger": "CCMenuItemFont_fontName()", "contents": "fontName()" }
,
		{ "trigger": "CCMenuItemFont_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCMenuItemFont_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCMenuItemFont_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCMenuItemFont_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCMenuItemFont_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemFont_visit()", "contents": "visit()" }
,
		{ "trigger": "CCMenuItemFont_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCMenuItemFont_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItemFont_activate()", "contents": "activate()" }
,
		{ "trigger": "CCMenuItemFont_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItemFont_setLabel(CCNode*_pLabel,)", "contents": "setLabel(${1:CCNode*_pLabel})" }
,
		{ "trigger": "CCMenuItemFont_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCMenuItemFont_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCMenuItemFont_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemFont_unregisterScriptTapHandler()", "contents": "unregisterScriptTapHandler()" }
,
		{ "trigger": "CCMenuItemFont_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCMenuItemFont_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCMenuItemFont_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemFont_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCMenuItemFont_registerScriptTapHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptTapHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItemFont_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCMenuItemFont_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCMenuItemFont_selected()", "contents": "selected()" }
,
		{ "trigger": "CCMenuItemFont_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItemFont_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItemFont_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItemFont_init()", "contents": "init()" }
,
		{ "trigger": "CCMenuItemFont_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCMenuItemFont_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCMenuItemFont_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCMenuItemFont_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCMenuItemFont_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCMenuItemFont_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCMenuItemFont_isSelected()", "contents": "isSelected()" }
,
		{ "trigger": "CCMenuItemFont_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCMenuItemFont_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCMenuItemFont_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCMenuItemFont_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItemFont_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCMenuItemFont_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCMenuItemFont_setFontSizeObj(unsigned_int_s,)", "contents": "setFontSizeObj(${1:unsigned_int_s})" }
,
		{ "trigger": "CCMenuItemFont_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItemFont_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCMenuItemFont_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCMenuItemFont_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCMenuItemFont_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCMenuItemFont_unselected()", "contents": "unselected()" }
,
		{ "trigger": "CCMenuItemFont_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCMenuItemFont_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCMenuItemFont_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCMenuItemFont_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemFont_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemFont_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItemFont_fontSize()", "contents": "fontSize()" }
,
		{ "trigger": "CCMenuItemFont_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCMenuItemFont_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCMenuItemFont_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCMenuItemFont_fontSizeObj()", "contents": "fontSizeObj()" }
,
		{ "trigger": "CCMenuItemFont_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCMenuItemFont_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCMenuItemFont_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCMenuItemFont_retain()", "contents": "retain()" }
,
		{ "trigger": "CCMenuItemFont_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItemFont_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCMenuItemFont_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCMenuItemFont_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCMenuItemFont_setColor(ccColor3B_color,)", "contents": "setColor(${1:ccColor3B_color})" }
,
		{ "trigger": "CCMenuItemFont_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCMenuItemFont_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCMenuItemFont_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCMenuItemFont_rect()", "contents": "rect()" }
,
		{ "trigger": "CCMenuItemFont_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCMenuItemFont_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCMenuItemFont_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCMenuItemFont_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCMenuItemFont_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCMenuItemFont_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCMenuItemFont_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCMenuItemFont_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemFont_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCMenuItemFont_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCMenuItemFont_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCMenuItemFont_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCMenuItemFont_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCMenuItemFont_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCMenuItemFont_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCMenuItemFont_setFontNameObj(const_char*_name,)", "contents": "setFontNameObj(${1:const_char*_name})" }
,
		{ "trigger": "CCMenuItemFont_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCMenuItemFont_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItemFont_setString(const_char*_label,)", "contents": "setString(${1:const_char*_label})" }
,
		{ "trigger": "CCMenuItemFont_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCMenuItemFont_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCMenuItemFont_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCMenuItemFont_transform()", "contents": "transform()" }
,
		{ "trigger": "CCMenuItemFont_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItemFont_fontNameObj()", "contents": "fontNameObj()" }
,
		{ "trigger": "CCMenuItemFont_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCMenuItemFont_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCMenuItemFont_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCMenuItemFont_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCMenuItemFont_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCMenuItemFont_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCMenuItemFont_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItemFont_release()", "contents": "release()" }
,
		{ "trigger": "CCMenuItemFont_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItemFont_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemFont_getDisabledColor()", "contents": "getDisabledColor()" }
,
		{ "trigger": "CCMenuItemFont_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItemFont_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCMenuItemFont_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCMenuItemFont_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCMenuItemFont_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCMenuItemFont_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCMenuItemFont_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCMenuItemFont_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCMenuItemFont_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCMenuItemFont_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCMenuItemFont_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCMenuItemFont_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItemFont_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCMenuItemFont_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCMenuItemFont_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCMenuItemFont_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCMenuItemFont_copy()", "contents": "copy()" }
,
		{ "trigger": "CCMenuItemFont_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCMenuItemFont_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCMenuItemFont_getLabel()", "contents": "getLabel()" }
,
		{ "trigger": "CCMenuItemFont_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "CCMenuItemFont_description()", "contents": "description()" }
,
		{ "trigger": "CCMenuItemFont_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCMenuItemFont_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCMenuItemFont_setFontName(const_char*_name,)", "contents": "CCMenuItemFont:setFontName(${1:const_char*_name})" }
,
		{ "trigger": "CCMenuItemFont_create(const_char*_value,)", "contents": "CCMenuItemFont:create(${1:const_char*_value})" }
,
		{ "trigger": "CCMenuItemFont_setFontSize(int_s,)", "contents": "CCMenuItemFont:setFontSize(${1:int_s})" }
,

		{ "trigger": "CCProgressTo_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCProgressTo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCProgressTo_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCProgressTo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCProgressTo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCProgressTo_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCProgressTo_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCProgressTo_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCProgressTo_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCProgressTo_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCProgressTo_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCProgressTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCProgressTo_release()", "contents": "release()" }
,
		{ "trigger": "CCProgressTo_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCProgressTo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCProgressTo_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCProgressTo_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCProgressTo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCProgressTo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCProgressTo_create(float_duration,float_fPercent,)", "contents": "CCProgressTo:create(${1:float_duration},${2:float_fPercent})" }
,

		{ "trigger": "UIHelper_seekActionWidgetByActionTag(Widget*_root,int_tag,)", "contents": "UIHelper:seekActionWidgetByActionTag(${1:Widget*_root},${2:int_tag})" }
,
		{ "trigger": "UIHelper_seekWidgetByName(Widget*_root,const_char*_name,)", "contents": "UIHelper:seekWidgetByName(${1:Widget*_root},${2:const_char*_name})" }
,
		{ "trigger": "UIHelper_seekWidgetByTag(Widget*_root,int_tag,)", "contents": "UIHelper:seekWidgetByTag(${1:Widget*_root},${2:int_tag})" }
,
		{ "trigger": "UIHelper_seekWidgetByRelativeName(Widget*_root,const_char*_name,)", "contents": "UIHelper:seekWidgetByRelativeName(${1:Widget*_root},${2:const_char*_name})" }
,

		{ "trigger": "CCSkewBy_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCSkewBy_copy()", "contents": "copy()" }
,
		{ "trigger": "CCSkewBy_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCSkewBy_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCSkewBy_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCSkewBy_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCSkewBy_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCSkewBy_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCSkewBy_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCSkewBy_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCSkewBy_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCSkewBy_retain()", "contents": "retain()" }
,
		{ "trigger": "CCSkewBy_release()", "contents": "release()" }
,
		{ "trigger": "CCSkewBy_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCSkewBy_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCSkewBy_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCSkewBy_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCSkewBy_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCSkewBy_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCSkewBy_create(float_t,float_deltaSkewX,float_deltaSkewY,)", "contents": "CCSkewBy:create(${1:float_t},${2:float_deltaSkewX},${3:float_deltaSkewY})" }
,

		{ "trigger": "CCEaseElasticInOut_setPeriod(float_fPeriod,)", "contents": "setPeriod(${1:float_fPeriod})" }
,
		{ "trigger": "CCEaseElasticInOut_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseElasticInOut_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseElasticInOut_getPeriod()", "contents": "getPeriod()" }
,
		{ "trigger": "CCEaseElasticInOut_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseElasticInOut_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseElasticInOut_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseElasticInOut_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseElasticInOut_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseElasticInOut_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseElasticInOut_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseElasticInOut_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseElasticInOut_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseElasticInOut_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseElasticInOut_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseElasticInOut_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseElasticInOut_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseElasticInOut_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseElasticInOut_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseElasticInOut_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseElasticInOut_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseElasticInOut_create(CCActionInterval_*pAction,float_fPeriod_=_0.3,)", "contents": "CCEaseElasticInOut:create(${1:CCActionInterval_*pAction},${2:float_fPeriod_=_0.3})" }
,

		{ "trigger": "CCScene_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCScene_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCScene_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCScene_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCScene_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCScene_draw()", "contents": "draw()" }
,
		{ "trigger": "CCScene_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCScene_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCScene_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCScene_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCScene_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCScene_visit()", "contents": "visit()" }
,
		{ "trigger": "CCScene_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCScene_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCScene_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCScene_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCScene_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCScene_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCScene_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCScene_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCScene_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCScene_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCScene_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCScene_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCScene_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCScene_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCScene_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCScene_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCScene_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCScene_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCScene_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCScene_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCScene_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCScene_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCScene_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCScene_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCScene_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCScene_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCScene_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCScene_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCScene_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCScene_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCScene_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCScene_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCScene_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCScene_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCScene_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCScene_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCScene_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCScene_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCScene_retain()", "contents": "retain()" }
,
		{ "trigger": "CCScene_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCScene_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCScene_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCScene_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCScene_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCScene_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCScene_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCScene_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCScene_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCScene_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCScene_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCScene_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCScene_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCScene_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCScene_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCScene_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCScene_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCScene_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCScene_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCScene_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCScene_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCScene_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCScene_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCScene_transform()", "contents": "transform()" }
,
		{ "trigger": "CCScene_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCScene_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCScene_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCScene_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCScene_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCScene_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCScene_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCScene_release()", "contents": "release()" }
,
		{ "trigger": "CCScene_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCScene_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCScene_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCScene_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCScene_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCScene_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCScene_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCScene_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCScene_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCScene_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCScene_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCScene_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCScene_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCScene_copy()", "contents": "copy()" }
,
		{ "trigger": "CCScene_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCScene_description()", "contents": "description()" }
,
		{ "trigger": "CCScene_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCScene_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCScene_create()", "contents": "CCScene:create()" }
,

		{ "trigger": "CCParticleFireworks_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleFireworks_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleFireworks_setStartSizeVar(float_size,)", "contents": "setStartSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleFireworks_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleFireworks_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleFireworks_getRadialAccelVar()", "contents": "getRadialAccelVar()" }
,
		{ "trigger": "CCParticleFireworks_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleFireworks_setStartRadiusVar(float_startRadiusVar,)", "contents": "setStartRadiusVar(${1:float_startRadiusVar})" }
,
		{ "trigger": "CCParticleFireworks_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleFireworks_setTexture(CCTexture2D*_var,)", "contents": "setTexture(${1:CCTexture2D*_var})" }
,
		{ "trigger": "CCParticleFireworks_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleFireworks_isAutoRemoveOnFinish()", "contents": "isAutoRemoveOnFinish()" }
,
		{ "trigger": "CCParticleFireworks_getTotalParticles()", "contents": "getTotalParticles()" }
,
		{ "trigger": "CCParticleFireworks_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleFireworks_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleFireworks_setPositionType(tCCPositionType_type,)", "contents": "setPositionType(${1:tCCPositionType_type})" }
,
		{ "trigger": "CCParticleFireworks_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCParticleFireworks_setDisplayFrame(CCSpriteFrame*_spriteFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame*_spriteFrame})" }
,
		{ "trigger": "CCParticleFireworks_getSourcePosition()", "contents": "getSourcePosition()" }
,
		{ "trigger": "CCParticleFireworks_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleFireworks_setBlendAdditive(bool_value,)", "contents": "setBlendAdditive(${1:bool_value})" }
,
		{ "trigger": "CCParticleFireworks_setGravity(const_CCPoint&_g,)", "contents": "setGravity(${1:const_CCPoint&_g})" }
,
		{ "trigger": "CCParticleFireworks_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleFireworks_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleFireworks_stopSystem()", "contents": "stopSystem()" }
,
		{ "trigger": "CCParticleFireworks_setLifeVar(float_lifeVar,)", "contents": "setLifeVar(${1:float_lifeVar})" }
,
		{ "trigger": "CCParticleFireworks_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleFireworks_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleFireworks_setPosVar(CCPoint_pos,)", "contents": "setPosVar(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleFireworks_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleFireworks_setEmissionRate(float_rate,)", "contents": "setEmissionRate(${1:float_rate})" }
,
		{ "trigger": "CCParticleFireworks_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCParticleFireworks_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleFireworks_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleFireworks_getEndColorVar()", "contents": "getEndColorVar()" }
,
		{ "trigger": "CCParticleFireworks_getEndSize()", "contents": "getEndSize()" }
,
		{ "trigger": "CCParticleFireworks_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleFireworks_setEndRadiusVar(float_endRadiusVar,)", "contents": "setEndRadiusVar(${1:float_endRadiusVar})" }
,
		{ "trigger": "CCParticleFireworks_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleFireworks_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleFireworks_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleFireworks_setEndColorVar(const_ccColor4F_var,)", "contents": "setEndColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleFireworks_getEndSpin()", "contents": "getEndSpin()" }
,
		{ "trigger": "CCParticleFireworks_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleFireworks_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCParticleFireworks_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleFireworks_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCParticleFireworks_setDuration(float_d,)", "contents": "setDuration(${1:float_d})" }
,
		{ "trigger": "CCParticleFireworks_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleFireworks_setStartSpinVar(float_var,)", "contents": "setStartSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleFireworks_getEmitterMode()", "contents": "getEmitterMode()" }
,
		{ "trigger": "CCParticleFireworks_updateQuadWithParticle(tCCParticle*_particle,const_CCPoint&_newPosition,)", "contents": "updateQuadWithParticle(${1:tCCParticle*_particle},${2:const_CCPoint&_newPosition})" }
,
		{ "trigger": "CCParticleFireworks_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleFireworks_setSpeed(float_speed,)", "contents": "setSpeed(${1:float_speed})" }
,
		{ "trigger": "CCParticleFireworks_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleFireworks_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleFireworks_getGravity()", "contents": "getGravity()" }
,
		{ "trigger": "CCParticleFireworks_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleFireworks_setEndSpinVar(float_var,)", "contents": "setEndSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleFireworks_getAngle()", "contents": "getAngle()" }
,
		{ "trigger": "CCParticleFireworks_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleFireworks_setStartRadius(float_startRadius,)", "contents": "setStartRadius(${1:float_startRadius})" }
,
		{ "trigger": "CCParticleFireworks_getAngleVar()", "contents": "getAngleVar()" }
,
		{ "trigger": "CCParticleFireworks_setEmitterMode(int_mode,)", "contents": "setEmitterMode(${1:int_mode})" }
,
		{ "trigger": "CCParticleFireworks_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleFireworks_getTangentialAccel()", "contents": "getTangentialAccel()" }
,
		{ "trigger": "CCParticleFireworks_getRotatePerSecondVar()", "contents": "getRotatePerSecondVar()" }
,
		{ "trigger": "CCParticleFireworks_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleFireworks_getLifeVar()", "contents": "getLifeVar()" }
,
		{ "trigger": "CCParticleFireworks_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleFireworks_setStartSpin(float_var,)", "contents": "setStartSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleFireworks_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleFireworks_getStartSize()", "contents": "getStartSize()" }
,
		{ "trigger": "CCParticleFireworks_getEndRadius()", "contents": "getEndRadius()" }
,
		{ "trigger": "CCParticleFireworks_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleFireworks_addParticle()", "contents": "addParticle()" }
,
		{ "trigger": "CCParticleFireworks_setBlendFunc(ccBlendFunc_var,)", "contents": "setBlendFunc(${1:ccBlendFunc_var})" }
,
		{ "trigger": "CCParticleFireworks_initParticle(tCCParticle*_particle,)", "contents": "initParticle(${1:tCCParticle*_particle})" }
,
		{ "trigger": "CCParticleFireworks_getTangentialAccelVar()", "contents": "getTangentialAccelVar()" }
,
		{ "trigger": "CCParticleFireworks_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleFireworks_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleFireworks_setAngle(float_angle,)", "contents": "setAngle(${1:float_angle})" }
,
		{ "trigger": "CCParticleFireworks_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleFireworks_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleFireworks_getEndRadiusVar()", "contents": "getEndRadiusVar()" }
,
		{ "trigger": "CCParticleFireworks_getStartSpin()", "contents": "getStartSpin()" }
,
		{ "trigger": "CCParticleFireworks_setSpeedVar(float_speed,)", "contents": "setSpeedVar(${1:float_speed})" }
,
		{ "trigger": "CCParticleFireworks_getLife()", "contents": "getLife()" }
,
		{ "trigger": "CCParticleFireworks_isBlendAdditive()", "contents": "isBlendAdditive()" }
,
		{ "trigger": "CCParticleFireworks_getParticleCount()", "contents": "getParticleCount()" }
,
		{ "trigger": "CCParticleFireworks_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleFireworks_getEndSpinVar()", "contents": "getEndSpinVar()" }
,
		{ "trigger": "CCParticleFireworks_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleFireworks_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleFireworks_setStartSize(float_size,)", "contents": "setStartSize(${1:float_size})" }
,
		{ "trigger": "CCParticleFireworks_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleFireworks_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleFireworks_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleFireworks_getStartSpinVar()", "contents": "getStartSpinVar()" }
,
		{ "trigger": "CCParticleFireworks_setRadialAccelVar(float_t,)", "contents": "setRadialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleFireworks_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCParticleFireworks_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleFireworks_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleFireworks_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleFireworks_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleFireworks_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleFireworks_setTextureWithRect(CCTexture2D_*texture,const_CCRect&_rect,)", "contents": "setTextureWithRect(${1:CCTexture2D_*texture},${2:const_CCRect&_rect})" }
,
		{ "trigger": "CCParticleFireworks_setSourcePosition(CCPoint_pos,)", "contents": "setSourcePosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleFireworks_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleFireworks_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleFireworks_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleFireworks_getRotatePerSecond()", "contents": "getRotatePerSecond()" }
,
		{ "trigger": "CCParticleFireworks_initWithTotalParticles(unsigned_int_number,)", "contents": "initWithTotalParticles(${1:unsigned_int_number})" }
,
		{ "trigger": "CCParticleFireworks_setBatchNode(CCParticleBatchNode*_node,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_node})" }
,
		{ "trigger": "CCParticleFireworks_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleFireworks_isActive()", "contents": "isActive()" }
,
		{ "trigger": "CCParticleFireworks_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleFireworks_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleFireworks_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleFireworks_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleFireworks_setEndSpin(float_var,)", "contents": "setEndSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleFireworks_resetSystem()", "contents": "resetSystem()" }
,
		{ "trigger": "CCParticleFireworks_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleFireworks_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleFireworks_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleFireworks_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleFireworks_getEndSizeVar()", "contents": "getEndSizeVar()" }
,
		{ "trigger": "CCParticleFireworks_setStartColorVar(const_ccColor4F_var,)", "contents": "setStartColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleFireworks_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleFireworks_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleFireworks_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleFireworks_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleFireworks_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleFireworks_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleFireworks_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleFireworks_setStartColor(const_ccColor4F_var,)", "contents": "setStartColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleFireworks_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleFireworks_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleFireworks_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleFireworks_setAngleVar(float_angle,)", "contents": "setAngleVar(${1:float_angle})" }
,
		{ "trigger": "CCParticleFireworks_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleFireworks_setTexture(CCTexture2D*_texture,)", "contents": "setTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCParticleFireworks_setTangentialAccelVar(float_t,)", "contents": "setTangentialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleFireworks_setRotatePerSecond(float_degrees,)", "contents": "setRotatePerSecond(${1:float_degrees})" }
,
		{ "trigger": "CCParticleFireworks_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleFireworks_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleFireworks_setTotalParticles(unsigned_int_tp,)", "contents": "setTotalParticles(${1:unsigned_int_tp})" }
,
		{ "trigger": "CCParticleFireworks_getSpeedVar()", "contents": "getSpeedVar()" }
,
		{ "trigger": "CCParticleFireworks_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleFireworks_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleFireworks_getStartSizeVar()", "contents": "getStartSizeVar()" }
,
		{ "trigger": "CCParticleFireworks_setAutoRemoveOnFinish(bool_var,)", "contents": "setAutoRemoveOnFinish(${1:bool_var})" }
,
		{ "trigger": "CCParticleFireworks_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleFireworks_setTangentialAccel(float_t,)", "contents": "setTangentialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleFireworks_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleFireworks_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleFireworks_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleFireworks_setLife(float_life,)", "contents": "setLife(${1:float_life})" }
,
		{ "trigger": "CCParticleFireworks_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleFireworks_setEndColor(const_ccColor4F_var,)", "contents": "setEndColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleFireworks_getRadialAccel()", "contents": "getRadialAccel()" }
,
		{ "trigger": "CCParticleFireworks_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleFireworks_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleFireworks_setRotatePerSecondVar(float_degrees,)", "contents": "setRotatePerSecondVar(${1:float_degrees})" }
,
		{ "trigger": "CCParticleFireworks_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleFireworks_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleFireworks_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCParticleFireworks_getStartRadiusVar()", "contents": "getStartRadiusVar()" }
,
		{ "trigger": "CCParticleFireworks_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleFireworks_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleFireworks_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleFireworks_setBatchNode(CCParticleBatchNode*_batchNode,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_batchNode})" }
,
		{ "trigger": "CCParticleFireworks_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleFireworks_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCParticleFireworks_getPosVar()", "contents": "getPosVar()" }
,
		{ "trigger": "CCParticleFireworks_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleFireworks_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "CCParticleFireworks_setEndSize(float_size,)", "contents": "setEndSize(${1:float_size})" }
,
		{ "trigger": "CCParticleFireworks_getEmissionRate()", "contents": "getEmissionRate()" }
,
		{ "trigger": "CCParticleFireworks_setRadialAccel(float_t,)", "contents": "setRadialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleFireworks_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleFireworks_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleFireworks_initWithFile(const_char*_plistFile,)", "contents": "initWithFile(${1:const_char*_plistFile})" }
,
		{ "trigger": "CCParticleFireworks_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleFireworks_setEndSizeVar(float_size,)", "contents": "setEndSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleFireworks_isFull()", "contents": "isFull()" }
,
		{ "trigger": "CCParticleFireworks_getStartRadius()", "contents": "getStartRadius()" }
,
		{ "trigger": "CCParticleFireworks_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleFireworks_setScale(float_s,)", "contents": "setScale(${1:float_s})" }
,
		{ "trigger": "CCParticleFireworks_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCParticleFireworks_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleFireworks_getStartColorVar()", "contents": "getStartColorVar()" }
,
		{ "trigger": "CCParticleFireworks_postStep()", "contents": "postStep()" }
,
		{ "trigger": "CCParticleFireworks_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleFireworks_setEndRadius(float_endRadius,)", "contents": "setEndRadius(${1:float_endRadius})" }
,
		{ "trigger": "CCParticleFireworks_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCParticleFireworks_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCParticleFireworks_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleFireworks_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleFireworks_create()", "contents": "CCParticleFireworks:create()" }
,

		{ "trigger": "CCTouchDispatcher_setDispatchEvents(bool_bDispatchEvents,)", "contents": "setDispatchEvents(${1:bool_bDispatchEvents})" }
,
		{ "trigger": "CCTouchDispatcher_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTouchDispatcher_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTouchDispatcher_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTouchDispatcher_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTouchDispatcher_release()", "contents": "release()" }
,
		{ "trigger": "CCTouchDispatcher_addTargetedDelegate(CCTouchDelegate_*pDelegate,int_nPriority,bool_bSwallowsTouches,)", "contents": "addTargetedDelegate(${1:CCTouchDelegate_*pDelegate},${2:int_nPriority},${3:bool_bSwallowsTouches})" }
,
		{ "trigger": "CCTouchDispatcher_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTouchDispatcher_isDispatchEvents()", "contents": "isDispatchEvents()" }
,
		{ "trigger": "CCTouchDispatcher_isSingleReference()", "contents": "isSingleReference()" }
,

		{ "trigger": "CCSpawn_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCSpawn_copy()", "contents": "copy()" }
,
		{ "trigger": "CCSpawn_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCSpawn_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCSpawn_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCSpawn_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCSpawn_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCSpawn_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCSpawn_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCSpawn_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCSpawn_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCSpawn_retain()", "contents": "retain()" }
,
		{ "trigger": "CCSpawn_release()", "contents": "release()" }
,
		{ "trigger": "CCSpawn_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCSpawn_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCSpawn_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCSpawn_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCSpawn_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCSpawn_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCSpawn_create(CCArray_*actions,)", "contents": "CCSpawn:create(${1:CCArray_*actions})" }
,
		{ "trigger": "CCSpawn_createWithTwoActions(CCFiniteTimeAction_*pAction1,CCFiniteTimeAction_*pAction2,)", "contents": "CCSpawn:createWithTwoActions(${1:CCFiniteTimeAction_*pAction1},${2:CCFiniteTimeAction_*pAction2})" }
,

		{ "trigger": "CCMotionStreak_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCMotionStreak_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCMotionStreak_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCMotionStreak_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCMotionStreak_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCMotionStreak_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCMotionStreak_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCMotionStreak_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCMotionStreak_init()", "contents": "init()" }
,
		{ "trigger": "CCMotionStreak_draw()", "contents": "draw()" }
,
		{ "trigger": "CCMotionStreak_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCMotionStreak_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCMotionStreak_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCMotionStreak_setBlendFunc(ccBlendFunc_blendFunc,)", "contents": "setBlendFunc(${1:ccBlendFunc_blendFunc})" }
,
		{ "trigger": "CCMotionStreak_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCMotionStreak_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCMotionStreak_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCMotionStreak_setFastMode(bool_bFastMode,)", "contents": "setFastMode(${1:bool_bFastMode})" }
,
		{ "trigger": "CCMotionStreak_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMotionStreak_visit()", "contents": "visit()" }
,
		{ "trigger": "CCMotionStreak_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCMotionStreak_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCMotionStreak_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCMotionStreak_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMotionStreak_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCMotionStreak_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCMotionStreak_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCMotionStreak_transform()", "contents": "transform()" }
,
		{ "trigger": "CCMotionStreak_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCMotionStreak_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMotionStreak_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCMotionStreak_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCMotionStreak_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMotionStreak_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMotionStreak_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMotionStreak_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCMotionStreak_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCMotionStreak_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCMotionStreak_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCMotionStreak_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCMotionStreak_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCMotionStreak_isStartingPositionInitialized()", "contents": "isStartingPositionInitialized()" }
,
		{ "trigger": "CCMotionStreak_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCMotionStreak_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCMotionStreak_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCMotionStreak_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMotionStreak_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCMotionStreak_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCMotionStreak_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMotionStreak_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCMotionStreak_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCMotionStreak_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCMotionStreak_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCMotionStreak_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCMotionStreak_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCMotionStreak_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCMotionStreak_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMotionStreak_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMotionStreak_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMotionStreak_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCMotionStreak_isFastMode()", "contents": "isFastMode()" }
,
		{ "trigger": "CCMotionStreak_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCMotionStreak_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCMotionStreak_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCMotionStreak_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCMotionStreak_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCMotionStreak_retain()", "contents": "retain()" }
,
		{ "trigger": "CCMotionStreak_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMotionStreak_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCMotionStreak_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCMotionStreak_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCMotionStreak_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCMotionStreak_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCMotionStreak_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCMotionStreak_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCMotionStreak_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCMotionStreak_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCMotionStreak_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCMotionStreak_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCMotionStreak_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCMotionStreak_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCMotionStreak_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCMotionStreak_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCMotionStreak_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCMotionStreak_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCMotionStreak_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCMotionStreak_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCMotionStreak_reset()", "contents": "reset()" }
,
		{ "trigger": "CCMotionStreak_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCMotionStreak_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCMotionStreak_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCMotionStreak_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCMotionStreak_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCMotionStreak_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCMotionStreak_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCMotionStreak_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCMotionStreak_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCMotionStreak_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCMotionStreak_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMotionStreak_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCMotionStreak_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCMotionStreak_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCMotionStreak_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCMotionStreak_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCMotionStreak_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCMotionStreak_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMotionStreak_release()", "contents": "release()" }
,
		{ "trigger": "CCMotionStreak_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMotionStreak_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCMotionStreak_setTexture(CCTexture2D_*texture,)", "contents": "setTexture(${1:CCTexture2D_*texture})" }
,
		{ "trigger": "CCMotionStreak_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMotionStreak_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCMotionStreak_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCMotionStreak_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCMotionStreak_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCMotionStreak_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCMotionStreak_tintWithColor(ccColor3B_colors,)", "contents": "tintWithColor(${1:ccColor3B_colors})" }
,
		{ "trigger": "CCMotionStreak_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCMotionStreak_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCMotionStreak_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCMotionStreak_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCMotionStreak_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCMotionStreak_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMotionStreak_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCMotionStreak_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCMotionStreak_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCMotionStreak_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCMotionStreak_copy()", "contents": "copy()" }
,
		{ "trigger": "CCMotionStreak_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCMotionStreak_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCMotionStreak_description()", "contents": "description()" }
,
		{ "trigger": "CCMotionStreak_setStartingPositionInitialized(bool_bStartingPositionInitialized,)", "contents": "setStartingPositionInitialized(${1:bool_bStartingPositionInitialized})" }
,
		{ "trigger": "CCMotionStreak_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCMotionStreak_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCMotionStreak_create(float_fade,float_minSeg,float_stroke,ccColor3B_color,const_char*_path,)", "contents": "CCMotionStreak:create(${1:float_fade},${2:float_minSeg},${3:float_stroke},${4:ccColor3B_color},${5:const_char*_path})" }
,
		{ "trigger": "CCMotionStreak_create(float_fade,float_minSeg,float_stroke,ccColor3B_color,CCTexture2D*_texture,)", "contents": "CCMotionStreak:create(${1:float_fade},${2:float_minSeg},${3:float_stroke},${4:ccColor3B_color},${5:CCTexture2D*_texture})" }
,


		{ "trigger": "CCSplitCols_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCSplitCols_originalTile(CCPoint_pos,)", "contents": "originalTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCSplitCols_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCSplitCols_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCSplitCols_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCSplitCols_release()", "contents": "release()" }
,
		{ "trigger": "CCSplitCols_setTile(CCPoint_pos,ccQuad3_coords,)", "contents": "setTile(${1:CCPoint_pos},${2:ccQuad3_coords})" }
,
		{ "trigger": "CCSplitCols_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCSplitCols_retain()", "contents": "retain()" }
,
		{ "trigger": "CCSplitCols_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCSplitCols_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCSplitCols_tile(CCPoint_pos,)", "contents": "tile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCSplitCols_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCSplitCols_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCSplitCols_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCSplitCols_copy()", "contents": "copy()" }
,
		{ "trigger": "CCSplitCols_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCSplitCols_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCSplitCols_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCSplitCols_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCSplitCols_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCSplitCols_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCSplitCols_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCSplitCols_create(float_duration,unsigned_int_nCols,)", "contents": "CCSplitCols:create(${1:float_duration},${2:unsigned_int_nCols})" }
,

		{ "trigger": "CCTMXTiledMap_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTMXTiledMap_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTMXTiledMap_layerNamed(const_char_*layerName,)", "contents": "layerNamed(${1:const_char_*layerName})" }
,
		{ "trigger": "CCTMXTiledMap_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTMXTiledMap_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTMXTiledMap_getMapSize()", "contents": "getMapSize()" }
,
		{ "trigger": "CCTMXTiledMap_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTMXTiledMap_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTMXTiledMap_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTMXTiledMap_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTMXTiledMap_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCTMXTiledMap_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCTMXTiledMap_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTMXTiledMap_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTMXTiledMap_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTMXTiledMap_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTMXTiledMap_setMapOrientation(int_val,)", "contents": "setMapOrientation(${1:int_val})" }
,
		{ "trigger": "CCTMXTiledMap_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTMXTiledMap_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTMXTiledMap_propertyNamed(const_char_*propertyName,)", "contents": "propertyNamed(${1:const_char_*propertyName})" }
,
		{ "trigger": "CCTMXTiledMap_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTMXTiledMap_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTMXTiledMap_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTMXTiledMap_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTMXTiledMap_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCTMXTiledMap_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTMXTiledMap_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTMXTiledMap_setProperties(CCDictionary*_pval,)", "contents": "setProperties(${1:CCDictionary*_pval})" }
,
		{ "trigger": "CCTMXTiledMap_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTMXTiledMap_propertiesForGID(int_GID,)", "contents": "propertiesForGID(${1:int_GID})" }
,
		{ "trigger": "CCTMXTiledMap_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTMXTiledMap_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTMXTiledMap_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTMXTiledMap_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCTMXTiledMap_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTMXTiledMap_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTMXTiledMap_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTMXTiledMap_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTMXTiledMap_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTMXTiledMap_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTMXTiledMap_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTMXTiledMap_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTMXTiledMap_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTMXTiledMap_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTMXTiledMap_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTMXTiledMap_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTMXTiledMap_getObjectGroups()", "contents": "getObjectGroups()" }
,
		{ "trigger": "CCTMXTiledMap_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTMXTiledMap_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTMXTiledMap_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTMXTiledMap_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTMXTiledMap_getProperties()", "contents": "getProperties()" }
,
		{ "trigger": "CCTMXTiledMap_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTMXTiledMap_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTMXTiledMap_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTMXTiledMap_setTileSize(CCSize_sz,)", "contents": "setTileSize(${1:CCSize_sz})" }
,
		{ "trigger": "CCTMXTiledMap_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTMXTiledMap_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTMXTiledMap_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTMXTiledMap_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTMXTiledMap_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTMXTiledMap_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTMXTiledMap_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTMXTiledMap_objectGroupNamed(const_char_*groupName,)", "contents": "objectGroupNamed(${1:const_char_*groupName})" }
,
		{ "trigger": "CCTMXTiledMap_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTMXTiledMap_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTMXTiledMap_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTMXTiledMap_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTMXTiledMap_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTMXTiledMap_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTMXTiledMap_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTMXTiledMap_getMapOrientation()", "contents": "getMapOrientation()" }
,
		{ "trigger": "CCTMXTiledMap_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTMXTiledMap_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTMXTiledMap_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTMXTiledMap_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTMXTiledMap_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTMXTiledMap_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTMXTiledMap_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTMXTiledMap_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTMXTiledMap_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTMXTiledMap_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTMXTiledMap_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTMXTiledMap_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTMXTiledMap_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTMXTiledMap_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTMXTiledMap_setObjectGroups(CCArray*_pval,)", "contents": "setObjectGroups(${1:CCArray*_pval})" }
,
		{ "trigger": "CCTMXTiledMap_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTMXTiledMap_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTMXTiledMap_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTMXTiledMap_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTMXTiledMap_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTMXTiledMap_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTMXTiledMap_release()", "contents": "release()" }
,
		{ "trigger": "CCTMXTiledMap_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTMXTiledMap_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTMXTiledMap_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTMXTiledMap_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTMXTiledMap_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTMXTiledMap_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTMXTiledMap_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCTMXTiledMap_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTMXTiledMap_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTMXTiledMap_getTileSize()", "contents": "getTileSize()" }
,
		{ "trigger": "CCTMXTiledMap_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTMXTiledMap_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTMXTiledMap_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTMXTiledMap_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTMXTiledMap_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTMXTiledMap_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTMXTiledMap_description()", "contents": "description()" }
,
		{ "trigger": "CCTMXTiledMap_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTMXTiledMap_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTMXTiledMap_setMapSize(CCSize_sz,)", "contents": "setMapSize(${1:CCSize_sz})" }
,
		{ "trigger": "CCTMXTiledMap_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTMXTiledMap_create(const_char_*tmxFile,)", "contents": "CCTMXTiledMap:create(${1:const_char_*tmxFile})" }
,
		{ "trigger": "CCTMXTiledMap_createWithXML(const_char*_tmxString,const_char*_resourcePath,)", "contents": "CCTMXTiledMap:createWithXML(${1:const_char*_tmxString},${2:const_char*_resourcePath})" }
,

		{ "trigger": "CCParticleExplosion_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleExplosion_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleExplosion_setStartSizeVar(float_size,)", "contents": "setStartSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleExplosion_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleExplosion_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleExplosion_getRadialAccelVar()", "contents": "getRadialAccelVar()" }
,
		{ "trigger": "CCParticleExplosion_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleExplosion_setStartRadiusVar(float_startRadiusVar,)", "contents": "setStartRadiusVar(${1:float_startRadiusVar})" }
,
		{ "trigger": "CCParticleExplosion_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleExplosion_setTexture(CCTexture2D*_var,)", "contents": "setTexture(${1:CCTexture2D*_var})" }
,
		{ "trigger": "CCParticleExplosion_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleExplosion_isAutoRemoveOnFinish()", "contents": "isAutoRemoveOnFinish()" }
,
		{ "trigger": "CCParticleExplosion_getTotalParticles()", "contents": "getTotalParticles()" }
,
		{ "trigger": "CCParticleExplosion_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleExplosion_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleExplosion_setPositionType(tCCPositionType_type,)", "contents": "setPositionType(${1:tCCPositionType_type})" }
,
		{ "trigger": "CCParticleExplosion_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCParticleExplosion_setDisplayFrame(CCSpriteFrame*_spriteFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame*_spriteFrame})" }
,
		{ "trigger": "CCParticleExplosion_getSourcePosition()", "contents": "getSourcePosition()" }
,
		{ "trigger": "CCParticleExplosion_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleExplosion_setBlendAdditive(bool_value,)", "contents": "setBlendAdditive(${1:bool_value})" }
,
		{ "trigger": "CCParticleExplosion_setGravity(const_CCPoint&_g,)", "contents": "setGravity(${1:const_CCPoint&_g})" }
,
		{ "trigger": "CCParticleExplosion_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleExplosion_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleExplosion_stopSystem()", "contents": "stopSystem()" }
,
		{ "trigger": "CCParticleExplosion_setLifeVar(float_lifeVar,)", "contents": "setLifeVar(${1:float_lifeVar})" }
,
		{ "trigger": "CCParticleExplosion_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleExplosion_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleExplosion_setPosVar(CCPoint_pos,)", "contents": "setPosVar(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleExplosion_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleExplosion_setEmissionRate(float_rate,)", "contents": "setEmissionRate(${1:float_rate})" }
,
		{ "trigger": "CCParticleExplosion_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCParticleExplosion_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleExplosion_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleExplosion_getEndColorVar()", "contents": "getEndColorVar()" }
,
		{ "trigger": "CCParticleExplosion_getEndSize()", "contents": "getEndSize()" }
,
		{ "trigger": "CCParticleExplosion_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleExplosion_setEndRadiusVar(float_endRadiusVar,)", "contents": "setEndRadiusVar(${1:float_endRadiusVar})" }
,
		{ "trigger": "CCParticleExplosion_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleExplosion_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleExplosion_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleExplosion_setEndColorVar(const_ccColor4F_var,)", "contents": "setEndColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleExplosion_getEndSpin()", "contents": "getEndSpin()" }
,
		{ "trigger": "CCParticleExplosion_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleExplosion_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCParticleExplosion_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleExplosion_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCParticleExplosion_setDuration(float_d,)", "contents": "setDuration(${1:float_d})" }
,
		{ "trigger": "CCParticleExplosion_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleExplosion_setStartSpinVar(float_var,)", "contents": "setStartSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleExplosion_getEmitterMode()", "contents": "getEmitterMode()" }
,
		{ "trigger": "CCParticleExplosion_updateQuadWithParticle(tCCParticle*_particle,const_CCPoint&_newPosition,)", "contents": "updateQuadWithParticle(${1:tCCParticle*_particle},${2:const_CCPoint&_newPosition})" }
,
		{ "trigger": "CCParticleExplosion_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleExplosion_setSpeed(float_speed,)", "contents": "setSpeed(${1:float_speed})" }
,
		{ "trigger": "CCParticleExplosion_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleExplosion_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleExplosion_getGravity()", "contents": "getGravity()" }
,
		{ "trigger": "CCParticleExplosion_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleExplosion_setEndSpinVar(float_var,)", "contents": "setEndSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleExplosion_getAngle()", "contents": "getAngle()" }
,
		{ "trigger": "CCParticleExplosion_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleExplosion_setStartRadius(float_startRadius,)", "contents": "setStartRadius(${1:float_startRadius})" }
,
		{ "trigger": "CCParticleExplosion_getAngleVar()", "contents": "getAngleVar()" }
,
		{ "trigger": "CCParticleExplosion_setEmitterMode(int_mode,)", "contents": "setEmitterMode(${1:int_mode})" }
,
		{ "trigger": "CCParticleExplosion_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleExplosion_getTangentialAccel()", "contents": "getTangentialAccel()" }
,
		{ "trigger": "CCParticleExplosion_getRotatePerSecondVar()", "contents": "getRotatePerSecondVar()" }
,
		{ "trigger": "CCParticleExplosion_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleExplosion_getLifeVar()", "contents": "getLifeVar()" }
,
		{ "trigger": "CCParticleExplosion_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleExplosion_setStartSpin(float_var,)", "contents": "setStartSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleExplosion_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleExplosion_getStartSize()", "contents": "getStartSize()" }
,
		{ "trigger": "CCParticleExplosion_getEndRadius()", "contents": "getEndRadius()" }
,
		{ "trigger": "CCParticleExplosion_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleExplosion_addParticle()", "contents": "addParticle()" }
,
		{ "trigger": "CCParticleExplosion_setBlendFunc(ccBlendFunc_var,)", "contents": "setBlendFunc(${1:ccBlendFunc_var})" }
,
		{ "trigger": "CCParticleExplosion_initParticle(tCCParticle*_particle,)", "contents": "initParticle(${1:tCCParticle*_particle})" }
,
		{ "trigger": "CCParticleExplosion_getTangentialAccelVar()", "contents": "getTangentialAccelVar()" }
,
		{ "trigger": "CCParticleExplosion_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleExplosion_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleExplosion_setAngle(float_angle,)", "contents": "setAngle(${1:float_angle})" }
,
		{ "trigger": "CCParticleExplosion_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleExplosion_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleExplosion_getEndRadiusVar()", "contents": "getEndRadiusVar()" }
,
		{ "trigger": "CCParticleExplosion_getStartSpin()", "contents": "getStartSpin()" }
,
		{ "trigger": "CCParticleExplosion_setSpeedVar(float_speed,)", "contents": "setSpeedVar(${1:float_speed})" }
,
		{ "trigger": "CCParticleExplosion_getLife()", "contents": "getLife()" }
,
		{ "trigger": "CCParticleExplosion_isBlendAdditive()", "contents": "isBlendAdditive()" }
,
		{ "trigger": "CCParticleExplosion_getParticleCount()", "contents": "getParticleCount()" }
,
		{ "trigger": "CCParticleExplosion_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleExplosion_getEndSpinVar()", "contents": "getEndSpinVar()" }
,
		{ "trigger": "CCParticleExplosion_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleExplosion_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleExplosion_setStartSize(float_size,)", "contents": "setStartSize(${1:float_size})" }
,
		{ "trigger": "CCParticleExplosion_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleExplosion_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleExplosion_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleExplosion_getStartSpinVar()", "contents": "getStartSpinVar()" }
,
		{ "trigger": "CCParticleExplosion_setRadialAccelVar(float_t,)", "contents": "setRadialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleExplosion_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCParticleExplosion_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleExplosion_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleExplosion_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleExplosion_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleExplosion_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleExplosion_setTextureWithRect(CCTexture2D_*texture,const_CCRect&_rect,)", "contents": "setTextureWithRect(${1:CCTexture2D_*texture},${2:const_CCRect&_rect})" }
,
		{ "trigger": "CCParticleExplosion_setSourcePosition(CCPoint_pos,)", "contents": "setSourcePosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleExplosion_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleExplosion_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleExplosion_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleExplosion_getRotatePerSecond()", "contents": "getRotatePerSecond()" }
,
		{ "trigger": "CCParticleExplosion_initWithTotalParticles(unsigned_int_number,)", "contents": "initWithTotalParticles(${1:unsigned_int_number})" }
,
		{ "trigger": "CCParticleExplosion_setBatchNode(CCParticleBatchNode*_node,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_node})" }
,
		{ "trigger": "CCParticleExplosion_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleExplosion_isActive()", "contents": "isActive()" }
,
		{ "trigger": "CCParticleExplosion_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleExplosion_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleExplosion_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleExplosion_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleExplosion_setEndSpin(float_var,)", "contents": "setEndSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleExplosion_resetSystem()", "contents": "resetSystem()" }
,
		{ "trigger": "CCParticleExplosion_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleExplosion_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleExplosion_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleExplosion_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleExplosion_getEndSizeVar()", "contents": "getEndSizeVar()" }
,
		{ "trigger": "CCParticleExplosion_setStartColorVar(const_ccColor4F_var,)", "contents": "setStartColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleExplosion_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleExplosion_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleExplosion_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleExplosion_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleExplosion_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleExplosion_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleExplosion_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleExplosion_setStartColor(const_ccColor4F_var,)", "contents": "setStartColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleExplosion_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleExplosion_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleExplosion_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleExplosion_setAngleVar(float_angle,)", "contents": "setAngleVar(${1:float_angle})" }
,
		{ "trigger": "CCParticleExplosion_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleExplosion_setTexture(CCTexture2D*_texture,)", "contents": "setTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCParticleExplosion_setTangentialAccelVar(float_t,)", "contents": "setTangentialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleExplosion_setRotatePerSecond(float_degrees,)", "contents": "setRotatePerSecond(${1:float_degrees})" }
,
		{ "trigger": "CCParticleExplosion_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleExplosion_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleExplosion_setTotalParticles(unsigned_int_tp,)", "contents": "setTotalParticles(${1:unsigned_int_tp})" }
,
		{ "trigger": "CCParticleExplosion_getSpeedVar()", "contents": "getSpeedVar()" }
,
		{ "trigger": "CCParticleExplosion_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleExplosion_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleExplosion_getStartSizeVar()", "contents": "getStartSizeVar()" }
,
		{ "trigger": "CCParticleExplosion_setAutoRemoveOnFinish(bool_var,)", "contents": "setAutoRemoveOnFinish(${1:bool_var})" }
,
		{ "trigger": "CCParticleExplosion_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleExplosion_setTangentialAccel(float_t,)", "contents": "setTangentialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleExplosion_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleExplosion_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleExplosion_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleExplosion_setLife(float_life,)", "contents": "setLife(${1:float_life})" }
,
		{ "trigger": "CCParticleExplosion_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleExplosion_setEndColor(const_ccColor4F_var,)", "contents": "setEndColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleExplosion_getRadialAccel()", "contents": "getRadialAccel()" }
,
		{ "trigger": "CCParticleExplosion_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleExplosion_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleExplosion_setRotatePerSecondVar(float_degrees,)", "contents": "setRotatePerSecondVar(${1:float_degrees})" }
,
		{ "trigger": "CCParticleExplosion_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleExplosion_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleExplosion_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCParticleExplosion_getStartRadiusVar()", "contents": "getStartRadiusVar()" }
,
		{ "trigger": "CCParticleExplosion_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleExplosion_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleExplosion_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleExplosion_setBatchNode(CCParticleBatchNode*_batchNode,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_batchNode})" }
,
		{ "trigger": "CCParticleExplosion_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleExplosion_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCParticleExplosion_getPosVar()", "contents": "getPosVar()" }
,
		{ "trigger": "CCParticleExplosion_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleExplosion_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "CCParticleExplosion_setEndSize(float_size,)", "contents": "setEndSize(${1:float_size})" }
,
		{ "trigger": "CCParticleExplosion_getEmissionRate()", "contents": "getEmissionRate()" }
,
		{ "trigger": "CCParticleExplosion_setRadialAccel(float_t,)", "contents": "setRadialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleExplosion_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleExplosion_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleExplosion_initWithFile(const_char*_plistFile,)", "contents": "initWithFile(${1:const_char*_plistFile})" }
,
		{ "trigger": "CCParticleExplosion_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleExplosion_setEndSizeVar(float_size,)", "contents": "setEndSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleExplosion_isFull()", "contents": "isFull()" }
,
		{ "trigger": "CCParticleExplosion_getStartRadius()", "contents": "getStartRadius()" }
,
		{ "trigger": "CCParticleExplosion_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleExplosion_setScale(float_s,)", "contents": "setScale(${1:float_s})" }
,
		{ "trigger": "CCParticleExplosion_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCParticleExplosion_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleExplosion_getStartColorVar()", "contents": "getStartColorVar()" }
,
		{ "trigger": "CCParticleExplosion_postStep()", "contents": "postStep()" }
,
		{ "trigger": "CCParticleExplosion_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleExplosion_setEndRadius(float_endRadius,)", "contents": "setEndRadius(${1:float_endRadius})" }
,
		{ "trigger": "CCParticleExplosion_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCParticleExplosion_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCParticleExplosion_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleExplosion_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleExplosion_create()", "contents": "CCParticleExplosion:create()" }
,

		{ "trigger": "CCToggleVisibility_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCToggleVisibility_copy()", "contents": "copy()" }
,
		{ "trigger": "CCToggleVisibility_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCToggleVisibility_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCToggleVisibility_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCToggleVisibility_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCToggleVisibility_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCToggleVisibility_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCToggleVisibility_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCToggleVisibility_release()", "contents": "release()" }
,
		{ "trigger": "CCToggleVisibility_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCToggleVisibility_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCToggleVisibility_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCToggleVisibility_retain()", "contents": "retain()" }
,
		{ "trigger": "CCToggleVisibility_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCToggleVisibility_create()", "contents": "CCToggleVisibility:create()" }
,

		{ "trigger": "CCTransitionFade_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTransitionFade_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTransitionFade_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTransitionFade_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTransitionFade_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTransitionFade_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTransitionFade_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTransitionFade_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTransitionFade_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCTransitionFade_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCTransitionFade_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionFade_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTransitionFade_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTransitionFade_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionFade_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionFade_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTransitionFade_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFade_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTransitionFade_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCTransitionFade_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFade_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTransitionFade_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionFade_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTransitionFade_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionFade_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTransitionFade_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTransitionFade_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCTransitionFade_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTransitionFade_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTransitionFade_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTransitionFade_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTransitionFade_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTransitionFade_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTransitionFade_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionFade_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTransitionFade_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTransitionFade_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionFade_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTransitionFade_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTransitionFade_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTransitionFade_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTransitionFade_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionFade_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFade_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionFade_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTransitionFade_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTransitionFade_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTransitionFade_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTransitionFade_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTransitionFade_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTransitionFade_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTransitionFade_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionFade_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTransitionFade_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTransitionFade_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTransitionFade_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTransitionFade_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTransitionFade_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTransitionFade_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTransitionFade_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTransitionFade_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTransitionFade_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionFade_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTransitionFade_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTransitionFade_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTransitionFade_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTransitionFade_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTransitionFade_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTransitionFade_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTransitionFade_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTransitionFade_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionFade_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTransitionFade_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTransitionFade_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTransitionFade_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTransitionFade_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionFade_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTransitionFade_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTransitionFade_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTransitionFade_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTransitionFade_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTransitionFade_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionFade_release()", "contents": "release()" }
,
		{ "trigger": "CCTransitionFade_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionFade_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFade_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionFade_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTransitionFade_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTransitionFade_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTransitionFade_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCTransitionFade_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTransitionFade_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTransitionFade_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTransitionFade_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTransitionFade_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionFade_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTransitionFade_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTransitionFade_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTransitionFade_description()", "contents": "description()" }
,
		{ "trigger": "CCTransitionFade_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTransitionFade_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTransitionFade_create(float_duration,CCScene*_scene,ccColor3B_color_=_ccBLACK,)", "contents": "CCTransitionFade:create(${1:float_duration},${2:CCScene*_scene},${3:ccColor3B_color_=_ccBLACK})" }
,



		{ "trigger": "CCTMXTilesetInfo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTMXTilesetInfo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTMXTilesetInfo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTMXTilesetInfo_rectForGID(unsigned_int_gid,)", "contents": "rectForGID(${1:unsigned_int_gid})" }
,
		{ "trigger": "CCTMXTilesetInfo_release()", "contents": "release()" }
,
		{ "trigger": "CCTMXTilesetInfo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTMXTilesetInfo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTMXTilesetInfo_isSingleReference()", "contents": "isSingleReference()" }
,

		{ "trigger": "CCObject_copy()", "contents": "copy()" }
,
		{ "trigger": "CCObject_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCObject_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCObject_release()", "contents": "release()" }
,
		{ "trigger": "CCObject_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCObject_retain()", "contents": "retain()" }
,
		{ "trigger": "CCObject_isSingleReference()", "contents": "isSingleReference()" }
,

		{ "trigger": "CCGridAction_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCGridAction_copy()", "contents": "copy()" }
,
		{ "trigger": "CCGridAction_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCGridAction_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCGridAction_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCGridAction_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCGridAction_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCGridAction_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCGridAction_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCGridAction_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCGridAction_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCGridAction_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCGridAction_retain()", "contents": "retain()" }
,
		{ "trigger": "CCGridAction_release()", "contents": "release()" }
,
		{ "trigger": "CCGridAction_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCGridAction_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCGridAction_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCGridAction_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCGridAction_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCGridAction_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCGridAction_create(float_duration,CCSize_gridSize,)", "contents": "CCGridAction:create(${1:float_duration},${2:CCSize_gridSize})" }
,

		{ "trigger": "CCPlace_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCPlace_copy()", "contents": "copy()" }
,
		{ "trigger": "CCPlace_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCPlace_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCPlace_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCPlace_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCPlace_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCPlace_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCPlace_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCPlace_release()", "contents": "release()" }
,
		{ "trigger": "CCPlace_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCPlace_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCPlace_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCPlace_retain()", "contents": "retain()" }
,
		{ "trigger": "CCPlace_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCPlace_create(CCPoint_pos,)", "contents": "CCPlace:create(${1:CCPoint_pos})" }
,

		{ "trigger": "CCTransitionMoveInR_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTransitionMoveInR_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTransitionMoveInR_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTransitionMoveInR_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTransitionMoveInR_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTransitionMoveInR_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTransitionMoveInR_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTransitionMoveInR_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTransitionMoveInR_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCTransitionMoveInR_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCTransitionMoveInR_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionMoveInR_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTransitionMoveInR_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTransitionMoveInR_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionMoveInR_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionMoveInR_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTransitionMoveInR_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionMoveInR_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTransitionMoveInR_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCTransitionMoveInR_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionMoveInR_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTransitionMoveInR_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionMoveInR_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTransitionMoveInR_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionMoveInR_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTransitionMoveInR_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTransitionMoveInR_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCTransitionMoveInR_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTransitionMoveInR_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTransitionMoveInR_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTransitionMoveInR_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTransitionMoveInR_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTransitionMoveInR_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTransitionMoveInR_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionMoveInR_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTransitionMoveInR_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTransitionMoveInR_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionMoveInR_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTransitionMoveInR_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTransitionMoveInR_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTransitionMoveInR_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTransitionMoveInR_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionMoveInR_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionMoveInR_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionMoveInR_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTransitionMoveInR_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTransitionMoveInR_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTransitionMoveInR_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTransitionMoveInR_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTransitionMoveInR_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTransitionMoveInR_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTransitionMoveInR_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionMoveInR_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTransitionMoveInR_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTransitionMoveInR_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTransitionMoveInR_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTransitionMoveInR_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTransitionMoveInR_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTransitionMoveInR_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTransitionMoveInR_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTransitionMoveInR_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTransitionMoveInR_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionMoveInR_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTransitionMoveInR_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTransitionMoveInR_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTransitionMoveInR_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTransitionMoveInR_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTransitionMoveInR_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTransitionMoveInR_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTransitionMoveInR_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTransitionMoveInR_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionMoveInR_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTransitionMoveInR_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTransitionMoveInR_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTransitionMoveInR_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTransitionMoveInR_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionMoveInR_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTransitionMoveInR_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTransitionMoveInR_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTransitionMoveInR_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTransitionMoveInR_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTransitionMoveInR_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionMoveInR_release()", "contents": "release()" }
,
		{ "trigger": "CCTransitionMoveInR_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionMoveInR_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionMoveInR_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionMoveInR_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTransitionMoveInR_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTransitionMoveInR_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTransitionMoveInR_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCTransitionMoveInR_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTransitionMoveInR_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTransitionMoveInR_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTransitionMoveInR_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTransitionMoveInR_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionMoveInR_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTransitionMoveInR_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTransitionMoveInR_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTransitionMoveInR_description()", "contents": "description()" }
,
		{ "trigger": "CCTransitionMoveInR_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTransitionMoveInR_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTransitionMoveInR_create(float_t,CCScene*_scene,)", "contents": "CCTransitionMoveInR:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCShow_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCShow_copy()", "contents": "copy()" }
,
		{ "trigger": "CCShow_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCShow_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCShow_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCShow_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCShow_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCShow_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCShow_retain()", "contents": "retain()" }
,
		{ "trigger": "CCShow_release()", "contents": "release()" }
,
		{ "trigger": "CCShow_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCShow_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCShow_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCShow_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCShow_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCShow_create()", "contents": "CCShow:create()" }
,

		{ "trigger": "CCTransitionMoveInT_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTransitionMoveInT_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTransitionMoveInT_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTransitionMoveInT_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTransitionMoveInT_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTransitionMoveInT_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTransitionMoveInT_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTransitionMoveInT_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTransitionMoveInT_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCTransitionMoveInT_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCTransitionMoveInT_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionMoveInT_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTransitionMoveInT_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTransitionMoveInT_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionMoveInT_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionMoveInT_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTransitionMoveInT_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionMoveInT_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTransitionMoveInT_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCTransitionMoveInT_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionMoveInT_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTransitionMoveInT_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionMoveInT_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTransitionMoveInT_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionMoveInT_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTransitionMoveInT_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTransitionMoveInT_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCTransitionMoveInT_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTransitionMoveInT_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTransitionMoveInT_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTransitionMoveInT_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTransitionMoveInT_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTransitionMoveInT_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTransitionMoveInT_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionMoveInT_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTransitionMoveInT_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTransitionMoveInT_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionMoveInT_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTransitionMoveInT_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTransitionMoveInT_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTransitionMoveInT_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTransitionMoveInT_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionMoveInT_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionMoveInT_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionMoveInT_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTransitionMoveInT_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTransitionMoveInT_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTransitionMoveInT_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTransitionMoveInT_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTransitionMoveInT_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTransitionMoveInT_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTransitionMoveInT_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionMoveInT_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTransitionMoveInT_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTransitionMoveInT_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTransitionMoveInT_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTransitionMoveInT_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTransitionMoveInT_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTransitionMoveInT_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTransitionMoveInT_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTransitionMoveInT_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTransitionMoveInT_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionMoveInT_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTransitionMoveInT_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTransitionMoveInT_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTransitionMoveInT_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTransitionMoveInT_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTransitionMoveInT_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTransitionMoveInT_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTransitionMoveInT_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTransitionMoveInT_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionMoveInT_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTransitionMoveInT_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTransitionMoveInT_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTransitionMoveInT_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTransitionMoveInT_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionMoveInT_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTransitionMoveInT_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTransitionMoveInT_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTransitionMoveInT_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTransitionMoveInT_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTransitionMoveInT_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionMoveInT_release()", "contents": "release()" }
,
		{ "trigger": "CCTransitionMoveInT_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionMoveInT_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionMoveInT_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionMoveInT_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTransitionMoveInT_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTransitionMoveInT_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTransitionMoveInT_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCTransitionMoveInT_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTransitionMoveInT_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTransitionMoveInT_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTransitionMoveInT_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTransitionMoveInT_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionMoveInT_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTransitionMoveInT_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTransitionMoveInT_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTransitionMoveInT_description()", "contents": "description()" }
,
		{ "trigger": "CCTransitionMoveInT_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTransitionMoveInT_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTransitionMoveInT_create(float_t,CCScene*_scene,)", "contents": "CCTransitionMoveInT:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "Widget_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "Widget_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "Widget_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "Widget_getBottomInParent()", "contents": "getBottomInParent()" }
,
		{ "trigger": "Widget_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "Widget_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "Widget_getVirtualRenderer()", "contents": "getVirtualRenderer()" }
,
		{ "trigger": "Widget_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "Widget_draw()", "contents": "draw()" }
,
		{ "trigger": "Widget_getNodes()", "contents": "getNodes()" }
,
		{ "trigger": "Widget_isBright()", "contents": "isBright()" }
,
		{ "trigger": "Widget_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "Widget_getLayoutParameter(LayoutParameterType_type,)", "contents": "getLayoutParameter(${1:LayoutParameterType_type})" }
,
		{ "trigger": "Widget_ignoreContentAdaptWithSize(bool_ignore,)", "contents": "ignoreContentAdaptWithSize(${1:bool_ignore})" }
,
		{ "trigger": "Widget_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "Widget_getSize()", "contents": "getSize()" }
,
		{ "trigger": "Widget_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "Widget_getLayoutSize()", "contents": "getLayoutSize()" }
,
		{ "trigger": "Widget_visit()", "contents": "visit()" }
,
		{ "trigger": "Widget_getTopInParent()", "contents": "getTopInParent()" }
,
		{ "trigger": "Widget_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "Widget_disable()", "contents": "disable()" }
,
		{ "trigger": "Widget_didNotSelectSelf()", "contents": "didNotSelectSelf()" }
,
		{ "trigger": "Widget_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "Widget_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "Widget_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "Widget_getPositionPercent()", "contents": "getPositionPercent()" }
,
		{ "trigger": "Widget_getColor()", "contents": "getColor()" }
,
		{ "trigger": "Widget_setFlipY(bool_flipY,)", "contents": "setFlipY(${1:bool_flipY})" }
,
		{ "trigger": "Widget_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "Widget_setSize(const_CCSize_&size,)", "contents": "setSize(${1:const_CCSize_&size})" }
,
		{ "trigger": "Widget_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "Widget_onTouchEnded(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchEnded(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "Widget_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "Widget_getTouchEndPos()", "contents": "getTouchEndPos()" }
,
		{ "trigger": "Widget_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "Widget_onTouchMoved(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchMoved(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "Widget_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "Widget_setTouchEnable(bool_enabled,bool_containChildren_=_false,)", "contents": "setTouchEnable(${1:bool_enabled},${2:bool_containChildren_=_false})" }
,
		{ "trigger": "Widget_transform()", "contents": "transform()" }
,
		{ "trigger": "Widget_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "Widget_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "Widget_addNode(CCNode_*_node,int_zOrder,)", "contents": "addNode(${1:CCNode_*_node},${2:int_zOrder})" }
,
		{ "trigger": "Widget_removeAllNodes()", "contents": "removeAllNodes()" }
,
		{ "trigger": "Widget_getWidgetByTag(int_tag,)", "contents": "getWidgetByTag(${1:int_tag})" }
,
		{ "trigger": "Widget_getChildByName(const_char*_name,)", "contents": "getChildByName(${1:const_char*_name})" }
,
		{ "trigger": "Widget_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "Widget_setActionTag(int_tag,)", "contents": "setActionTag(${1:int_tag})" }
,
		{ "trigger": "Widget_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "Widget_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "Widget_getCustomSize()", "contents": "getCustomSize()" }
,
		{ "trigger": "Widget_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "Widget_getRightInParent()", "contents": "getRightInParent()" }
,
		{ "trigger": "Widget_getDescription()", "contents": "getDescription()" }
,
		{ "trigger": "Widget_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "Widget_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "Widget_getRect()", "contents": "getRect()" }
,
		{ "trigger": "Widget_getNodeByTag(int_tag,)", "contents": "getNodeByTag(${1:int_tag})" }
,
		{ "trigger": "Widget_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "Widget_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "Widget_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "Widget_setName(const_char*_name,)", "contents": "setName(${1:const_char*_name})" }
,
		{ "trigger": "Widget_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "Widget_updateSizeAndPosition(const_CCSize&_parentSize,)", "contents": "updateSizeAndPosition(${1:const_CCSize&_parentSize})" }
,
		{ "trigger": "Widget_getWidgetType()", "contents": "getWidgetType()" }
,
		{ "trigger": "Widget_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "Widget_isFlipY()", "contents": "isFlipY()" }
,
		{ "trigger": "Widget_setSizePercent(const_CCPoint_&percent,)", "contents": "setSizePercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "Widget_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "Widget_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "Widget_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "Widget_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "Widget_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "Widget_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "Widget_setBright(bool_bright,)", "contents": "setBright(${1:bool_bright})" }
,
		{ "trigger": "Widget_active()", "contents": "active()" }
,
		{ "trigger": "Widget_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "Widget_removeChild(CCNode*_child,)", "contents": "removeChild(${1:CCNode*_child})" }
,
		{ "trigger": "Widget_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "Widget_getTag()", "contents": "getTag()" }
,
		{ "trigger": "Widget_removeAllChildren()", "contents": "removeAllChildren()" }
,
		{ "trigger": "Widget_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "Widget_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "Widget_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "Widget_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "Widget_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "Widget_setFocused(bool_fucosed,)", "contents": "setFocused(${1:bool_fucosed})" }
,
		{ "trigger": "Widget_executeScriptEvent(int_eventName,)", "contents": "executeScriptEvent(${1:int_eventName})" }
,
		{ "trigger": "Widget_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "Widget_setSizeType(SizeType_type,)", "contents": "setSizeType(${1:SizeType_type})" }
,
		{ "trigger": "Widget_clone()", "contents": "clone()" }
,
		{ "trigger": "Widget_setTouchEnabled(bool_enabled,)", "contents": "setTouchEnabled(${1:bool_enabled})" }
,
		{ "trigger": "Widget_setBrightStyle(BrightStyle_style,)", "contents": "setBrightStyle(${1:BrightStyle_style})" }
,
		{ "trigger": "Widget_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "Widget_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "Widget_setPositionType(PositionType_type,)", "contents": "setPositionType(${1:PositionType_type})" }
,
		{ "trigger": "Widget_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "Widget_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "Widget_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "Widget_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "Widget_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "Widget_setLayoutParameter(LayoutParameter*_parameter,)", "contents": "setLayoutParameter(${1:LayoutParameter*_parameter})" }
,
		{ "trigger": "Widget_setPosition(const_CCPoint_&pos,)", "contents": "setPosition(${1:const_CCPoint_&pos})" }
,
		{ "trigger": "Widget_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "Widget_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "Widget_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "Widget_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "Widget_getTouchMovePos()", "contents": "getTouchMovePos()" }
,
		{ "trigger": "Widget_hitTest(const_CCPoint_&pt,)", "contents": "hitTest(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "Widget_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "Widget_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "Widget_removeNodeByTag(int_tag,)", "contents": "removeNodeByTag(${1:int_tag})" }
,
		{ "trigger": "Widget_setPositionPercent(const_CCPoint_&percent,)", "contents": "setPositionPercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "Widget_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "Widget_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "Widget_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "Widget_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "Widget_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "Widget_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "Widget_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "Widget_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "Widget_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "Widget_onTouchBegan(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchBegan(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "Widget_getTouchStartPos()", "contents": "getTouchStartPos()" }
,
		{ "trigger": "Widget_getSizeType()", "contents": "getSizeType()" }
,
		{ "trigger": "Widget_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "Widget_sortAllChildren()", "contents": "sortAllChildren()" }
,
		{ "trigger": "Widget_getSizePercent()", "contents": "getSizePercent()" }
,
		{ "trigger": "Widget_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "Widget_updateSizeAndPosition()", "contents": "updateSizeAndPosition()" }
,
		{ "trigger": "Widget_isFlipX()", "contents": "isFlipX()" }
,
		{ "trigger": "Widget_getParent()", "contents": "getParent()" }
,
		{ "trigger": "Widget_getName()", "contents": "getName()" }
,
		{ "trigger": "Widget_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "Widget_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "Widget_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "Widget_isFocused()", "contents": "isFocused()" }
,
		{ "trigger": "Widget_retain()", "contents": "retain()" }
,
		{ "trigger": "Widget_setSoundEff(std::string_eff,)", "contents": "setSoundEff(${1:std::string_eff})" }
,
		{ "trigger": "Widget_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "Widget_visit()", "contents": "visit()" }
,
		{ "trigger": "Widget_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "Widget_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "Widget_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "Widget_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "Widget_addNode(CCNode*_node,int_zOrder,int_tag,)", "contents": "addNode(${1:CCNode*_node},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "Widget_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "Widget_release()", "contents": "release()" }
,
		{ "trigger": "Widget_getActionTag()", "contents": "getActionTag()" }
,
		{ "trigger": "Widget_setFlipX(bool_flipX,)", "contents": "setFlipX(${1:bool_flipX})" }
,
		{ "trigger": "Widget_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "Widget_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "Widget_checkChildInfo(int_handleState,Widget*_sender,const_CCPoint_&touchPoint,)", "contents": "checkChildInfo(${1:int_handleState},${2:Widget*_sender},${3:const_CCPoint_&touchPoint})" }
,
		{ "trigger": "Widget_removeFromParent()", "contents": "removeFromParent()" }
,
		{ "trigger": "Widget_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "Widget_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "Widget_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "Widget_isIgnoreContentAdaptWithSize()", "contents": "isIgnoreContentAdaptWithSize()" }
,
		{ "trigger": "Widget_getLeftInParent()", "contents": "getLeftInParent()" }
,
		{ "trigger": "Widget_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "Widget_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "Widget_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "Widget_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "Widget_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "Widget_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "Widget_getScale()", "contents": "getScale()" }
,
		{ "trigger": "Widget_removeNode(CCNode*_node,)", "contents": "removeNode(${1:CCNode*_node})" }
,
		{ "trigger": "Widget_addNode(CCNode*_node,)", "contents": "addNode(${1:CCNode*_node})" }
,
		{ "trigger": "Widget_onExit()", "contents": "onExit()" }
,
		{ "trigger": "Widget_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "Widget_getWorldPosition()", "contents": "getWorldPosition()" }
,
		{ "trigger": "Widget_copy()", "contents": "copy()" }
,
		{ "trigger": "Widget_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "Widget_clippingParentAreaContainPoint(const_CCPoint_&pt,)", "contents": "clippingParentAreaContainPoint(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "Widget_onTouchCancelled(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchCancelled(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "Widget_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "Widget_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "Widget_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "Widget_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "Widget_description()", "contents": "description()" }
,
		{ "trigger": "Widget_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "Widget_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "Widget_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "Widget_onEnter()", "contents": "onEnter()" }
,
		{ "trigger": "Widget_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "Widget_addChild(CCNode*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "Widget_create()", "contents": "Widget:create()" }
,

		{ "trigger": "ScrollView_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "ScrollView_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "ScrollView_update(float_dt,)", "contents": "update(${1:float_dt})" }
,
		{ "trigger": "ScrollView_getBottomInParent()", "contents": "getBottomInParent()" }
,
		{ "trigger": "ScrollView_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "ScrollView_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "ScrollView_scrollToBottomRight(float_time,bool_attenuated,)", "contents": "scrollToBottomRight(${1:float_time},${2:bool_attenuated})" }
,
		{ "trigger": "ScrollView_onTouchBegan(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchBegan(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "ScrollView_scrollToBottom(float_time,bool_attenuated,)", "contents": "scrollToBottom(${1:float_time},${2:bool_attenuated})" }
,
		{ "trigger": "ScrollView_getVirtualRenderer()", "contents": "getVirtualRenderer()" }
,
		{ "trigger": "ScrollView_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "ScrollView_draw()", "contents": "draw()" }
,
		{ "trigger": "ScrollView_getNodes()", "contents": "getNodes()" }
,
		{ "trigger": "ScrollView_getBackGroundColor()", "contents": "getBackGroundColor()" }
,
		{ "trigger": "ScrollView_isBright()", "contents": "isBright()" }
,
		{ "trigger": "ScrollView_scrollToPercentBothDirection(const_CCPoint&_percent,float_time,bool_attenuated,)", "contents": "scrollToPercentBothDirection(${1:const_CCPoint&_percent},${2:float_time},${3:bool_attenuated})" }
,
		{ "trigger": "ScrollView_getLayoutParameter(LayoutParameterType_type,)", "contents": "getLayoutParameter(${1:LayoutParameterType_type})" }
,
		{ "trigger": "ScrollView_ignoreContentAdaptWithSize(bool_ignore,)", "contents": "ignoreContentAdaptWithSize(${1:bool_ignore})" }
,
		{ "trigger": "ScrollView_scrollToTop(float_time,bool_attenuated,)", "contents": "scrollToTop(${1:float_time},${2:bool_attenuated})" }
,
		{ "trigger": "ScrollView_getBackGroundEndColor()", "contents": "getBackGroundEndColor()" }
,
		{ "trigger": "ScrollView_setInnerContainerSize(const_CCSize_&size,)", "contents": "setInnerContainerSize(${1:const_CCSize_&size})" }
,
		{ "trigger": "ScrollView_getSize()", "contents": "getSize()" }
,
		{ "trigger": "ScrollView_jumpToPercentVertical(float_percent,)", "contents": "jumpToPercentVertical(${1:float_percent})" }
,
		{ "trigger": "ScrollView_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "ScrollView_getLayoutSize()", "contents": "getLayoutSize()" }
,
		{ "trigger": "ScrollView_visit()", "contents": "visit()" }
,
		{ "trigger": "ScrollView_getTopInParent()", "contents": "getTopInParent()" }
,
		{ "trigger": "ScrollView_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "ScrollView_requestDoLayout()", "contents": "requestDoLayout()" }
,
		{ "trigger": "ScrollView_disable()", "contents": "disable()" }
,
		{ "trigger": "ScrollView_setBackGroundColorOpacity(GLubyte_opacity,)", "contents": "setBackGroundColorOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "ScrollView_jumpToTopRight()", "contents": "jumpToTopRight()" }
,
		{ "trigger": "ScrollView_setSizeType(SizeType_type,)", "contents": "setSizeType(${1:SizeType_type})" }
,
		{ "trigger": "ScrollView_getNodeByTag(int_tag,)", "contents": "getNodeByTag(${1:int_tag})" }
,
		{ "trigger": "ScrollView_removeChild(CCNode*_child,bool_cleaup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleaup})" }
,
		{ "trigger": "ScrollView_isBounceEnabled()", "contents": "isBounceEnabled()" }
,
		{ "trigger": "ScrollView_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "ScrollView_getPositionPercent()", "contents": "getPositionPercent()" }
,
		{ "trigger": "ScrollView_getInnerContainerSize()", "contents": "getInnerContainerSize()" }
,
		{ "trigger": "ScrollView_setPosition(const_CCPoint_&pos,)", "contents": "setPosition(${1:const_CCPoint_&pos})" }
,
		{ "trigger": "ScrollView_setFlipY(bool_flipY,)", "contents": "setFlipY(${1:bool_flipY})" }
,
		{ "trigger": "ScrollView_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "ScrollView_setSize(const_CCSize_&size,)", "contents": "setSize(${1:const_CCSize_&size})" }
,
		{ "trigger": "ScrollView_isInertiaScrollEnabled()", "contents": "isInertiaScrollEnabled()" }
,
		{ "trigger": "ScrollView_scrollToRight(float_time,bool_attenuated,)", "contents": "scrollToRight(${1:float_time},${2:bool_attenuated})" }
,
		{ "trigger": "ScrollView_removeChild(CCNode*_widget,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_widget},${2:bool_cleanup})" }
,
		{ "trigger": "ScrollView_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "ScrollView_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "ScrollView_jumpToPercentBothDirection(const_CCPoint&_percent,)", "contents": "jumpToPercentBothDirection(${1:const_CCPoint&_percent})" }
,
		{ "trigger": "ScrollView_jumpToTop()", "contents": "jumpToTop()" }
,
		{ "trigger": "ScrollView_onTouchEnded(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchEnded(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "ScrollView_onTouchMoved(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchMoved(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "ScrollView_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "ScrollView_isBackGroundImageScale9Enabled()", "contents": "isBackGroundImageScale9Enabled()" }
,
		{ "trigger": "ScrollView_scrollToPercentVertical(float_percent,float_time,bool_attenuated,)", "contents": "scrollToPercentVertical(${1:float_percent},${2:float_time},${3:bool_attenuated})" }
,
		{ "trigger": "ScrollView_setTouchEnable(bool_enabled,bool_containChildren_=_false,)", "contents": "setTouchEnable(${1:bool_enabled},${2:bool_containChildren_=_false})" }
,
		{ "trigger": "ScrollView_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "ScrollView_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "ScrollView_setBackGroundImage(const_char*_fileName,TextureResType_texType_=_UI_TEX_TYPE_LOCAL,)", "contents": "setBackGroundImage(${1:const_char*_fileName},${2:TextureResType_texType_=_UI_TEX_TYPE_LOCAL})" }
,
		{ "trigger": "ScrollView_addNode(CCNode_*_node,int_zOrder,)", "contents": "addNode(${1:CCNode_*_node},${2:int_zOrder})" }
,
		{ "trigger": "ScrollView_removeAllNodes()", "contents": "removeAllNodes()" }
,
		{ "trigger": "ScrollView_setBackGroundImageCapInsets(const_CCRect&_capInsets,)", "contents": "setBackGroundImageCapInsets(${1:const_CCRect&_capInsets})" }
,
		{ "trigger": "ScrollView_clone()", "contents": "clone()" }
,
		{ "trigger": "ScrollView_getWidgetByTag(int_tag,)", "contents": "getWidgetByTag(${1:int_tag})" }
,
		{ "trigger": "ScrollView_getChildByName(const_char*_name,)", "contents": "getChildByName(${1:const_char*_name})" }
,
		{ "trigger": "ScrollView_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "ScrollView_getBackGroundStartColor()", "contents": "getBackGroundStartColor()" }
,
		{ "trigger": "ScrollView_setBackGroundImageColor(const_ccColor3B&_color,)", "contents": "setBackGroundImageColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "ScrollView_getTouchEndPos()", "contents": "getTouchEndPos()" }
,
		{ "trigger": "ScrollView_jumpToPercentHorizontal(float_percent,)", "contents": "jumpToPercentHorizontal(${1:float_percent})" }
,
		{ "trigger": "ScrollView_jumpToBottomRight()", "contents": "jumpToBottomRight()" }
,
		{ "trigger": "ScrollView_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "ScrollView_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "ScrollView_getCustomSize()", "contents": "getCustomSize()" }
,
		{ "trigger": "ScrollView_setBackGroundColorType(LayoutBackGroundColorType_type,)", "contents": "setBackGroundColorType(${1:LayoutBackGroundColorType_type})" }
,
		{ "trigger": "ScrollView_setLayoutType(LayoutType_type,)", "contents": "setLayoutType(${1:LayoutType_type})" }
,
		{ "trigger": "ScrollView_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "ScrollView_getRightInParent()", "contents": "getRightInParent()" }
,
		{ "trigger": "ScrollView_getDescription()", "contents": "getDescription()" }
,
		{ "trigger": "ScrollView_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "ScrollView_setTouchEnabled(bool_enabled,)", "contents": "setTouchEnabled(${1:bool_enabled})" }
,
		{ "trigger": "ScrollView_getRect()", "contents": "getRect()" }
,
		{ "trigger": "ScrollView_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "ScrollView_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "ScrollView_getBackGroundColorVector()", "contents": "getBackGroundColorVector()" }
,
		{ "trigger": "ScrollView_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "ScrollView_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "ScrollView_getName()", "contents": "getName()" }
,
		{ "trigger": "ScrollView_getBackGroundImageTextureSize()", "contents": "getBackGroundImageTextureSize()" }
,
		{ "trigger": "ScrollView_setBackGroundColor(const_ccColor3B_&color,)", "contents": "setBackGroundColor(${1:const_ccColor3B_&color})" }
,
		{ "trigger": "ScrollView_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "ScrollView_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "ScrollView_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "ScrollView_getBackGroundColorOpacity()", "contents": "getBackGroundColorOpacity()" }
,
		{ "trigger": "ScrollView_getWidgetType()", "contents": "getWidgetType()" }
,
		{ "trigger": "ScrollView_setSizePercent(const_CCPoint_&percent,)", "contents": "setSizePercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "ScrollView_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "ScrollView_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "ScrollView_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "ScrollView_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "ScrollView_jumpToBottomLeft()", "contents": "jumpToBottomLeft()" }
,
		{ "trigger": "ScrollView_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "ScrollView_setBackGroundImageOpacity(GLubyte_opacity,)", "contents": "setBackGroundImageOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "ScrollView_setDirection(SCROLLVIEW_DIR_dir,)", "contents": "setDirection(${1:SCROLLVIEW_DIR_dir})" }
,
		{ "trigger": "ScrollView_setBright(bool_bright,)", "contents": "setBright(${1:bool_bright})" }
,
		{ "trigger": "ScrollView_active()", "contents": "active()" }
,
		{ "trigger": "ScrollView_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "ScrollView_removeChild(CCNode*_child,)", "contents": "removeChild(${1:CCNode*_child})" }
,
		{ "trigger": "ScrollView_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "ScrollView_scrollToBottomLeft(float_time,bool_attenuated,)", "contents": "scrollToBottomLeft(${1:float_time},${2:bool_attenuated})" }
,
		{ "trigger": "ScrollView_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "ScrollView_getClippingType()", "contents": "getClippingType()" }
,
		{ "trigger": "ScrollView_removeAllChildren()", "contents": "removeAllChildren()" }
,
		{ "trigger": "ScrollView_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "ScrollView_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "ScrollView_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "ScrollView_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "ScrollView_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "ScrollView_setInertiaScrollEnabled(bool_enabled,)", "contents": "setInertiaScrollEnabled(${1:bool_enabled})" }
,
		{ "trigger": "ScrollView_setFocused(bool_fucosed,)", "contents": "setFocused(${1:bool_fucosed})" }
,
		{ "trigger": "ScrollView_executeScriptEvent(int_eventName,)", "contents": "executeScriptEvent(${1:int_eventName})" }
,
		{ "trigger": "ScrollView_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "ScrollView_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "ScrollView_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "ScrollView_jumpToLeft()", "contents": "jumpToLeft()" }
,
		{ "trigger": "ScrollView_jumpToRight()", "contents": "jumpToRight()" }
,
		{ "trigger": "ScrollView_isFlipY()", "contents": "isFlipY()" }
,
		{ "trigger": "ScrollView_getTag()", "contents": "getTag()" }
,
		{ "trigger": "ScrollView_setBrightStyle(BrightStyle_style,)", "contents": "setBrightStyle(${1:BrightStyle_style})" }
,
		{ "trigger": "ScrollView_jumpToTopLeft()", "contents": "jumpToTopLeft()" }
,
		{ "trigger": "ScrollView_getBackGroundColorType()", "contents": "getBackGroundColorType()" }
,
		{ "trigger": "ScrollView_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "ScrollView_setPositionType(PositionType_type,)", "contents": "setPositionType(${1:PositionType_type})" }
,
		{ "trigger": "ScrollView_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "ScrollView_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "ScrollView_updateSizeAndPosition(const_CCSize&_parentSize,)", "contents": "updateSizeAndPosition(${1:const_CCSize&_parentSize})" }
,
		{ "trigger": "ScrollView_setBackGroundColorVector(const_CCPoint_&vector,)", "contents": "setBackGroundColorVector(${1:const_CCPoint_&vector})" }
,
		{ "trigger": "ScrollView_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "ScrollView_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "ScrollView_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "ScrollView_scrollToTopLeft(float_time,bool_attenuated,)", "contents": "scrollToTopLeft(${1:float_time},${2:bool_attenuated})" }
,
		{ "trigger": "ScrollView_setLayoutParameter(LayoutParameter*_parameter,)", "contents": "setLayoutParameter(${1:LayoutParameter*_parameter})" }
,
		{ "trigger": "ScrollView_getColor()", "contents": "getColor()" }
,
		{ "trigger": "ScrollView_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "ScrollView_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "ScrollView_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "ScrollView_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "ScrollView_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "ScrollView_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "ScrollView_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "ScrollView_isClippingEnabled()", "contents": "isClippingEnabled()" }
,
		{ "trigger": "ScrollView_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "ScrollView_removeNodeByTag(int_tag,)", "contents": "removeNodeByTag(${1:int_tag})" }
,
		{ "trigger": "ScrollView_setPositionPercent(const_CCPoint_&percent,)", "contents": "setPositionPercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "ScrollView_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "ScrollView_copy()", "contents": "copy()" }
,
		{ "trigger": "ScrollView_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "ScrollView_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "ScrollView_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "ScrollView_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "ScrollView_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "ScrollView_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "ScrollView_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "ScrollView_getTouchMovePos()", "contents": "getTouchMovePos()" }
,
		{ "trigger": "ScrollView_getTouchStartPos()", "contents": "getTouchStartPos()" }
,
		{ "trigger": "ScrollView_removeBackGroundImage()", "contents": "removeBackGroundImage()" }
,
		{ "trigger": "ScrollView_hitTest(const_CCPoint_&pt,)", "contents": "hitTest(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "ScrollView_clippingParentAreaContainPoint(const_CCPoint_&pt,)", "contents": "clippingParentAreaContainPoint(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "ScrollView_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "ScrollView_getBackGroundImageCapInsets()", "contents": "getBackGroundImageCapInsets()" }
,
		{ "trigger": "ScrollView_sortAllChildren()", "contents": "sortAllChildren()" }
,
		{ "trigger": "ScrollView_getSizePercent()", "contents": "getSizePercent()" }
,
		{ "trigger": "ScrollView_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "ScrollView_updateSizeAndPosition()", "contents": "updateSizeAndPosition()" }
,
		{ "trigger": "ScrollView_isFlipX()", "contents": "isFlipX()" }
,
		{ "trigger": "ScrollView_getParent()", "contents": "getParent()" }
,
		{ "trigger": "ScrollView_setName(const_char*_name,)", "contents": "setName(${1:const_char*_name})" }
,
		{ "trigger": "ScrollView_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "ScrollView_transform()", "contents": "transform()" }
,
		{ "trigger": "ScrollView_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "ScrollView_isFocused()", "contents": "isFocused()" }
,
		{ "trigger": "ScrollView_retain()", "contents": "retain()" }
,
		{ "trigger": "ScrollView_setSoundEff(std::string_eff,)", "contents": "setSoundEff(${1:std::string_eff})" }
,
		{ "trigger": "ScrollView_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "ScrollView_getSizeType()", "contents": "getSizeType()" }
,
		{ "trigger": "ScrollView_visit()", "contents": "visit()" }
,
		{ "trigger": "ScrollView_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "ScrollView_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "ScrollView_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "ScrollView_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "ScrollView_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "ScrollView_addNode(CCNode*_node,int_zOrder,int_tag,)", "contents": "addNode(${1:CCNode*_node},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "ScrollView_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "ScrollView_isClippingChange(bool_change,)", "contents": "isClippingChange(${1:bool_change})" }
,
		{ "trigger": "ScrollView_getActionTag()", "contents": "getActionTag()" }
,
		{ "trigger": "ScrollView_release()", "contents": "release()" }
,
		{ "trigger": "ScrollView_setActionTag(int_tag,)", "contents": "setActionTag(${1:int_tag})" }
,
		{ "trigger": "ScrollView_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "ScrollView_setFlipX(bool_flipX,)", "contents": "setFlipX(${1:bool_flipX})" }
,
		{ "trigger": "ScrollView_scrollToPercentHorizontal(float_percent,float_time,bool_attenuated,)", "contents": "scrollToPercentHorizontal(${1:float_percent},${2:float_time},${3:bool_attenuated})" }
,
		{ "trigger": "ScrollView_removeNode(CCNode*_node,)", "contents": "removeNode(${1:CCNode*_node})" }
,
		{ "trigger": "ScrollView_removeFromParent()", "contents": "removeFromParent()" }
,
		{ "trigger": "ScrollView_scrollToLeft(float_time,bool_attenuated,)", "contents": "scrollToLeft(${1:float_time},${2:bool_attenuated})" }
,
		{ "trigger": "ScrollView_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "ScrollView_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "ScrollView_getDirection()", "contents": "getDirection()" }
,
		{ "trigger": "ScrollView_isIgnoreContentAdaptWithSize()", "contents": "isIgnoreContentAdaptWithSize()" }
,
		{ "trigger": "ScrollView_getLeftInParent()", "contents": "getLeftInParent()" }
,
		{ "trigger": "ScrollView_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "ScrollView_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "ScrollView_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "ScrollView_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "ScrollView_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "ScrollView_setClippingType(LayoutClippingType_type,)", "contents": "setClippingType(${1:LayoutClippingType_type})" }
,
		{ "trigger": "ScrollView_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "ScrollView_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "ScrollView_jumpToBottom()", "contents": "jumpToBottom()" }
,
		{ "trigger": "ScrollView_setBackGroundImageScale9Enabled(bool_enabled,)", "contents": "setBackGroundImageScale9Enabled(${1:bool_enabled})" }
,
		{ "trigger": "ScrollView_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "ScrollView_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "ScrollView_getScale()", "contents": "getScale()" }
,
		{ "trigger": "ScrollView_setBounceEnabled(bool_enabled,)", "contents": "setBounceEnabled(${1:bool_enabled})" }
,
		{ "trigger": "ScrollView_checkChildInfo(int_handleState,Widget*_sender,const_CCPoint_&touchPoint,)", "contents": "checkChildInfo(${1:int_handleState},${2:Widget*_sender},${3:const_CCPoint_&touchPoint})" }
,
		{ "trigger": "ScrollView_addNode(CCNode*_node,)", "contents": "addNode(${1:CCNode*_node})" }
,
		{ "trigger": "ScrollView_onExit()", "contents": "onExit()" }
,
		{ "trigger": "ScrollView_scrollToTopRight(float_time,bool_attenuated,)", "contents": "scrollToTopRight(${1:float_time},${2:bool_attenuated})" }
,
		{ "trigger": "ScrollView_getBackGroundImageOpacity()", "contents": "getBackGroundImageOpacity()" }
,
		{ "trigger": "ScrollView_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "ScrollView_getBackGroundImageColor()", "contents": "getBackGroundImageColor()" }
,
		{ "trigger": "ScrollView_setClippingEnabled(bool_enabled,)", "contents": "setClippingEnabled(${1:bool_enabled})" }
,
		{ "trigger": "ScrollView_getWorldPosition()", "contents": "getWorldPosition()" }
,
		{ "trigger": "ScrollView_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "ScrollView_onEnter()", "contents": "onEnter()" }
,
		{ "trigger": "ScrollView_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "ScrollView_getLayoutType()", "contents": "getLayoutType()" }
,
		{ "trigger": "ScrollView_onTouchCancelled(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchCancelled(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "ScrollView_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "ScrollView_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "ScrollView_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "ScrollView_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "ScrollView_description()", "contents": "description()" }
,
		{ "trigger": "ScrollView_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "ScrollView_didNotSelectSelf()", "contents": "didNotSelectSelf()" }
,
		{ "trigger": "ScrollView_setBackGroundColor(const_ccColor3B_&startColor,const_ccColor3B_&endColor,)", "contents": "setBackGroundColor(${1:const_ccColor3B_&startColor},${2:const_ccColor3B_&endColor})" }
,
		{ "trigger": "ScrollView_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "ScrollView_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "ScrollView_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "ScrollView_getInnerContainer()", "contents": "getInnerContainer()" }
,
		{ "trigger": "ScrollView_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "ScrollView_addChild(CCNode*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "ScrollView_create()", "contents": "ScrollView:create()" }
,

		{ "trigger": "CCArmatureDataManager_copy()", "contents": "copy()" }
,
		{ "trigger": "CCArmatureDataManager_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCArmatureDataManager_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCArmatureDataManager_addSpriteFrameFromFile(const_char_*plistPath,const_char_*imagePath,const_char_*configFilePath,)", "contents": "addSpriteFrameFromFile(${1:const_char_*plistPath},${2:const_char_*imagePath},${3:const_char_*configFilePath})" }
,
		{ "trigger": "CCArmatureDataManager_addArmatureFileInfo(const_char_*configFilePath,)", "contents": "addArmatureFileInfo(${1:const_char_*configFilePath})" }
,
		{ "trigger": "CCArmatureDataManager_release()", "contents": "release()" }
,
		{ "trigger": "CCArmatureDataManager_removeArmatureFileInfo(const_char_*configFilePath,)", "contents": "removeArmatureFileInfo(${1:const_char_*configFilePath})" }
,
		{ "trigger": "CCArmatureDataManager_isAutoLoadSpriteFile()", "contents": "isAutoLoadSpriteFile()" }
,
		{ "trigger": "CCArmatureDataManager_addArmatureFileInfo(const_char_*imagePath,const_char_*plistPath,const_char_*configFilePath,)", "contents": "addArmatureFileInfo(${1:const_char_*imagePath},${2:const_char_*plistPath},${3:const_char_*configFilePath})" }
,
		{ "trigger": "CCArmatureDataManager_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCArmatureDataManager_init()", "contents": "init()" }
,
		{ "trigger": "CCArmatureDataManager_retain()", "contents": "retain()" }
,
		{ "trigger": "CCArmatureDataManager_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCArmatureDataManager_purge()", "contents": "CCArmatureDataManager:purge()" }
,
		{ "trigger": "CCArmatureDataManager_sharedArmatureDataManager()", "contents": "CCArmatureDataManager:sharedArmatureDataManager()" }
,

		{ "trigger": "CCStopGrid_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCStopGrid_copy()", "contents": "copy()" }
,
		{ "trigger": "CCStopGrid_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCStopGrid_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCStopGrid_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCStopGrid_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCStopGrid_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCStopGrid_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCStopGrid_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCStopGrid_release()", "contents": "release()" }
,
		{ "trigger": "CCStopGrid_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCStopGrid_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCStopGrid_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCStopGrid_retain()", "contents": "retain()" }
,
		{ "trigger": "CCStopGrid_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCStopGrid_create()", "contents": "CCStopGrid:create()" }
,

		{ "trigger": "CCScheduler_copy()", "contents": "copy()" }
,
		{ "trigger": "CCScheduler_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCScheduler_scheduleScriptFunc(LUA_FUNCTION_funcID,float_fInterval,bool_bPaused,)", "contents": "scheduleScriptFunc(${1:LUA_FUNCTION_funcID},${2:float_fInterval},${3:bool_bPaused})" }
,
		{ "trigger": "CCScheduler_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCScheduler_getTimeScale()", "contents": "getTimeScale()" }
,
		{ "trigger": "CCScheduler_setTimeScale(float_fTimeScale,)", "contents": "setTimeScale(${1:float_fTimeScale})" }
,
		{ "trigger": "CCScheduler_unscheduleAll()", "contents": "unscheduleAll()" }
,
		{ "trigger": "CCScheduler_release()", "contents": "release()" }
,
		{ "trigger": "CCScheduler_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCScheduler_unscheduleScriptEntry(unsigned_int_uScheduleScriptEntryID,)", "contents": "unscheduleScriptEntry(${1:unsigned_int_uScheduleScriptEntryID})" }
,
		{ "trigger": "CCScheduler_retain()", "contents": "retain()" }
,
		{ "trigger": "CCScheduler_isSingleReference()", "contents": "isSingleReference()" }
,

		{ "trigger": "CCMenuItem_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCMenuItem_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCMenuItem_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCMenuItem_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCMenuItem_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCMenuItem_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCMenuItem_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCMenuItem_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCMenuItem_init()", "contents": "init()" }
,
		{ "trigger": "CCMenuItem_draw()", "contents": "draw()" }
,
		{ "trigger": "CCMenuItem_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCMenuItem_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCMenuItem_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCMenuItem_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCMenuItem_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCMenuItem_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCMenuItem_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCMenuItem_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItem_visit()", "contents": "visit()" }
,
		{ "trigger": "CCMenuItem_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCMenuItem_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItem_activate()", "contents": "activate()" }
,
		{ "trigger": "CCMenuItem_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItem_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCMenuItem_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItem_unregisterScriptTapHandler()", "contents": "unregisterScriptTapHandler()" }
,
		{ "trigger": "CCMenuItem_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCMenuItem_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCMenuItem_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItem_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCMenuItem_registerScriptTapHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptTapHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItem_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCMenuItem_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCMenuItem_selected()", "contents": "selected()" }
,
		{ "trigger": "CCMenuItem_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItem_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItem_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItem_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCMenuItem_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCMenuItem_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCMenuItem_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCMenuItem_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCMenuItem_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCMenuItem_isSelected()", "contents": "isSelected()" }
,
		{ "trigger": "CCMenuItem_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCMenuItem_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCMenuItem_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCMenuItem_unselected()", "contents": "unselected()" }
,
		{ "trigger": "CCMenuItem_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCMenuItem_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCMenuItem_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItem_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCMenuItem_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCMenuItem_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCMenuItem_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCMenuItem_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItem_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCMenuItem_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCMenuItem_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCMenuItem_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItem_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItem_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItem_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCMenuItem_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCMenuItem_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCMenuItem_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCMenuItem_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCMenuItem_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCMenuItem_retain()", "contents": "retain()" }
,
		{ "trigger": "CCMenuItem_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItem_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCMenuItem_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCMenuItem_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCMenuItem_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCMenuItem_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCMenuItem_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCMenuItem_rect()", "contents": "rect()" }
,
		{ "trigger": "CCMenuItem_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCMenuItem_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCMenuItem_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCMenuItem_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCMenuItem_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCMenuItem_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCMenuItem_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCMenuItem_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItem_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCMenuItem_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCMenuItem_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCMenuItem_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCMenuItem_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCMenuItem_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCMenuItem_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCMenuItem_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCMenuItem_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCMenuItem_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItem_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCMenuItem_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCMenuItem_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCMenuItem_transform()", "contents": "transform()" }
,
		{ "trigger": "CCMenuItem_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItem_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCMenuItem_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCMenuItem_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCMenuItem_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCMenuItem_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCMenuItem_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCMenuItem_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItem_release()", "contents": "release()" }
,
		{ "trigger": "CCMenuItem_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItem_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItem_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItem_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCMenuItem_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCMenuItem_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCMenuItem_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCMenuItem_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCMenuItem_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCMenuItem_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCMenuItem_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCMenuItem_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCMenuItem_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCMenuItem_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItem_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCMenuItem_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCMenuItem_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCMenuItem_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCMenuItem_copy()", "contents": "copy()" }
,
		{ "trigger": "CCMenuItem_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCMenuItem_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCMenuItem_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "CCMenuItem_description()", "contents": "description()" }
,
		{ "trigger": "CCMenuItem_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCMenuItem_autorelease()", "contents": "autorelease()" }
,

		{ "trigger": "CCLabelBMFont_getDescendants()", "contents": "getDescendants()" }
,
		{ "trigger": "CCLabelBMFont_lowestAtlasIndexInChild(CCSprite_*sprite,)", "contents": "lowestAtlasIndexInChild(${1:CCSprite_*sprite})" }
,
		{ "trigger": "CCLabelBMFont_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCLabelBMFont_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCLabelBMFont_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCLabelBMFont_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCLabelBMFont_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCLabelBMFont_setWidth(float_width,)", "contents": "setWidth(${1:float_width})" }
,
		{ "trigger": "CCLabelBMFont_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCLabelBMFont_init()", "contents": "init()" }
,
		{ "trigger": "CCLabelBMFont_draw()", "contents": "draw()" }
,
		{ "trigger": "CCLabelBMFont_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCLabelBMFont_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCLabelBMFont_setBlendFunc(ccBlendFunc_blendFunc,)", "contents": "setBlendFunc(${1:ccBlendFunc_blendFunc})" }
,
		{ "trigger": "CCLabelBMFont_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCLabelBMFont_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCLabelBMFont_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLabelBMFont_setLineBreakWithoutSpace(bool_breakWithoutSpace,)", "contents": "setLineBreakWithoutSpace(${1:bool_breakWithoutSpace})" }
,
		{ "trigger": "CCLabelBMFont_visit()", "contents": "visit()" }
,
		{ "trigger": "CCLabelBMFont_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCLabelBMFont_getString()", "contents": "getString()" }
,
		{ "trigger": "CCLabelBMFont_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCLabelBMFont_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLabelBMFont_setOpacityModifyRGB(bool_isOpacityModifyRGB,)", "contents": "setOpacityModifyRGB(${1:bool_isOpacityModifyRGB})" }
,
		{ "trigger": "CCLabelBMFont_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCLabelBMFont_removeChildAtIndex(unsigned_int_index,bool_doCleanup,)", "contents": "removeChildAtIndex(${1:unsigned_int_index},${2:bool_doCleanup})" }
,
		{ "trigger": "CCLabelBMFont_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCLabelBMFont_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCLabelBMFont_transform()", "contents": "transform()" }
,
		{ "trigger": "CCLabelBMFont_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCLabelBMFont_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLabelBMFont_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCLabelBMFont_setScaleX(float_scaleX,)", "contents": "setScaleX(${1:float_scaleX})" }
,
		{ "trigger": "CCLabelBMFont_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCLabelBMFont_removeSpriteFromAtlas(CCSprite_*sprite,)", "contents": "removeSpriteFromAtlas(${1:CCSprite_*sprite})" }
,
		{ "trigger": "CCLabelBMFont_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLabelBMFont_reorderBatch(bool_reorder,)", "contents": "reorderBatch(${1:bool_reorder})" }
,
		{ "trigger": "CCLabelBMFont_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCLabelBMFont_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLabelBMFont_increaseAtlasCapacity()", "contents": "increaseAtlasCapacity()" }
,
		{ "trigger": "CCLabelBMFont_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCLabelBMFont_setFntFile(const_char*_fntFile,)", "contents": "setFntFile(${1:const_char*_fntFile})" }
,
		{ "trigger": "CCLabelBMFont_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCLabelBMFont_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCLabelBMFont_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCLabelBMFont_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCLabelBMFont_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCLabelBMFont_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCLabelBMFont_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCLabelBMFont_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCLabelBMFont_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLabelBMFont_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCLabelBMFont_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCLabelBMFont_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLabelBMFont_getTextureAtlas()", "contents": "getTextureAtlas()" }
,
		{ "trigger": "CCLabelBMFont_setTextureAtlas(CCTextureAtlas*_textureAtlas,)", "contents": "setTextureAtlas(${1:CCTextureAtlas*_textureAtlas})" }
,
		{ "trigger": "CCLabelBMFont_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCLabelBMFont_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCLabelBMFont_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCLabelBMFont_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCLabelBMFont_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLabelBMFont_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLabelBMFont_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLabelBMFont_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCLabelBMFont_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCLabelBMFont_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCLabelBMFont_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCLabelBMFont_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCLabelBMFont_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCLabelBMFont_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCLabelBMFont_retain()", "contents": "retain()" }
,
		{ "trigger": "CCLabelBMFont_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLabelBMFont_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCLabelBMFont_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCLabelBMFont_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCLabelBMFont_atlasIndexForChild(CCSprite_*sprite,int_z,)", "contents": "atlasIndexForChild(${1:CCSprite_*sprite},${2:int_z})" }
,
		{ "trigger": "CCLabelBMFont_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCLabelBMFont_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCLabelBMFont_setCString(const_char_*label,)", "contents": "setCString(${1:const_char_*label})" }
,
		{ "trigger": "CCLabelBMFont_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCLabelBMFont_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCLabelBMFont_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCLabelBMFont_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCLabelBMFont_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCLabelBMFont_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCLabelBMFont_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCLabelBMFont_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCLabelBMFont_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCLabelBMFont_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCLabelBMFont_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCLabelBMFont_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCLabelBMFont_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCLabelBMFont_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCLabelBMFont_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCLabelBMFont_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCLabelBMFont_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCLabelBMFont_sortAllChildren()", "contents": "sortAllChildren()" }
,
		{ "trigger": "CCLabelBMFont_getFntFile()", "contents": "getFntFile()" }
,
		{ "trigger": "CCLabelBMFont_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCLabelBMFont_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCLabelBMFont_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCLabelBMFont_rebuildIndexInOrder(CCSprite_*parent,unsigned_int_index,)", "contents": "rebuildIndexInOrder(${1:CCSprite_*parent},${2:unsigned_int_index})" }
,
		{ "trigger": "CCLabelBMFont_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCLabelBMFont_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLabelBMFont_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCLabelBMFont_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCLabelBMFont_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCLabelBMFont_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCLabelBMFont_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCLabelBMFont_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLabelBMFont_release()", "contents": "release()" }
,
		{ "trigger": "CCLabelBMFont_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLabelBMFont_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCLabelBMFont_setTexture(CCTexture2D_*texture,)", "contents": "setTexture(${1:CCTexture2D_*texture})" }
,
		{ "trigger": "CCLabelBMFont_setAlignment(CCTextAlignment_alignment,)", "contents": "setAlignment(${1:CCTextAlignment_alignment})" }
,
		{ "trigger": "CCLabelBMFont_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLabelBMFont_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCLabelBMFont_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCLabelBMFont_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCLabelBMFont_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCLabelBMFont_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCLabelBMFont_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCLabelBMFont_insertChild(CCSprite_*child,unsigned_int_index,)", "contents": "insertChild(${1:CCSprite_*child},${2:unsigned_int_index})" }
,
		{ "trigger": "CCLabelBMFont_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCLabelBMFont_appendChild(CCSprite_*child,)", "contents": "appendChild(${1:CCSprite_*child})" }
,
		{ "trigger": "CCLabelBMFont_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCLabelBMFont_setScaleY(float_scaleY,)", "contents": "setScaleY(${1:float_scaleY})" }
,
		{ "trigger": "CCLabelBMFont_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLabelBMFont_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCLabelBMFont_highestAtlasIndexInChild(CCSprite_*sprite,)", "contents": "highestAtlasIndexInChild(${1:CCSprite_*sprite})" }
,
		{ "trigger": "CCLabelBMFont_copy()", "contents": "copy()" }
,
		{ "trigger": "CCLabelBMFont_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCLabelBMFont_setString(const_char_*label,bool_fromUpdate,)", "contents": "setString(${1:const_char_*label},${2:bool_fromUpdate})" }
,
		{ "trigger": "CCLabelBMFont_description()", "contents": "description()" }
,
		{ "trigger": "CCLabelBMFont_setString(const_char_*label,)", "contents": "setString(${1:const_char_*label})" }
,
		{ "trigger": "CCLabelBMFont_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCLabelBMFont_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCLabelBMFont_create()", "contents": "CCLabelBMFont:create()" }
,
		{ "trigger": "CCLabelBMFont_create(const_char_*str,const_char_*fntFile,float_width_=_kCCLabelAutomaticWidth,CCTextAlignment_alignment_=_kCCTextAlignmentLeft,CCPoint_imageOffset_=_CCPointMake(0,0,)", "contents": "CCLabelBMFont:create(${1:const_char_*str},${2:const_char_*fntFile},${3:float_width_=_kCCLabelAutomaticWidth},${4:CCTextAlignment_alignment_=_kCCTextAlignmentLeft},${5:CCPoint_imageOffset_=_CCPointMake(0},${6:0})" }
,
		{ "trigger": "CCLabelBMFont_purgeCachedData()", "contents": "CCLabelBMFont:purgeCachedData()" }
,

		{ "trigger": "ActionObject_updateToFrameByTime(float_fTime,)", "contents": "updateToFrameByTime(${1:float_fTime})" }
,
		{ "trigger": "ActionObject_getUnitTime()", "contents": "getUnitTime()" }
,
		{ "trigger": "ActionObject_addActionNode(ActionNode*_node,)", "contents": "addActionNode(${1:ActionNode*_node})" }
,
		{ "trigger": "ActionObject_release()", "contents": "release()" }
,
		{ "trigger": "ActionObject_retain()", "contents": "retain()" }
,
		{ "trigger": "ActionObject_getLoop()", "contents": "getLoop()" }
,
		{ "trigger": "ActionObject_getName()", "contents": "getName()" }
,
		{ "trigger": "ActionObject_isPlaying()", "contents": "isPlaying()" }
,
		{ "trigger": "ActionObject_initWithDictionary(const_rapidjson::Value&_dic,CCObject*_root,)", "contents": "initWithDictionary(${1:const_rapidjson::Value&_dic},${2:CCObject*_root})" }
,
		{ "trigger": "ActionObject_setUnitTime(float_fTime,)", "contents": "setUnitTime(${1:float_fTime})" }
,
		{ "trigger": "ActionObject_pause()", "contents": "pause()" }
,
		{ "trigger": "ActionObject_setLoop(bool_bLoop,)", "contents": "setLoop(${1:bool_bLoop})" }
,
		{ "trigger": "ActionObject_getCurrentTime()", "contents": "getCurrentTime()" }
,
		{ "trigger": "ActionObject_simulationActionUpdate(float_dt,)", "contents": "simulationActionUpdate(${1:float_dt})" }
,
		{ "trigger": "ActionObject_copy()", "contents": "copy()" }
,
		{ "trigger": "ActionObject_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "ActionObject_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "ActionObject_stop()", "contents": "stop()" }
,
		{ "trigger": "ActionObject_setCurrentTime(float_fTime,)", "contents": "setCurrentTime(${1:float_fTime})" }
,
		{ "trigger": "ActionObject_play()", "contents": "play()" }
,
		{ "trigger": "ActionObject_setName(const_char*_name,)", "contents": "setName(${1:const_char*_name})" }
,
		{ "trigger": "ActionObject_removeActionNode(ActionNode*_node,)", "contents": "removeActionNode(${1:ActionNode*_node})" }
,
		{ "trigger": "ActionObject_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "ActionObject_isSingleReference()", "contents": "isSingleReference()" }
,

		{ "trigger": "UIRelativeLayoutParameter_getRelativeToWidgetName()", "contents": "getRelativeToWidgetName()" }
,
		{ "trigger": "UIRelativeLayoutParameter_setRelativeName(const_char*_name,)", "contents": "setRelativeName(${1:const_char*_name})" }
,
		{ "trigger": "UIRelativeLayoutParameter_setRelativeToWidgetName(const_char*_name,)", "contents": "setRelativeToWidgetName(${1:const_char*_name})" }
,
		{ "trigger": "UIRelativeLayoutParameter_getAlign()", "contents": "getAlign()" }
,
		{ "trigger": "UIRelativeLayoutParameter_setAlign(UIRelativeAlign_align,)", "contents": "setAlign(${1:UIRelativeAlign_align})" }
,
		{ "trigger": "UIRelativeLayoutParameter_getRelativeName()", "contents": "getRelativeName()" }
,
		{ "trigger": "UIRelativeLayoutParameter_create()", "contents": "UIRelativeLayoutParameter:create()" }
,

		{ "trigger": "ImageView_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "ImageView_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "ImageView_getBottomInParent()", "contents": "getBottomInParent()" }
,
		{ "trigger": "ImageView_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "ImageView_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "ImageView_getVirtualRenderer()", "contents": "getVirtualRenderer()" }
,
		{ "trigger": "ImageView_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "ImageView_draw()", "contents": "draw()" }
,
		{ "trigger": "ImageView_getNodes()", "contents": "getNodes()" }
,
		{ "trigger": "ImageView_setScale9Enabled(bool_able,)", "contents": "setScale9Enabled(${1:bool_able})" }
,
		{ "trigger": "ImageView_isBright()", "contents": "isBright()" }
,
		{ "trigger": "ImageView_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "ImageView_getLayoutParameter(LayoutParameterType_type,)", "contents": "getLayoutParameter(${1:LayoutParameterType_type})" }
,
		{ "trigger": "ImageView_ignoreContentAdaptWithSize(bool_ignore,)", "contents": "ignoreContentAdaptWithSize(${1:bool_ignore})" }
,
		{ "trigger": "ImageView_onTouchBegan(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchBegan(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "ImageView_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "ImageView_loadTexture(const_char*_fileName,TextureResType_texType_=_UI_TEX_TYPE_LOCAL,)", "contents": "loadTexture(${1:const_char*_fileName},${2:TextureResType_texType_=_UI_TEX_TYPE_LOCAL})" }
,
		{ "trigger": "ImageView_getSize()", "contents": "getSize()" }
,
		{ "trigger": "ImageView_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "ImageView_getLayoutSize()", "contents": "getLayoutSize()" }
,
		{ "trigger": "ImageView_visit()", "contents": "visit()" }
,
		{ "trigger": "ImageView_getTopInParent()", "contents": "getTopInParent()" }
,
		{ "trigger": "ImageView_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "ImageView_disable()", "contents": "disable()" }
,
		{ "trigger": "ImageView_didNotSelectSelf()", "contents": "didNotSelectSelf()" }
,
		{ "trigger": "ImageView_setSizeType(SizeType_type,)", "contents": "setSizeType(${1:SizeType_type})" }
,
		{ "trigger": "ImageView_getNodeByTag(int_tag,)", "contents": "getNodeByTag(${1:int_tag})" }
,
		{ "trigger": "ImageView_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "ImageView_getPositionPercent()", "contents": "getPositionPercent()" }
,
		{ "trigger": "ImageView_setPosition(const_CCPoint_&pos,)", "contents": "setPosition(${1:const_CCPoint_&pos})" }
,
		{ "trigger": "ImageView_setFlipY(bool_flipY,)", "contents": "setFlipY(${1:bool_flipY})" }
,
		{ "trigger": "ImageView_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "ImageView_setSize(const_CCSize_&size,)", "contents": "setSize(${1:const_CCSize_&size})" }
,
		{ "trigger": "ImageView_clone()", "contents": "clone()" }
,
		{ "trigger": "ImageView_onTouchEnded(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchEnded(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "ImageView_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "ImageView_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "ImageView_getTouchEndPos()", "contents": "getTouchEndPos()" }
,
		{ "trigger": "ImageView_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "ImageView_onTouchMoved(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchMoved(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "ImageView_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "ImageView_setCapInsets(const_CCRect_&capInsets,)", "contents": "setCapInsets(${1:const_CCRect_&capInsets})" }
,
		{ "trigger": "ImageView_setTouchEnable(bool_enabled,bool_containChildren_=_false,)", "contents": "setTouchEnable(${1:bool_enabled},${2:bool_containChildren_=_false})" }
,
		{ "trigger": "ImageView_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "ImageView_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "ImageView_addNode(CCNode_*_node,int_zOrder,)", "contents": "addNode(${1:CCNode_*_node},${2:int_zOrder})" }
,
		{ "trigger": "ImageView_removeAllNodes()", "contents": "removeAllNodes()" }
,
		{ "trigger": "ImageView_getWidgetByTag(int_tag,)", "contents": "getWidgetByTag(${1:int_tag})" }
,
		{ "trigger": "ImageView_getChildByName(const_char*_name,)", "contents": "getChildByName(${1:const_char*_name})" }
,
		{ "trigger": "ImageView_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "ImageView_setAnchorPoint(const_CCPoint_&pt,)", "contents": "setAnchorPoint(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "ImageView_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "ImageView_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "ImageView_getCustomSize()", "contents": "getCustomSize()" }
,
		{ "trigger": "ImageView_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "ImageView_getRightInParent()", "contents": "getRightInParent()" }
,
		{ "trigger": "ImageView_getDescription()", "contents": "getDescription()" }
,
		{ "trigger": "ImageView_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "ImageView_getRect()", "contents": "getRect()" }
,
		{ "trigger": "ImageView_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "ImageView_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "ImageView_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "ImageView_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "ImageView_getName()", "contents": "getName()" }
,
		{ "trigger": "ImageView_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "ImageView_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "ImageView_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "ImageView_isFlipY()", "contents": "isFlipY()" }
,
		{ "trigger": "ImageView_setSizePercent(const_CCPoint_&percent,)", "contents": "setSizePercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "ImageView_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "ImageView_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "ImageView_addNode(CCNode*_node,)", "contents": "addNode(${1:CCNode*_node})" }
,
		{ "trigger": "ImageView_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "ImageView_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "ImageView_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "ImageView_setBright(bool_bright,)", "contents": "setBright(${1:bool_bright})" }
,
		{ "trigger": "ImageView_active()", "contents": "active()" }
,
		{ "trigger": "ImageView_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "ImageView_removeChild(CCNode*_child,)", "contents": "removeChild(${1:CCNode*_child})" }
,
		{ "trigger": "ImageView_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "ImageView_getTag()", "contents": "getTag()" }
,
		{ "trigger": "ImageView_removeAllChildren()", "contents": "removeAllChildren()" }
,
		{ "trigger": "ImageView_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "ImageView_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "ImageView_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "ImageView_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "ImageView_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "ImageView_setFocused(bool_fucosed,)", "contents": "setFocused(${1:bool_fucosed})" }
,
		{ "trigger": "ImageView_executeScriptEvent(int_eventName,)", "contents": "executeScriptEvent(${1:int_eventName})" }
,
		{ "trigger": "ImageView_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "ImageView_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "ImageView_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "ImageView_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "ImageView_setTouchEnabled(bool_enabled,)", "contents": "setTouchEnabled(${1:bool_enabled})" }
,
		{ "trigger": "ImageView_setBrightStyle(BrightStyle_style,)", "contents": "setBrightStyle(${1:BrightStyle_style})" }
,
		{ "trigger": "ImageView_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "ImageView_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "ImageView_setPositionType(PositionType_type,)", "contents": "setPositionType(${1:PositionType_type})" }
,
		{ "trigger": "ImageView_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "ImageView_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "ImageView_updateSizeAndPosition(const_CCSize&_parentSize,)", "contents": "updateSizeAndPosition(${1:const_CCSize&_parentSize})" }
,
		{ "trigger": "ImageView_setTextureRect(const_CCRect&_rect,)", "contents": "setTextureRect(${1:const_CCRect&_rect})" }
,
		{ "trigger": "ImageView_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "ImageView_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "ImageView_setLayoutParameter(LayoutParameter*_parameter,)", "contents": "setLayoutParameter(${1:LayoutParameter*_parameter})" }
,
		{ "trigger": "ImageView_getColor()", "contents": "getColor()" }
,
		{ "trigger": "ImageView_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "ImageView_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "ImageView_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "ImageView_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "ImageView_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "ImageView_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "ImageView_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "ImageView_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "ImageView_removeNodeByTag(int_tag,)", "contents": "removeNodeByTag(${1:int_tag})" }
,
		{ "trigger": "ImageView_setPositionPercent(const_CCPoint_&percent,)", "contents": "setPositionPercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "ImageView_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "ImageView_copy()", "contents": "copy()" }
,
		{ "trigger": "ImageView_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "ImageView_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "ImageView_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "ImageView_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "ImageView_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "ImageView_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "ImageView_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "ImageView_getTouchMovePos()", "contents": "getTouchMovePos()" }
,
		{ "trigger": "ImageView_getTouchStartPos()", "contents": "getTouchStartPos()" }
,
		{ "trigger": "ImageView_hitTest(const_CCPoint_&pt,)", "contents": "hitTest(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "ImageView_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "ImageView_sortAllChildren()", "contents": "sortAllChildren()" }
,
		{ "trigger": "ImageView_getSizePercent()", "contents": "getSizePercent()" }
,
		{ "trigger": "ImageView_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "ImageView_updateSizeAndPosition()", "contents": "updateSizeAndPosition()" }
,
		{ "trigger": "ImageView_isFlipX()", "contents": "isFlipX()" }
,
		{ "trigger": "ImageView_getParent()", "contents": "getParent()" }
,
		{ "trigger": "ImageView_setName(const_char*_name,)", "contents": "setName(${1:const_char*_name})" }
,
		{ "trigger": "ImageView_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "ImageView_transform()", "contents": "transform()" }
,
		{ "trigger": "ImageView_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "ImageView_isFocused()", "contents": "isFocused()" }
,
		{ "trigger": "ImageView_retain()", "contents": "retain()" }
,
		{ "trigger": "ImageView_setSoundEff(std::string_eff,)", "contents": "setSoundEff(${1:std::string_eff})" }
,
		{ "trigger": "ImageView_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "ImageView_visit()", "contents": "visit()" }
,
		{ "trigger": "ImageView_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "ImageView_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "ImageView_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "ImageView_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "ImageView_addNode(CCNode*_node,int_zOrder,int_tag,)", "contents": "addNode(${1:CCNode*_node},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "ImageView_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "ImageView_getActionTag()", "contents": "getActionTag()" }
,
		{ "trigger": "ImageView_release()", "contents": "release()" }
,
		{ "trigger": "ImageView_setFlipX(bool_flipX,)", "contents": "setFlipX(${1:bool_flipX})" }
,
		{ "trigger": "ImageView_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "ImageView_setActionTag(int_tag,)", "contents": "setActionTag(${1:int_tag})" }
,
		{ "trigger": "ImageView_checkChildInfo(int_handleState,Widget*_sender,const_CCPoint_&touchPoint,)", "contents": "checkChildInfo(${1:int_handleState},${2:Widget*_sender},${3:const_CCPoint_&touchPoint})" }
,
		{ "trigger": "ImageView_removeFromParent()", "contents": "removeFromParent()" }
,
		{ "trigger": "ImageView_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "ImageView_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "ImageView_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "ImageView_isIgnoreContentAdaptWithSize()", "contents": "isIgnoreContentAdaptWithSize()" }
,
		{ "trigger": "ImageView_getLeftInParent()", "contents": "getLeftInParent()" }
,
		{ "trigger": "ImageView_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "ImageView_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "ImageView_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "ImageView_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "ImageView_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "ImageView_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "ImageView_getScale()", "contents": "getScale()" }
,
		{ "trigger": "ImageView_removeNode(CCNode*_node,)", "contents": "removeNode(${1:CCNode*_node})" }
,
		{ "trigger": "ImageView_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "ImageView_onExit()", "contents": "onExit()" }
,
		{ "trigger": "ImageView_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "ImageView_getWorldPosition()", "contents": "getWorldPosition()" }
,
		{ "trigger": "ImageView_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "ImageView_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "ImageView_clippingParentAreaContainPoint(const_CCPoint_&pt,)", "contents": "clippingParentAreaContainPoint(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "ImageView_onTouchCancelled(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchCancelled(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "ImageView_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "ImageView_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "ImageView_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "ImageView_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "ImageView_description()", "contents": "description()" }
,
		{ "trigger": "ImageView_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "ImageView_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "ImageView_getWidgetType()", "contents": "getWidgetType()" }
,
		{ "trigger": "ImageView_getSizeType()", "contents": "getSizeType()" }
,
		{ "trigger": "ImageView_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "ImageView_onEnter()", "contents": "onEnter()" }
,
		{ "trigger": "ImageView_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "ImageView_addChild(CCNode*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "ImageView_create()", "contents": "ImageView:create()" }
,

		{ "trigger": "CCTransitionMoveInB_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTransitionMoveInB_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTransitionMoveInB_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTransitionMoveInB_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTransitionMoveInB_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTransitionMoveInB_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTransitionMoveInB_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTransitionMoveInB_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTransitionMoveInB_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCTransitionMoveInB_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCTransitionMoveInB_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionMoveInB_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTransitionMoveInB_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTransitionMoveInB_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionMoveInB_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionMoveInB_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTransitionMoveInB_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionMoveInB_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTransitionMoveInB_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCTransitionMoveInB_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionMoveInB_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTransitionMoveInB_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionMoveInB_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTransitionMoveInB_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionMoveInB_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTransitionMoveInB_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTransitionMoveInB_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCTransitionMoveInB_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTransitionMoveInB_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTransitionMoveInB_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTransitionMoveInB_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTransitionMoveInB_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTransitionMoveInB_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTransitionMoveInB_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionMoveInB_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTransitionMoveInB_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTransitionMoveInB_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionMoveInB_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTransitionMoveInB_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTransitionMoveInB_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTransitionMoveInB_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTransitionMoveInB_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionMoveInB_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionMoveInB_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionMoveInB_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTransitionMoveInB_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTransitionMoveInB_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTransitionMoveInB_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTransitionMoveInB_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTransitionMoveInB_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTransitionMoveInB_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTransitionMoveInB_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionMoveInB_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTransitionMoveInB_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTransitionMoveInB_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTransitionMoveInB_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTransitionMoveInB_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTransitionMoveInB_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTransitionMoveInB_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTransitionMoveInB_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTransitionMoveInB_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTransitionMoveInB_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionMoveInB_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTransitionMoveInB_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTransitionMoveInB_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTransitionMoveInB_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTransitionMoveInB_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTransitionMoveInB_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTransitionMoveInB_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTransitionMoveInB_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTransitionMoveInB_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionMoveInB_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTransitionMoveInB_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTransitionMoveInB_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTransitionMoveInB_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTransitionMoveInB_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionMoveInB_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTransitionMoveInB_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTransitionMoveInB_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTransitionMoveInB_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTransitionMoveInB_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTransitionMoveInB_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionMoveInB_release()", "contents": "release()" }
,
		{ "trigger": "CCTransitionMoveInB_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionMoveInB_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionMoveInB_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionMoveInB_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTransitionMoveInB_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTransitionMoveInB_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTransitionMoveInB_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCTransitionMoveInB_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTransitionMoveInB_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTransitionMoveInB_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTransitionMoveInB_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTransitionMoveInB_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionMoveInB_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTransitionMoveInB_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTransitionMoveInB_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTransitionMoveInB_description()", "contents": "description()" }
,
		{ "trigger": "CCTransitionMoveInB_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTransitionMoveInB_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTransitionMoveInB_create(float_t,CCScene*_scene,)", "contents": "CCTransitionMoveInB:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCParticleSmoke_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleSmoke_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleSmoke_setStartSizeVar(float_size,)", "contents": "setStartSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleSmoke_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleSmoke_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleSmoke_getRadialAccelVar()", "contents": "getRadialAccelVar()" }
,
		{ "trigger": "CCParticleSmoke_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleSmoke_setStartRadiusVar(float_startRadiusVar,)", "contents": "setStartRadiusVar(${1:float_startRadiusVar})" }
,
		{ "trigger": "CCParticleSmoke_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleSmoke_setTexture(CCTexture2D*_var,)", "contents": "setTexture(${1:CCTexture2D*_var})" }
,
		{ "trigger": "CCParticleSmoke_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleSmoke_isAutoRemoveOnFinish()", "contents": "isAutoRemoveOnFinish()" }
,
		{ "trigger": "CCParticleSmoke_getTotalParticles()", "contents": "getTotalParticles()" }
,
		{ "trigger": "CCParticleSmoke_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleSmoke_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleSmoke_setPositionType(tCCPositionType_type,)", "contents": "setPositionType(${1:tCCPositionType_type})" }
,
		{ "trigger": "CCParticleSmoke_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCParticleSmoke_setDisplayFrame(CCSpriteFrame*_spriteFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame*_spriteFrame})" }
,
		{ "trigger": "CCParticleSmoke_getSourcePosition()", "contents": "getSourcePosition()" }
,
		{ "trigger": "CCParticleSmoke_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleSmoke_setBlendAdditive(bool_value,)", "contents": "setBlendAdditive(${1:bool_value})" }
,
		{ "trigger": "CCParticleSmoke_setGravity(const_CCPoint&_g,)", "contents": "setGravity(${1:const_CCPoint&_g})" }
,
		{ "trigger": "CCParticleSmoke_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSmoke_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleSmoke_stopSystem()", "contents": "stopSystem()" }
,
		{ "trigger": "CCParticleSmoke_setLifeVar(float_lifeVar,)", "contents": "setLifeVar(${1:float_lifeVar})" }
,
		{ "trigger": "CCParticleSmoke_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleSmoke_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleSmoke_setPosVar(CCPoint_pos,)", "contents": "setPosVar(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSmoke_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleSmoke_setEmissionRate(float_rate,)", "contents": "setEmissionRate(${1:float_rate})" }
,
		{ "trigger": "CCParticleSmoke_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCParticleSmoke_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleSmoke_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleSmoke_getEndColorVar()", "contents": "getEndColorVar()" }
,
		{ "trigger": "CCParticleSmoke_getEndSize()", "contents": "getEndSize()" }
,
		{ "trigger": "CCParticleSmoke_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleSmoke_setEndRadiusVar(float_endRadiusVar,)", "contents": "setEndRadiusVar(${1:float_endRadiusVar})" }
,
		{ "trigger": "CCParticleSmoke_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleSmoke_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleSmoke_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleSmoke_setEndColorVar(const_ccColor4F_var,)", "contents": "setEndColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSmoke_getEndSpin()", "contents": "getEndSpin()" }
,
		{ "trigger": "CCParticleSmoke_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleSmoke_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCParticleSmoke_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleSmoke_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCParticleSmoke_setDuration(float_d,)", "contents": "setDuration(${1:float_d})" }
,
		{ "trigger": "CCParticleSmoke_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleSmoke_setStartSpinVar(float_var,)", "contents": "setStartSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleSmoke_getEmitterMode()", "contents": "getEmitterMode()" }
,
		{ "trigger": "CCParticleSmoke_updateQuadWithParticle(tCCParticle*_particle,const_CCPoint&_newPosition,)", "contents": "updateQuadWithParticle(${1:tCCParticle*_particle},${2:const_CCPoint&_newPosition})" }
,
		{ "trigger": "CCParticleSmoke_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleSmoke_setSpeed(float_speed,)", "contents": "setSpeed(${1:float_speed})" }
,
		{ "trigger": "CCParticleSmoke_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleSmoke_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleSmoke_getGravity()", "contents": "getGravity()" }
,
		{ "trigger": "CCParticleSmoke_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleSmoke_setEndSpinVar(float_var,)", "contents": "setEndSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleSmoke_getAngle()", "contents": "getAngle()" }
,
		{ "trigger": "CCParticleSmoke_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleSmoke_setStartRadius(float_startRadius,)", "contents": "setStartRadius(${1:float_startRadius})" }
,
		{ "trigger": "CCParticleSmoke_getAngleVar()", "contents": "getAngleVar()" }
,
		{ "trigger": "CCParticleSmoke_setEmitterMode(int_mode,)", "contents": "setEmitterMode(${1:int_mode})" }
,
		{ "trigger": "CCParticleSmoke_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleSmoke_getTangentialAccel()", "contents": "getTangentialAccel()" }
,
		{ "trigger": "CCParticleSmoke_getRotatePerSecondVar()", "contents": "getRotatePerSecondVar()" }
,
		{ "trigger": "CCParticleSmoke_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleSmoke_getLifeVar()", "contents": "getLifeVar()" }
,
		{ "trigger": "CCParticleSmoke_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSmoke_setStartSpin(float_var,)", "contents": "setStartSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleSmoke_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleSmoke_getStartSize()", "contents": "getStartSize()" }
,
		{ "trigger": "CCParticleSmoke_getEndRadius()", "contents": "getEndRadius()" }
,
		{ "trigger": "CCParticleSmoke_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleSmoke_addParticle()", "contents": "addParticle()" }
,
		{ "trigger": "CCParticleSmoke_setBlendFunc(ccBlendFunc_var,)", "contents": "setBlendFunc(${1:ccBlendFunc_var})" }
,
		{ "trigger": "CCParticleSmoke_initParticle(tCCParticle*_particle,)", "contents": "initParticle(${1:tCCParticle*_particle})" }
,
		{ "trigger": "CCParticleSmoke_getTangentialAccelVar()", "contents": "getTangentialAccelVar()" }
,
		{ "trigger": "CCParticleSmoke_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleSmoke_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleSmoke_setAngle(float_angle,)", "contents": "setAngle(${1:float_angle})" }
,
		{ "trigger": "CCParticleSmoke_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleSmoke_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleSmoke_getEndRadiusVar()", "contents": "getEndRadiusVar()" }
,
		{ "trigger": "CCParticleSmoke_getStartSpin()", "contents": "getStartSpin()" }
,
		{ "trigger": "CCParticleSmoke_setSpeedVar(float_speed,)", "contents": "setSpeedVar(${1:float_speed})" }
,
		{ "trigger": "CCParticleSmoke_getLife()", "contents": "getLife()" }
,
		{ "trigger": "CCParticleSmoke_isBlendAdditive()", "contents": "isBlendAdditive()" }
,
		{ "trigger": "CCParticleSmoke_getParticleCount()", "contents": "getParticleCount()" }
,
		{ "trigger": "CCParticleSmoke_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleSmoke_getEndSpinVar()", "contents": "getEndSpinVar()" }
,
		{ "trigger": "CCParticleSmoke_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleSmoke_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleSmoke_setStartSize(float_size,)", "contents": "setStartSize(${1:float_size})" }
,
		{ "trigger": "CCParticleSmoke_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleSmoke_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSmoke_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleSmoke_getStartSpinVar()", "contents": "getStartSpinVar()" }
,
		{ "trigger": "CCParticleSmoke_setRadialAccelVar(float_t,)", "contents": "setRadialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleSmoke_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCParticleSmoke_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleSmoke_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleSmoke_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleSmoke_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleSmoke_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleSmoke_setTextureWithRect(CCTexture2D_*texture,const_CCRect&_rect,)", "contents": "setTextureWithRect(${1:CCTexture2D_*texture},${2:const_CCRect&_rect})" }
,
		{ "trigger": "CCParticleSmoke_setSourcePosition(CCPoint_pos,)", "contents": "setSourcePosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSmoke_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleSmoke_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleSmoke_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleSmoke_getRotatePerSecond()", "contents": "getRotatePerSecond()" }
,
		{ "trigger": "CCParticleSmoke_initWithTotalParticles(unsigned_int_number,)", "contents": "initWithTotalParticles(${1:unsigned_int_number})" }
,
		{ "trigger": "CCParticleSmoke_setBatchNode(CCParticleBatchNode*_node,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_node})" }
,
		{ "trigger": "CCParticleSmoke_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleSmoke_isActive()", "contents": "isActive()" }
,
		{ "trigger": "CCParticleSmoke_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleSmoke_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleSmoke_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleSmoke_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleSmoke_setEndSpin(float_var,)", "contents": "setEndSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleSmoke_resetSystem()", "contents": "resetSystem()" }
,
		{ "trigger": "CCParticleSmoke_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleSmoke_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleSmoke_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleSmoke_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleSmoke_getEndSizeVar()", "contents": "getEndSizeVar()" }
,
		{ "trigger": "CCParticleSmoke_setStartColorVar(const_ccColor4F_var,)", "contents": "setStartColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSmoke_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSmoke_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleSmoke_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleSmoke_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleSmoke_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleSmoke_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleSmoke_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleSmoke_setStartColor(const_ccColor4F_var,)", "contents": "setStartColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSmoke_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleSmoke_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleSmoke_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleSmoke_setAngleVar(float_angle,)", "contents": "setAngleVar(${1:float_angle})" }
,
		{ "trigger": "CCParticleSmoke_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleSmoke_setTexture(CCTexture2D*_texture,)", "contents": "setTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCParticleSmoke_setTangentialAccelVar(float_t,)", "contents": "setTangentialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleSmoke_setRotatePerSecond(float_degrees,)", "contents": "setRotatePerSecond(${1:float_degrees})" }
,
		{ "trigger": "CCParticleSmoke_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleSmoke_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleSmoke_setTotalParticles(unsigned_int_tp,)", "contents": "setTotalParticles(${1:unsigned_int_tp})" }
,
		{ "trigger": "CCParticleSmoke_getSpeedVar()", "contents": "getSpeedVar()" }
,
		{ "trigger": "CCParticleSmoke_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleSmoke_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleSmoke_getStartSizeVar()", "contents": "getStartSizeVar()" }
,
		{ "trigger": "CCParticleSmoke_setAutoRemoveOnFinish(bool_var,)", "contents": "setAutoRemoveOnFinish(${1:bool_var})" }
,
		{ "trigger": "CCParticleSmoke_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleSmoke_setTangentialAccel(float_t,)", "contents": "setTangentialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleSmoke_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleSmoke_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleSmoke_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleSmoke_setLife(float_life,)", "contents": "setLife(${1:float_life})" }
,
		{ "trigger": "CCParticleSmoke_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleSmoke_setEndColor(const_ccColor4F_var,)", "contents": "setEndColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSmoke_getRadialAccel()", "contents": "getRadialAccel()" }
,
		{ "trigger": "CCParticleSmoke_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleSmoke_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleSmoke_setRotatePerSecondVar(float_degrees,)", "contents": "setRotatePerSecondVar(${1:float_degrees})" }
,
		{ "trigger": "CCParticleSmoke_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleSmoke_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleSmoke_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCParticleSmoke_getStartRadiusVar()", "contents": "getStartRadiusVar()" }
,
		{ "trigger": "CCParticleSmoke_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleSmoke_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleSmoke_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleSmoke_setBatchNode(CCParticleBatchNode*_batchNode,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_batchNode})" }
,
		{ "trigger": "CCParticleSmoke_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleSmoke_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCParticleSmoke_getPosVar()", "contents": "getPosVar()" }
,
		{ "trigger": "CCParticleSmoke_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleSmoke_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "CCParticleSmoke_setEndSize(float_size,)", "contents": "setEndSize(${1:float_size})" }
,
		{ "trigger": "CCParticleSmoke_getEmissionRate()", "contents": "getEmissionRate()" }
,
		{ "trigger": "CCParticleSmoke_setRadialAccel(float_t,)", "contents": "setRadialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleSmoke_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleSmoke_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleSmoke_initWithFile(const_char*_plistFile,)", "contents": "initWithFile(${1:const_char*_plistFile})" }
,
		{ "trigger": "CCParticleSmoke_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleSmoke_setEndSizeVar(float_size,)", "contents": "setEndSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleSmoke_isFull()", "contents": "isFull()" }
,
		{ "trigger": "CCParticleSmoke_getStartRadius()", "contents": "getStartRadius()" }
,
		{ "trigger": "CCParticleSmoke_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleSmoke_setScale(float_s,)", "contents": "setScale(${1:float_s})" }
,
		{ "trigger": "CCParticleSmoke_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCParticleSmoke_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleSmoke_getStartColorVar()", "contents": "getStartColorVar()" }
,
		{ "trigger": "CCParticleSmoke_postStep()", "contents": "postStep()" }
,
		{ "trigger": "CCParticleSmoke_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleSmoke_setEndRadius(float_endRadius,)", "contents": "setEndRadius(${1:float_endRadius})" }
,
		{ "trigger": "CCParticleSmoke_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCParticleSmoke_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCParticleSmoke_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleSmoke_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleSmoke_create()", "contents": "CCParticleSmoke:create()" }
,

		{ "trigger": "CCMenu_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCMenu_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCMenu_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCMenu_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCMenu_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCMenu_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCMenu_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCMenu_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCMenu_init()", "contents": "init()" }
,
		{ "trigger": "CCMenu_draw()", "contents": "draw()" }
,
		{ "trigger": "CCMenu_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCMenu_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCMenu_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCMenu_alignItemsInColumnsWithArray(CCArray*_rows,)", "contents": "alignItemsInColumnsWithArray(${1:CCArray*_rows})" }
,
		{ "trigger": "CCMenu_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCMenu_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCMenu_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCMenu_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCMenu_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenu_visit()", "contents": "visit()" }
,
		{ "trigger": "CCMenu_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCMenu_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCMenu_registerScriptAccelerateHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptAccelerateHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCMenu_getTouchMode()", "contents": "getTouchMode()" }
,
		{ "trigger": "CCMenu_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenu_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCMenu_setEnabled(bool_value,)", "contents": "setEnabled(${1:bool_value})" }
,
		{ "trigger": "CCMenu_setAccelerometerEnabled(bool_bValue,)", "contents": "setAccelerometerEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCMenu_alignItemsInRowsWithArray(CCArray*_columns,)", "contents": "alignItemsInRowsWithArray(${1:CCArray*_columns})" }
,
		{ "trigger": "CCMenu_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCMenu_alignItemsVertically()", "contents": "alignItemsVertically()" }
,
		{ "trigger": "CCMenu_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenu_unregisterScriptTouchHandler()", "contents": "unregisterScriptTouchHandler()" }
,
		{ "trigger": "CCMenu_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCMenu_transform()", "contents": "transform()" }
,
		{ "trigger": "CCMenu_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCMenu_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenu_setHandlerPriority(int_newPriority,)", "contents": "setHandlerPriority(${1:int_newPriority})" }
,
		{ "trigger": "CCMenu_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCMenu_unregisterScriptAccelerateHandler()", "contents": "unregisterScriptAccelerateHandler()" }
,
		{ "trigger": "CCMenu_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCMenu_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCMenu_addChild(CCMenuItem*_child,int_zOrder_=_0,int_tag_=_-1,)", "contents": "addChild(${1:CCMenuItem*_child},${2:int_zOrder_=_0},${3:int_tag_=_-1})" }
,
		{ "trigger": "CCMenu_alignItemsVerticallyWithPadding(float_padding,)", "contents": "alignItemsVerticallyWithPadding(${1:float_padding})" }
,
		{ "trigger": "CCMenu_registerScriptKeypadHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptKeypadHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCMenu_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenu_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenu_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenu_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCMenu_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCMenu_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCMenu_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCMenu_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCMenu_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCMenu_setKeypadEnabled(bool_bValue,)", "contents": "setKeypadEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCMenu_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCMenu_setTouchPriority(int_priority,)", "contents": "setTouchPriority(${1:int_priority})" }
,
		{ "trigger": "CCMenu_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCMenu_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCMenu_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenu_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCMenu_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCMenu_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenu_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCMenu_setTouchEnabled(bool_bValue,)", "contents": "setTouchEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCMenu_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCMenu_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCMenu_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCMenu_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCMenu_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCMenu_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCMenu_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenu_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "CCMenu_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenu_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenu_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCMenu_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCMenu_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCMenu_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCMenu_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCMenu_retain()", "contents": "retain()" }
,
		{ "trigger": "CCMenu_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenu_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCMenu_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCMenu_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCMenu_setColor(ccColor3B_color,)", "contents": "setColor(${1:ccColor3B_color})" }
,
		{ "trigger": "CCMenu_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCMenu_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCMenu_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCMenu_unregisterScriptKeypadHandler()", "contents": "unregisterScriptKeypadHandler()" }
,
		{ "trigger": "CCMenu_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCMenu_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCMenu_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCMenu_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCMenu_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCMenu_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCMenu_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCMenu_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenu_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCMenu_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCMenu_isAccelerometerEnabled()", "contents": "isAccelerometerEnabled()" }
,
		{ "trigger": "CCMenu_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCMenu_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCMenu_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCMenu_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCMenu_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCMenu_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCMenu_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCMenu_isKeypadEnabled()", "contents": "isKeypadEnabled()" }
,
		{ "trigger": "CCMenu_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCMenu_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCMenu_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCMenu_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCMenu_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCMenu_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenu_registerScriptTouchHandler(LUA_FUNCTION_nHandler,bool_bIsMultiTouches_=_false,int_nPriority_=_0,bool_bSwallowsTouches_=_false,)", "contents": "registerScriptTouchHandler(${1:LUA_FUNCTION_nHandler},${2:bool_bIsMultiTouches_=_false},${3:int_nPriority_=_0},${4:bool_bSwallowsTouches_=_false})" }
,
		{ "trigger": "CCMenu_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCMenu_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCMenu_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCMenu_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCMenu_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCMenu_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCMenu_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenu_release()", "contents": "release()" }
,
		{ "trigger": "CCMenu_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenu_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenu_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenu_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCMenu_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCMenu_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCMenu_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCMenu_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCMenu_alignItemsHorizontallyWithPadding(float_padding,)", "contents": "alignItemsHorizontallyWithPadding(${1:float_padding})" }
,
		{ "trigger": "CCMenu_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCMenu_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCMenu_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCMenu_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCMenu_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCMenu_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCMenu_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenu_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCMenu_alignItemsHorizontally()", "contents": "alignItemsHorizontally()" }
,
		{ "trigger": "CCMenu_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCMenu_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCMenu_getTouchPriority()", "contents": "getTouchPriority()" }
,
		{ "trigger": "CCMenu_copy()", "contents": "copy()" }
,
		{ "trigger": "CCMenu_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCMenu_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCMenu_description()", "contents": "description()" }
,
		{ "trigger": "CCMenu_setTouchMode(ccTouchesMode_mode,)", "contents": "setTouchMode(${1:ccTouchesMode_mode})" }
,
		{ "trigger": "CCMenu_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCMenu_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCMenu_createWithItem(CCMenuItem*_item,)", "contents": "CCMenu:createWithItem(${1:CCMenuItem*_item})" }
,
		{ "trigger": "CCMenu_create()", "contents": "CCMenu:create()" }
,
		{ "trigger": "CCMenu_createWithArray(CCArray*_pArrayOfItems,)", "contents": "CCMenu:createWithArray(${1:CCArray*_pArrayOfItems})" }
,


		{ "trigger": "CCEaseOut_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseOut_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseOut_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseOut_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseOut_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseOut_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseOut_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseOut_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseOut_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseOut_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseOut_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseOut_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseOut_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseOut_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseOut_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseOut_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseOut_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseOut_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseOut_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseOut_create(CCActionInterval*_pAction,float_fRate,)", "contents": "CCEaseOut:create(${1:CCActionInterval*_pAction},${2:float_fRate})" }
,

		{ "trigger": "CCRGBAProtocol_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCRGBAProtocol_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCRGBAProtocol_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCRGBAProtocol_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCRGBAProtocol_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCRGBAProtocol_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCRGBAProtocol_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCRGBAProtocol_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCRGBAProtocol_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCRGBAProtocol_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCRGBAProtocol_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCRGBAProtocol_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCRGBAProtocol_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCRGBAProtocol_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,

		{ "trigger": "CCComAudio_setFile(const_char*_pszFilePath,)", "contents": "setFile(${1:const_char*_pszFilePath})" }
,
		{ "trigger": "CCComAudio_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCComAudio_serialize(void*_r,)", "contents": "serialize(${1:void*_r})" }
,
		{ "trigger": "CCComAudio_isLoop()", "contents": "isLoop()" }
,
		{ "trigger": "CCComAudio_resumeEffect(unsigned_int_nSoundId,)", "contents": "resumeEffect(${1:unsigned_int_nSoundId})" }
,
		{ "trigger": "CCComAudio_end()", "contents": "end()" }
,
		{ "trigger": "CCComAudio_pauseEffect(unsigned_int_nSoundId,)", "contents": "pauseEffect(${1:unsigned_int_nSoundId})" }
,
		{ "trigger": "CCComAudio_isBackgroundMusicPlaying()", "contents": "isBackgroundMusicPlaying()" }
,
		{ "trigger": "CCComAudio_playEffect(const_char*_pszFilePath,)", "contents": "playEffect(${1:const_char*_pszFilePath})" }
,
		{ "trigger": "CCComAudio_resumeAllEffects()", "contents": "resumeAllEffects()" }
,
		{ "trigger": "CCComAudio_release()", "contents": "release()" }
,
		{ "trigger": "CCComAudio_playEffect(const_char*_pszFilePath,bool_bLoop,)", "contents": "playEffect(${1:const_char*_pszFilePath},${2:bool_bLoop})" }
,
		{ "trigger": "CCComAudio_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCComAudio_init()", "contents": "init()" }
,
		{ "trigger": "CCComAudio_resumeBackgroundMusic()", "contents": "resumeBackgroundMusic()" }
,
		{ "trigger": "CCComAudio_setOwner(CCNode_*pOwner,)", "contents": "setOwner(${1:CCNode_*pOwner})" }
,
		{ "trigger": "CCComAudio_preloadBackgroundMusic(const_char*_pszFilePath,)", "contents": "preloadBackgroundMusic(${1:const_char*_pszFilePath})" }
,
		{ "trigger": "CCComAudio_getOwner()", "contents": "getOwner()" }
,
		{ "trigger": "CCComAudio_playBackgroundMusic(const_char*_pszFilePath,bool_bLoop,)", "contents": "playBackgroundMusic(${1:const_char*_pszFilePath},${2:bool_bLoop})" }
,
		{ "trigger": "CCComAudio_retain()", "contents": "retain()" }
,
		{ "trigger": "CCComAudio_stopBackgroundMusic(bool_bReleaseData,)", "contents": "stopBackgroundMusic(${1:bool_bReleaseData})" }
,
		{ "trigger": "CCComAudio_playEffect()", "contents": "playEffect()" }
,
		{ "trigger": "CCComAudio_stopEffect(unsigned_int_nSoundId,)", "contents": "stopEffect(${1:unsigned_int_nSoundId})" }
,
		{ "trigger": "CCComAudio_update(float_delta,)", "contents": "update(${1:float_delta})" }
,
		{ "trigger": "CCComAudio_getBackgroundMusicVolume()", "contents": "getBackgroundMusicVolume()" }
,
		{ "trigger": "CCComAudio_willPlayBackgroundMusic()", "contents": "willPlayBackgroundMusic()" }
,
		{ "trigger": "CCComAudio_getFile()", "contents": "getFile()" }
,
		{ "trigger": "CCComAudio_setEnabled(bool_b,)", "contents": "setEnabled(${1:bool_b})" }
,
		{ "trigger": "CCComAudio_rewindBackgroundMusic()", "contents": "rewindBackgroundMusic()" }
,
		{ "trigger": "CCComAudio_setLoop(bool_bLoop,)", "contents": "setLoop(${1:bool_bLoop})" }
,
		{ "trigger": "CCComAudio_stopAllEffects()", "contents": "stopAllEffects()" }
,
		{ "trigger": "CCComAudio_stopBackgroundMusic()", "contents": "stopBackgroundMusic()" }
,
		{ "trigger": "CCComAudio_unloadEffect(const_char*_pszFilePath,)", "contents": "unloadEffect(${1:const_char*_pszFilePath})" }
,
		{ "trigger": "CCComAudio_pauseBackgroundMusic()", "contents": "pauseBackgroundMusic()" }
,
		{ "trigger": "CCComAudio_copy()", "contents": "copy()" }
,
		{ "trigger": "CCComAudio_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCComAudio_setName(const_char_*pName,)", "contents": "setName(${1:const_char_*pName})" }
,
		{ "trigger": "CCComAudio_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCComAudio_setEffectsVolume(float_volume,)", "contents": "setEffectsVolume(${1:float_volume})" }
,
		{ "trigger": "CCComAudio_setBackgroundMusicVolume(float_volume,)", "contents": "setBackgroundMusicVolume(${1:float_volume})" }
,
		{ "trigger": "CCComAudio_pauseAllEffects()", "contents": "pauseAllEffects()" }
,
		{ "trigger": "CCComAudio_getName()", "contents": "getName()" }
,
		{ "trigger": "CCComAudio_preloadEffect(const_char*_pszFilePath,)", "contents": "preloadEffect(${1:const_char*_pszFilePath})" }
,
		{ "trigger": "CCComAudio_playBackgroundMusic(const_char*_pszFilePath,)", "contents": "playBackgroundMusic(${1:const_char*_pszFilePath})" }
,
		{ "trigger": "CCComAudio_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCComAudio_playBackgroundMusic()", "contents": "playBackgroundMusic()" }
,
		{ "trigger": "CCComAudio_getEffectsVolume()", "contents": "getEffectsVolume()" }
,
		{ "trigger": "CCComAudio_create()", "contents": "CCComAudio:create()" }
,

		{ "trigger": "CCNodeRGBA_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCNodeRGBA_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCNodeRGBA_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCNodeRGBA_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCNodeRGBA_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCNodeRGBA_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCNodeRGBA_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCNodeRGBA_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCNodeRGBA_init()", "contents": "init()" }
,
		{ "trigger": "CCNodeRGBA_draw()", "contents": "draw()" }
,
		{ "trigger": "CCNodeRGBA_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCNodeRGBA_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCNodeRGBA_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCNodeRGBA_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCNodeRGBA_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCNodeRGBA_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCNodeRGBA_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCNodeRGBA_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCNodeRGBA_visit()", "contents": "visit()" }
,
		{ "trigger": "CCNodeRGBA_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCNodeRGBA_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCNodeRGBA_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCNodeRGBA_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCNodeRGBA_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCNodeRGBA_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCNodeRGBA_transform()", "contents": "transform()" }
,
		{ "trigger": "CCNodeRGBA_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCNodeRGBA_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCNodeRGBA_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCNodeRGBA_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCNodeRGBA_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCNodeRGBA_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCNodeRGBA_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCNodeRGBA_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCNodeRGBA_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCNodeRGBA_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCNodeRGBA_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCNodeRGBA_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCNodeRGBA_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCNodeRGBA_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCNodeRGBA_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCNodeRGBA_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCNodeRGBA_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCNodeRGBA_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCNodeRGBA_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCNodeRGBA_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCNodeRGBA_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCNodeRGBA_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCNodeRGBA_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCNodeRGBA_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCNodeRGBA_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCNodeRGBA_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCNodeRGBA_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCNodeRGBA_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCNodeRGBA_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCNodeRGBA_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCNodeRGBA_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCNodeRGBA_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCNodeRGBA_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCNodeRGBA_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCNodeRGBA_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCNodeRGBA_retain()", "contents": "retain()" }
,
		{ "trigger": "CCNodeRGBA_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCNodeRGBA_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCNodeRGBA_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCNodeRGBA_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCNodeRGBA_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCNodeRGBA_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCNodeRGBA_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCNodeRGBA_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCNodeRGBA_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCNodeRGBA_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCNodeRGBA_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCNodeRGBA_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCNodeRGBA_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCNodeRGBA_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCNodeRGBA_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCNodeRGBA_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCNodeRGBA_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCNodeRGBA_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCNodeRGBA_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCNodeRGBA_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCNodeRGBA_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCNodeRGBA_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCNodeRGBA_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCNodeRGBA_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCNodeRGBA_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCNodeRGBA_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCNodeRGBA_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCNodeRGBA_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCNodeRGBA_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCNodeRGBA_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCNodeRGBA_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCNodeRGBA_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCNodeRGBA_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCNodeRGBA_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCNodeRGBA_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCNodeRGBA_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCNodeRGBA_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCNodeRGBA_release()", "contents": "release()" }
,
		{ "trigger": "CCNodeRGBA_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCNodeRGBA_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCNodeRGBA_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCNodeRGBA_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCNodeRGBA_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCNodeRGBA_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCNodeRGBA_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCNodeRGBA_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCNodeRGBA_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCNodeRGBA_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCNodeRGBA_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCNodeRGBA_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCNodeRGBA_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCNodeRGBA_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCNodeRGBA_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCNodeRGBA_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCNodeRGBA_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCNodeRGBA_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCNodeRGBA_copy()", "contents": "copy()" }
,
		{ "trigger": "CCNodeRGBA_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCNodeRGBA_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCNodeRGBA_description()", "contents": "description()" }
,
		{ "trigger": "CCNodeRGBA_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCNodeRGBA_autorelease()", "contents": "autorelease()" }
,

		{ "trigger": "CCMenuItemToggle_setSelectedIndex(unsigned_int_index,)", "contents": "setSelectedIndex(${1:unsigned_int_index})" }
,
		{ "trigger": "CCMenuItemToggle_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCMenuItemToggle_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCMenuItemToggle_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCMenuItemToggle_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCMenuItemToggle_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCMenuItemToggle_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCMenuItemToggle_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCMenuItemToggle_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCMenuItemToggle_init()", "contents": "init()" }
,
		{ "trigger": "CCMenuItemToggle_draw()", "contents": "draw()" }
,
		{ "trigger": "CCMenuItemToggle_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCMenuItemToggle_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCMenuItemToggle_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCMenuItemToggle_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCMenuItemToggle_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCMenuItemToggle_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCMenuItemToggle_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCMenuItemToggle_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemToggle_visit()", "contents": "visit()" }
,
		{ "trigger": "CCMenuItemToggle_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCMenuItemToggle_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItemToggle_activate()", "contents": "activate()" }
,
		{ "trigger": "CCMenuItemToggle_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItemToggle_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCMenuItemToggle_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemToggle_unregisterScriptTapHandler()", "contents": "unregisterScriptTapHandler()" }
,
		{ "trigger": "CCMenuItemToggle_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCMenuItemToggle_transform()", "contents": "transform()" }
,
		{ "trigger": "CCMenuItemToggle_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCMenuItemToggle_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemToggle_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCMenuItemToggle_registerScriptTapHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptTapHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItemToggle_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCMenuItemToggle_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCMenuItemToggle_selected()", "contents": "selected()" }
,
		{ "trigger": "CCMenuItemToggle_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItemToggle_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItemToggle_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItemToggle_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCMenuItemToggle_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCMenuItemToggle_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCMenuItemToggle_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCMenuItemToggle_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCMenuItemToggle_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCMenuItemToggle_isSelected()", "contents": "isSelected()" }
,
		{ "trigger": "CCMenuItemToggle_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCMenuItemToggle_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCMenuItemToggle_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCMenuItemToggle_unselected()", "contents": "unselected()" }
,
		{ "trigger": "CCMenuItemToggle_addSubItem(CCMenuItem_*item,)", "contents": "addSubItem(${1:CCMenuItem_*item})" }
,
		{ "trigger": "CCMenuItemToggle_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCMenuItemToggle_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCMenuItemToggle_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItemToggle_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCMenuItemToggle_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCMenuItemToggle_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCMenuItemToggle_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCMenuItemToggle_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItemToggle_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCMenuItemToggle_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCMenuItemToggle_setSubItems(CCArray*_pArrayOfItems,)", "contents": "setSubItems(${1:CCArray*_pArrayOfItems})" }
,
		{ "trigger": "CCMenuItemToggle_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCMenuItemToggle_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemToggle_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemToggle_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItemToggle_selectedItem()", "contents": "selectedItem()" }
,
		{ "trigger": "CCMenuItemToggle_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCMenuItemToggle_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCMenuItemToggle_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCMenuItemToggle_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCMenuItemToggle_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCMenuItemToggle_retain()", "contents": "retain()" }
,
		{ "trigger": "CCMenuItemToggle_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItemToggle_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCMenuItemToggle_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCMenuItemToggle_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCMenuItemToggle_setColor(ccColor3B_color,)", "contents": "setColor(${1:ccColor3B_color})" }
,
		{ "trigger": "CCMenuItemToggle_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCMenuItemToggle_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCMenuItemToggle_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCMenuItemToggle_setEnabled(bool_var,)", "contents": "setEnabled(${1:bool_var})" }
,
		{ "trigger": "CCMenuItemToggle_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCMenuItemToggle_rect()", "contents": "rect()" }
,
		{ "trigger": "CCMenuItemToggle_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCMenuItemToggle_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCMenuItemToggle_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCMenuItemToggle_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCMenuItemToggle_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCMenuItemToggle_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCMenuItemToggle_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCMenuItemToggle_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemToggle_copy()", "contents": "copy()" }
,
		{ "trigger": "CCMenuItemToggle_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCMenuItemToggle_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCMenuItemToggle_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCMenuItemToggle_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCMenuItemToggle_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCMenuItemToggle_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCMenuItemToggle_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCMenuItemToggle_getSubItems()", "contents": "getSubItems()" }
,
		{ "trigger": "CCMenuItemToggle_getSelectedIndex()", "contents": "getSelectedIndex()" }
,
		{ "trigger": "CCMenuItemToggle_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItemToggle_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCMenuItemToggle_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCMenuItemToggle_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCMenuItemToggle_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCMenuItemToggle_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItemToggle_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCMenuItemToggle_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCMenuItemToggle_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCMenuItemToggle_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCMenuItemToggle_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCMenuItemToggle_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCMenuItemToggle_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItemToggle_release()", "contents": "release()" }
,
		{ "trigger": "CCMenuItemToggle_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItemToggle_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemToggle_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItemToggle_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCMenuItemToggle_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCMenuItemToggle_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCMenuItemToggle_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCMenuItemToggle_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCMenuItemToggle_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCMenuItemToggle_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCMenuItemToggle_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCMenuItemToggle_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCMenuItemToggle_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCMenuItemToggle_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCMenuItemToggle_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItemToggle_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCMenuItemToggle_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCMenuItemToggle_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCMenuItemToggle_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCMenuItemToggle_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCMenuItemToggle_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCMenuItemToggle_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCMenuItemToggle_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "CCMenuItemToggle_description()", "contents": "description()" }
,
		{ "trigger": "CCMenuItemToggle_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCMenuItemToggle_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCMenuItemToggle_create(CCMenuItem_*item,)", "contents": "CCMenuItemToggle:create(${1:CCMenuItem_*item})" }
,

		{ "trigger": "CCBaseData_copy()", "contents": "copy()" }
,
		{ "trigger": "CCBaseData_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCBaseData_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCBaseData_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCBaseData_setColor(const_ccColor4B_&color,)", "contents": "setColor(${1:const_ccColor4B_&color})" }
,
		{ "trigger": "CCBaseData_create()", "contents": "create()" }
,
		{ "trigger": "CCBaseData_release()", "contents": "release()" }
,
		{ "trigger": "CCBaseData_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCBaseData_retain()", "contents": "retain()" }
,
		{ "trigger": "CCBaseData_isSingleReference()", "contents": "isSingleReference()" }
,

		{ "trigger": "CCLabelAtlas_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCLabelAtlas_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCLabelAtlas_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCLabelAtlas_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCLabelAtlas_getTextureAtlas()", "contents": "getTextureAtlas()" }
,
		{ "trigger": "CCLabelAtlas_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCLabelAtlas_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCLabelAtlas_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCLabelAtlas_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCLabelAtlas_init()", "contents": "init()" }
,
		{ "trigger": "CCLabelAtlas_updateAtlasValues()", "contents": "updateAtlasValues()" }
,
		{ "trigger": "CCLabelAtlas_draw()", "contents": "draw()" }
,
		{ "trigger": "CCLabelAtlas_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCLabelAtlas_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCLabelAtlas_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCLabelAtlas_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCLabelAtlas_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCLabelAtlas_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCLabelAtlas_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCLabelAtlas_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLabelAtlas_visit()", "contents": "visit()" }
,
		{ "trigger": "CCLabelAtlas_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCLabelAtlas_getString()", "contents": "getString()" }
,
		{ "trigger": "CCLabelAtlas_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCLabelAtlas_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLabelAtlas_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCLabelAtlas_setOpacityModifyRGB(bool_isOpacityModifyRGB,)", "contents": "setOpacityModifyRGB(${1:bool_isOpacityModifyRGB})" }
,
		{ "trigger": "CCLabelAtlas_setQuadsToDraw(unsigned_int_quadsToDraw,)", "contents": "setQuadsToDraw(${1:unsigned_int_quadsToDraw})" }
,
		{ "trigger": "CCLabelAtlas_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCLabelAtlas_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCLabelAtlas_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCLabelAtlas_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCLabelAtlas_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLabelAtlas_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCLabelAtlas_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCLabelAtlas_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLabelAtlas_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCLabelAtlas_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLabelAtlas_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCLabelAtlas_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCLabelAtlas_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCLabelAtlas_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCLabelAtlas_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCLabelAtlas_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCLabelAtlas_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCLabelAtlas_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCLabelAtlas_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCLabelAtlas_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLabelAtlas_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCLabelAtlas_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCLabelAtlas_getQuadsToDraw()", "contents": "getQuadsToDraw()" }
,
		{ "trigger": "CCLabelAtlas_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLabelAtlas_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCLabelAtlas_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCLabelAtlas_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCLabelAtlas_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCLabelAtlas_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCLabelAtlas_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCLabelAtlas_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCLabelAtlas_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLabelAtlas_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLabelAtlas_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLabelAtlas_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCLabelAtlas_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCLabelAtlas_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCLabelAtlas_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCLabelAtlas_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCLabelAtlas_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCLabelAtlas_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCLabelAtlas_retain()", "contents": "retain()" }
,
		{ "trigger": "CCLabelAtlas_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLabelAtlas_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCLabelAtlas_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCLabelAtlas_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCLabelAtlas_setColor(ccColor3B_color,)", "contents": "setColor(${1:ccColor3B_color})" }
,
		{ "trigger": "CCLabelAtlas_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCLabelAtlas_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCLabelAtlas_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCLabelAtlas_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCLabelAtlas_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCLabelAtlas_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCLabelAtlas_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCLabelAtlas_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCLabelAtlas_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCLabelAtlas_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCLabelAtlas_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCLabelAtlas_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCLabelAtlas_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCLabelAtlas_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCLabelAtlas_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCLabelAtlas_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCLabelAtlas_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCLabelAtlas_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCLabelAtlas_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCLabelAtlas_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCLabelAtlas_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCLabelAtlas_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCLabelAtlas_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCLabelAtlas_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCLabelAtlas_transform()", "contents": "transform()" }
,
		{ "trigger": "CCLabelAtlas_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLabelAtlas_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCLabelAtlas_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCLabelAtlas_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCLabelAtlas_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCLabelAtlas_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCLabelAtlas_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCLabelAtlas_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLabelAtlas_release()", "contents": "release()" }
,
		{ "trigger": "CCLabelAtlas_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLabelAtlas_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCLabelAtlas_setTexture(CCTexture2D_*texture,)", "contents": "setTexture(${1:CCTexture2D_*texture})" }
,
		{ "trigger": "CCLabelAtlas_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLabelAtlas_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCLabelAtlas_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCLabelAtlas_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCLabelAtlas_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCLabelAtlas_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCLabelAtlas_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCLabelAtlas_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCLabelAtlas_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCLabelAtlas_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCLabelAtlas_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCLabelAtlas_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLabelAtlas_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCLabelAtlas_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCLabelAtlas_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCLabelAtlas_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCLabelAtlas_copy()", "contents": "copy()" }
,
		{ "trigger": "CCLabelAtlas_setTextureAtlas(CCTextureAtlas*_atlas,)", "contents": "setTextureAtlas(${1:CCTextureAtlas*_atlas})" }
,
		{ "trigger": "CCLabelAtlas_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCLabelAtlas_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCLabelAtlas_description()", "contents": "description()" }
,
		{ "trigger": "CCLabelAtlas_setString(const_char_*label,)", "contents": "setString(${1:const_char_*label})" }
,
		{ "trigger": "CCLabelAtlas_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCLabelAtlas_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCLabelAtlas_create(const_char_*sring,const_char_*fntFile,)", "contents": "CCLabelAtlas:create(${1:const_char_*sring},${2:const_char_*fntFile})" }
,
		{ "trigger": "CCLabelAtlas_create(const_char_*label,const_char_*charMapFile,unsigned_int_itemWidth,unsigned_int_itemHeight,unsigned_int_startCharMap,)", "contents": "CCLabelAtlas:create(${1:const_char_*label},${2:const_char_*charMapFile},${3:unsigned_int_itemWidth},${4:unsigned_int_itemHeight},${5:unsigned_int_startCharMap})" }
,

		{ "trigger": "CCFadeOutUpTiles_turnOffTile(CCPoint_pos,)", "contents": "turnOffTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutUpTiles_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCFadeOutUpTiles_originalTile(CCPoint_pos,)", "contents": "originalTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutUpTiles_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCFadeOutUpTiles_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCFadeOutUpTiles_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCFadeOutUpTiles_release()", "contents": "release()" }
,
		{ "trigger": "CCFadeOutUpTiles_setTile(CCPoint_pos,ccQuad3_coords,)", "contents": "setTile(${1:CCPoint_pos},${2:ccQuad3_coords})" }
,
		{ "trigger": "CCFadeOutUpTiles_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCFadeOutUpTiles_retain()", "contents": "retain()" }
,
		{ "trigger": "CCFadeOutUpTiles_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCFadeOutUpTiles_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCFadeOutUpTiles_tile(CCPoint_pos,)", "contents": "tile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutUpTiles_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCFadeOutUpTiles_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCFadeOutUpTiles_transformTile(CCPoint_pos,float_distance,)", "contents": "transformTile(${1:CCPoint_pos},${2:float_distance})" }
,
		{ "trigger": "CCFadeOutUpTiles_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCFadeOutUpTiles_copy()", "contents": "copy()" }
,
		{ "trigger": "CCFadeOutUpTiles_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCFadeOutUpTiles_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCFadeOutUpTiles_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCFadeOutUpTiles_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCFadeOutUpTiles_turnOnTile(CCPoint_pos,)", "contents": "turnOnTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutUpTiles_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCFadeOutUpTiles_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCFadeOutUpTiles_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCFadeOutUpTiles_create(float_duration,CCSize_gridSize,)", "contents": "CCFadeOutUpTiles:create(${1:float_duration},${2:CCSize_gridSize})" }
,


		{ "trigger": "CCFollow_copy()", "contents": "copy()" }
,
		{ "trigger": "CCFollow_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCFollow_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCFollow_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCFollow_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCFollow_isBoundarySet()", "contents": "isBoundarySet()" }
,
		{ "trigger": "CCFollow_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCFollow_setBoudarySet(bool_bValue,)", "contents": "setBoudarySet(${1:bool_bValue})" }
,
		{ "trigger": "CCFollow_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCFollow_release()", "contents": "release()" }
,
		{ "trigger": "CCFollow_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCFollow_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCFollow_retain()", "contents": "retain()" }
,
		{ "trigger": "CCFollow_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCFollow_create(CCNode_*pFollowedNode,CCRect_rect,)", "contents": "CCFollow:create(${1:CCNode_*pFollowedNode},${2:CCRect_rect})" }
,
		{ "trigger": "CCFollow_create(CCNode_*pFollowedNode,)", "contents": "CCFollow:create(${1:CCNode_*pFollowedNode})" }
,

		{ "trigger": "CCOrbitCamera_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCOrbitCamera_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCOrbitCamera_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCOrbitCamera_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCOrbitCamera_release()", "contents": "release()" }
,
		{ "trigger": "CCOrbitCamera_startWithTarget(CCNode_*pTarget,)", "contents": "startWithTarget(${1:CCNode_*pTarget})" }
,
		{ "trigger": "CCOrbitCamera_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCOrbitCamera_retain()", "contents": "retain()" }
,
		{ "trigger": "CCOrbitCamera_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCOrbitCamera_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCOrbitCamera_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCOrbitCamera_sphericalRadius(float_*r,float_*zenith,float_*azimuth,)", "contents": "sphericalRadius(${1:float_*r},${2:float_*zenith},${3:float_*azimuth})" }
,
		{ "trigger": "CCOrbitCamera_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCOrbitCamera_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCOrbitCamera_copy()", "contents": "copy()" }
,
		{ "trigger": "CCOrbitCamera_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCOrbitCamera_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCOrbitCamera_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCOrbitCamera_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCOrbitCamera_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCOrbitCamera_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCOrbitCamera_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCOrbitCamera_create(float_t,float_radius,float_deltaRadius,float_angleZ,float_deltaAngleZ,float_angleX,float_deltaAngleX,)", "contents": "CCOrbitCamera:create(${1:float_t},${2:float_radius},${3:float_deltaRadius},${4:float_angleZ},${5:float_deltaAngleZ},${6:float_angleX},${7:float_deltaAngleX})" }
,

		{ "trigger": "CCWaves_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCWaves_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCWaves_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCWaves_release()", "contents": "release()" }
,
		{ "trigger": "CCWaves_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCWaves_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCWaves_retain()", "contents": "retain()" }
,
		{ "trigger": "CCWaves_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCWaves_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCWaves_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCWaves_vertex(const_CCPoint&_pos,)", "contents": "vertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCWaves_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCWaves_setAmplitude(float_fAmplitude,)", "contents": "setAmplitude(${1:float_fAmplitude})" }
,
		{ "trigger": "CCWaves_copy()", "contents": "copy()" }
,
		{ "trigger": "CCWaves_getAmplitude()", "contents": "getAmplitude()" }
,
		{ "trigger": "CCWaves_setVertex(const_CCPoint&_pos,const_ccVertex3F&_vertex,)", "contents": "setVertex(${1:const_CCPoint&_pos},${2:const_ccVertex3F&_vertex})" }
,
		{ "trigger": "CCWaves_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCWaves_setAmplitudeRate(float_fAmplitudeRate,)", "contents": "setAmplitudeRate(${1:float_fAmplitudeRate})" }
,
		{ "trigger": "CCWaves_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCWaves_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCWaves_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCWaves_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCWaves_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCWaves_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCWaves_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCWaves_originalVertex(const_CCPoint&_pos,)", "contents": "originalVertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCWaves_create(float_duration,CCSize_gridSize,unsigned_int_waves,float_amplitude,bool_horizontal,bool_vertical,)", "contents": "CCWaves:create(${1:float_duration},${2:CCSize_gridSize},${3:unsigned_int_waves},${4:float_amplitude},${5:bool_horizontal},${6:bool_vertical})" }
,

		{ "trigger": "CCControlColourPicker_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCControlColourPicker_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCControlColourPicker_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCControlColourPicker_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCControlColourPicker_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCControlColourPicker_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCControlColourPicker_setOpacityModifyRGB(bool_bOpacityModifyRGB,)", "contents": "setOpacityModifyRGB(${1:bool_bOpacityModifyRGB})" }
,
		{ "trigger": "CCControlColourPicker_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCControlColourPicker_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCControlColourPicker_init()", "contents": "init()" }
,
		{ "trigger": "CCControlColourPicker_draw()", "contents": "draw()" }
,
		{ "trigger": "CCControlColourPicker_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCControlColourPicker_removeHandleOfControlEvent(CCControlEvent_controlEvents,)", "contents": "removeHandleOfControlEvent(${1:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlColourPicker_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCControlColourPicker_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCControlColourPicker_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCControlColourPicker_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCControlColourPicker_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCControlColourPicker_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCControlColourPicker_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCControlColourPicker_visit()", "contents": "visit()" }
,
		{ "trigger": "CCControlColourPicker_setBackground(CCSprite*_var,)", "contents": "setBackground(${1:CCSprite*_var})" }
,
		{ "trigger": "CCControlColourPicker_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCControlColourPicker_isHighlighted()", "contents": "isHighlighted()" }
,
		{ "trigger": "CCControlColourPicker_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCControlColourPicker_registerScriptAccelerateHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptAccelerateHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCControlColourPicker_isKeypadEnabled()", "contents": "isKeypadEnabled()" }
,
		{ "trigger": "CCControlColourPicker_getTouchMode()", "contents": "getTouchMode()" }
,
		{ "trigger": "CCControlColourPicker_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCControlColourPicker_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCControlColourPicker_setAccelerometerEnabled(bool_bValue,)", "contents": "setAccelerometerEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCControlColourPicker_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCControlColourPicker_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCControlColourPicker_unregisterScriptTouchHandler()", "contents": "unregisterScriptTouchHandler()" }
,
		{ "trigger": "CCControlColourPicker_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCControlColourPicker_getBackground()", "contents": "getBackground()" }
,
		{ "trigger": "CCControlColourPicker_transform()", "contents": "transform()" }
,
		{ "trigger": "CCControlColourPicker_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCControlColourPicker_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCControlColourPicker_hueSliderValueChanged(CCObject_*_sender,CCControlEvent_controlEvent,)", "contents": "hueSliderValueChanged(${1:CCObject_*_sender},${2:CCControlEvent_controlEvent})" }
,
		{ "trigger": "CCControlColourPicker_setTouchMode(ccTouchesMode_mode,)", "contents": "setTouchMode(${1:ccTouchesMode_mode})" }
,
		{ "trigger": "CCControlColourPicker_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCControlColourPicker_sendActionsForControlEvents(CCControlEvent_controlEvents,)", "contents": "sendActionsForControlEvents(${1:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlColourPicker_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCControlColourPicker_removeTargetWithActionForControlEvents(CCObject*_target,SEL_CCControlHandler_action,CCControlEvent_controlEvents,)", "contents": "removeTargetWithActionForControlEvents(${1:CCObject*_target},${2:SEL_CCControlHandler_action},${3:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlColourPicker_getState()", "contents": "getState()" }
,
		{ "trigger": "CCControlColourPicker_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCControlColourPicker_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCControlColourPicker_registerScriptKeypadHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptKeypadHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCControlColourPicker_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCControlColourPicker_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCControlColourPicker_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCControlColourPicker_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCControlColourPicker_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCControlColourPicker_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCControlColourPicker_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCControlColourPicker_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCControlColourPicker_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCControlColourPicker_setKeypadEnabled(bool_bValue,)", "contents": "setKeypadEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCControlColourPicker_isSelected()", "contents": "isSelected()" }
,
		{ "trigger": "CCControlColourPicker_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCControlColourPicker_setTouchPriority(int_priority,)", "contents": "setTouchPriority(${1:int_priority})" }
,
		{ "trigger": "CCControlColourPicker_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCControlColourPicker_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCControlColourPicker_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCControlColourPicker_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCControlColourPicker_addTargetWithActionForControlEvents(CCObject*_target,SEL_CCControlHandler_action,CCControlEvent_controlEvents,)", "contents": "addTargetWithActionForControlEvents(${1:CCObject*_target},${2:SEL_CCControlHandler_action},${3:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlColourPicker_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCControlColourPicker_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCControlColourPicker_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCControlColourPicker_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCControlColourPicker_setSelected(bool_bSelected,)", "contents": "setSelected(${1:bool_bSelected})" }
,
		{ "trigger": "CCControlColourPicker_setTouchEnabled(bool_bValue,)", "contents": "setTouchEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCControlColourPicker_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCControlColourPicker_init()", "contents": "init()" }
,
		{ "trigger": "CCControlColourPicker_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCControlColourPicker_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCControlColourPicker_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCControlColourPicker_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCControlColourPicker_onExit()", "contents": "onExit()" }
,
		{ "trigger": "CCControlColourPicker_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCControlColourPicker_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCControlColourPicker_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "CCControlColourPicker_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCControlColourPicker_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCControlColourPicker_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCControlColourPicker_setEnabled(bool_bEnabled,)", "contents": "setEnabled(${1:bool_bEnabled})" }
,
		{ "trigger": "CCControlColourPicker_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCControlColourPicker_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCControlColourPicker_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCControlColourPicker_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCControlColourPicker_retain()", "contents": "retain()" }
,
		{ "trigger": "CCControlColourPicker_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCControlColourPicker_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCControlColourPicker_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCControlColourPicker_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCControlColourPicker_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCControlColourPicker_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCControlColourPicker_unregisterScriptAccelerateHandler()", "contents": "unregisterScriptAccelerateHandler()" }
,
		{ "trigger": "CCControlColourPicker_unregisterScriptKeypadHandler()", "contents": "unregisterScriptKeypadHandler()" }
,
		{ "trigger": "CCControlColourPicker_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCControlColourPicker_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCControlColourPicker_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCControlColourPicker_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCControlColourPicker_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCControlColourPicker_colourSliderValueChanged(CCObject_*_sender,CCControlEvent_controlEvent,)", "contents": "colourSliderValueChanged(${1:CCObject_*_sender},${2:CCControlEvent_controlEvent})" }
,
		{ "trigger": "CCControlColourPicker_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCControlColourPicker_getTouchLocation(CCTouch*_touch,)", "contents": "getTouchLocation(${1:CCTouch*_touch})" }
,
		{ "trigger": "CCControlColourPicker_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCControlColourPicker_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCControlColourPicker_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCControlColourPicker_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCControlColourPicker_isAccelerometerEnabled()", "contents": "isAccelerometerEnabled()" }
,
		{ "trigger": "CCControlColourPicker_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCControlColourPicker_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCControlColourPicker_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCControlColourPicker_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCControlColourPicker_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCControlColourPicker_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCControlColourPicker_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCControlColourPicker_setHuePicker(CCControlHuePicker*_var,)", "contents": "setHuePicker(${1:CCControlHuePicker*_var})" }
,
		{ "trigger": "CCControlColourPicker_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCControlColourPicker_hasVisibleParents()", "contents": "hasVisibleParents()" }
,
		{ "trigger": "CCControlColourPicker_setColor(const_ccColor3B&_colorValue,)", "contents": "setColor(${1:const_ccColor3B&_colorValue})" }
,
		{ "trigger": "CCControlColourPicker_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCControlColourPicker_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCControlColourPicker_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCControlColourPicker_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCControlColourPicker_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCControlColourPicker_registerScriptTouchHandler(LUA_FUNCTION_nHandler,bool_bIsMultiTouches_=_false,int_nPriority_=_0,bool_bSwallowsTouches_=_false,)", "contents": "registerScriptTouchHandler(${1:LUA_FUNCTION_nHandler},${2:bool_bIsMultiTouches_=_false},${3:int_nPriority_=_0},${4:bool_bSwallowsTouches_=_false})" }
,
		{ "trigger": "CCControlColourPicker_isTouchInside(CCTouch_*_touch,)", "contents": "isTouchInside(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCControlColourPicker_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCControlColourPicker_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCControlColourPicker_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCControlColourPicker_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCControlColourPicker_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCControlColourPicker_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCControlColourPicker_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCControlColourPicker_release()", "contents": "release()" }
,
		{ "trigger": "CCControlColourPicker_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCControlColourPicker_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCControlColourPicker_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCControlColourPicker_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCControlColourPicker_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCControlColourPicker_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCControlColourPicker_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCControlColourPicker_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCControlColourPicker_setHighlighted(bool_bHighlighted,)", "contents": "setHighlighted(${1:bool_bHighlighted})" }
,
		{ "trigger": "CCControlColourPicker_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCControlColourPicker_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCControlColourPicker_needsLayout()", "contents": "needsLayout()" }
,
		{ "trigger": "CCControlColourPicker_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCControlColourPicker_setcolourPicker(CCControlSaturationBrightnessPicker*_var,)", "contents": "setcolourPicker(${1:CCControlSaturationBrightnessPicker*_var})" }
,
		{ "trigger": "CCControlColourPicker_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCControlColourPicker_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCControlColourPicker_getcolourPicker()", "contents": "getcolourPicker()" }
,
		{ "trigger": "CCControlColourPicker_registerWithTouchDispatcher()", "contents": "registerWithTouchDispatcher()" }
,
		{ "trigger": "CCControlColourPicker_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCControlColourPicker_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCControlColourPicker_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCControlColourPicker_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCControlColourPicker_getTouchPriority()", "contents": "getTouchPriority()" }
,
		{ "trigger": "CCControlColourPicker_copy()", "contents": "copy()" }
,
		{ "trigger": "CCControlColourPicker_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCControlColourPicker_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCControlColourPicker_addHandleOfControlEvent(LUA_FUNCTION_nFunID,CCControlEvent_controlEvents,)", "contents": "addHandleOfControlEvent(${1:LUA_FUNCTION_nFunID},${2:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlColourPicker_description()", "contents": "description()" }
,
		{ "trigger": "CCControlColourPicker_getHuePicker()", "contents": "getHuePicker()" }
,
		{ "trigger": "CCControlColourPicker_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCControlColourPicker_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCControlColourPicker_onEnter()", "contents": "onEnter()" }
,
		{ "trigger": "CCControlColourPicker_create()", "contents": "CCControlColourPicker:create()" }
,


		{ "trigger": "CCTransitionMoveInL_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTransitionMoveInL_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTransitionMoveInL_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTransitionMoveInL_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTransitionMoveInL_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTransitionMoveInL_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTransitionMoveInL_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTransitionMoveInL_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTransitionMoveInL_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCTransitionMoveInL_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCTransitionMoveInL_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionMoveInL_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTransitionMoveInL_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTransitionMoveInL_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionMoveInL_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionMoveInL_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTransitionMoveInL_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionMoveInL_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTransitionMoveInL_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCTransitionMoveInL_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionMoveInL_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTransitionMoveInL_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionMoveInL_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTransitionMoveInL_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionMoveInL_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTransitionMoveInL_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTransitionMoveInL_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCTransitionMoveInL_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTransitionMoveInL_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTransitionMoveInL_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTransitionMoveInL_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTransitionMoveInL_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTransitionMoveInL_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTransitionMoveInL_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionMoveInL_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTransitionMoveInL_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTransitionMoveInL_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionMoveInL_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTransitionMoveInL_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTransitionMoveInL_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTransitionMoveInL_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTransitionMoveInL_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionMoveInL_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionMoveInL_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionMoveInL_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTransitionMoveInL_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTransitionMoveInL_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTransitionMoveInL_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTransitionMoveInL_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTransitionMoveInL_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTransitionMoveInL_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTransitionMoveInL_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionMoveInL_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTransitionMoveInL_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTransitionMoveInL_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTransitionMoveInL_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTransitionMoveInL_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTransitionMoveInL_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTransitionMoveInL_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTransitionMoveInL_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTransitionMoveInL_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTransitionMoveInL_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionMoveInL_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTransitionMoveInL_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTransitionMoveInL_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTransitionMoveInL_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTransitionMoveInL_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTransitionMoveInL_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTransitionMoveInL_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTransitionMoveInL_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTransitionMoveInL_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionMoveInL_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTransitionMoveInL_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTransitionMoveInL_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTransitionMoveInL_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTransitionMoveInL_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionMoveInL_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTransitionMoveInL_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTransitionMoveInL_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTransitionMoveInL_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTransitionMoveInL_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTransitionMoveInL_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionMoveInL_release()", "contents": "release()" }
,
		{ "trigger": "CCTransitionMoveInL_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionMoveInL_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionMoveInL_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionMoveInL_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTransitionMoveInL_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTransitionMoveInL_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTransitionMoveInL_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCTransitionMoveInL_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTransitionMoveInL_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTransitionMoveInL_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTransitionMoveInL_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTransitionMoveInL_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionMoveInL_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTransitionMoveInL_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTransitionMoveInL_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTransitionMoveInL_description()", "contents": "description()" }
,
		{ "trigger": "CCTransitionMoveInL_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTransitionMoveInL_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTransitionMoveInL_create(float_t,CCScene*_scene,)", "contents": "CCTransitionMoveInL:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCTransitionSlideInB_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTransitionSlideInB_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTransitionSlideInB_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTransitionSlideInB_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTransitionSlideInB_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTransitionSlideInB_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTransitionSlideInB_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTransitionSlideInB_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTransitionSlideInB_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCTransitionSlideInB_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCTransitionSlideInB_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionSlideInB_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTransitionSlideInB_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTransitionSlideInB_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionSlideInB_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionSlideInB_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTransitionSlideInB_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionSlideInB_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTransitionSlideInB_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCTransitionSlideInB_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionSlideInB_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTransitionSlideInB_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionSlideInB_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTransitionSlideInB_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionSlideInB_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTransitionSlideInB_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTransitionSlideInB_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCTransitionSlideInB_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTransitionSlideInB_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTransitionSlideInB_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTransitionSlideInB_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTransitionSlideInB_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTransitionSlideInB_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTransitionSlideInB_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionSlideInB_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTransitionSlideInB_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTransitionSlideInB_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionSlideInB_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTransitionSlideInB_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTransitionSlideInB_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTransitionSlideInB_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTransitionSlideInB_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionSlideInB_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionSlideInB_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionSlideInB_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTransitionSlideInB_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTransitionSlideInB_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTransitionSlideInB_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTransitionSlideInB_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTransitionSlideInB_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTransitionSlideInB_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTransitionSlideInB_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionSlideInB_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTransitionSlideInB_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTransitionSlideInB_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTransitionSlideInB_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTransitionSlideInB_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTransitionSlideInB_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTransitionSlideInB_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTransitionSlideInB_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTransitionSlideInB_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTransitionSlideInB_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionSlideInB_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTransitionSlideInB_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTransitionSlideInB_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTransitionSlideInB_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTransitionSlideInB_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTransitionSlideInB_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTransitionSlideInB_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTransitionSlideInB_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTransitionSlideInB_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionSlideInB_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTransitionSlideInB_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTransitionSlideInB_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTransitionSlideInB_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTransitionSlideInB_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionSlideInB_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTransitionSlideInB_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTransitionSlideInB_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTransitionSlideInB_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTransitionSlideInB_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTransitionSlideInB_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionSlideInB_release()", "contents": "release()" }
,
		{ "trigger": "CCTransitionSlideInB_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionSlideInB_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionSlideInB_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionSlideInB_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTransitionSlideInB_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTransitionSlideInB_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTransitionSlideInB_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCTransitionSlideInB_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTransitionSlideInB_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTransitionSlideInB_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTransitionSlideInB_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTransitionSlideInB_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionSlideInB_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTransitionSlideInB_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTransitionSlideInB_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTransitionSlideInB_description()", "contents": "description()" }
,
		{ "trigger": "CCTransitionSlideInB_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTransitionSlideInB_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTransitionSlideInB_create(float_t,CCScene*_scene,)", "contents": "CCTransitionSlideInB:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCParallaxNode_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParallaxNode_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParallaxNode_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParallaxNode_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParallaxNode_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParallaxNode_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParallaxNode_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParallaxNode_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParallaxNode_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCParallaxNode_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCParallaxNode_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParallaxNode_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParallaxNode_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParallaxNode_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParallaxNode_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParallaxNode_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParallaxNode_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParallaxNode_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParallaxNode_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParallaxNode_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCParallaxNode_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParallaxNode_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParallaxNode_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParallaxNode_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParallaxNode_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParallaxNode_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParallaxNode_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParallaxNode_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCParallaxNode_addChild(CCNode_*_child,unsigned_int_z,CCPoint_parallaxRatio,CCPoint_positionOffset,)", "contents": "addChild(${1:CCNode_*_child},${2:unsigned_int_z},${3:CCPoint_parallaxRatio},${4:CCPoint_positionOffset})" }
,
		{ "trigger": "CCParallaxNode_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParallaxNode_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParallaxNode_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParallaxNode_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParallaxNode_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParallaxNode_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParallaxNode_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParallaxNode_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParallaxNode_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParallaxNode_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParallaxNode_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParallaxNode_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParallaxNode_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParallaxNode_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParallaxNode_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParallaxNode_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParallaxNode_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParallaxNode_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParallaxNode_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParallaxNode_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParallaxNode_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParallaxNode_addChild(CCNode_*_child,unsigned_int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:unsigned_int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParallaxNode_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParallaxNode_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParallaxNode_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParallaxNode_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParallaxNode_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParallaxNode_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParallaxNode_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParallaxNode_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParallaxNode_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParallaxNode_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParallaxNode_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParallaxNode_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParallaxNode_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParallaxNode_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParallaxNode_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParallaxNode_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParallaxNode_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParallaxNode_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParallaxNode_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParallaxNode_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParallaxNode_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParallaxNode_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParallaxNode_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParallaxNode_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParallaxNode_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParallaxNode_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParallaxNode_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParallaxNode_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParallaxNode_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParallaxNode_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParallaxNode_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParallaxNode_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParallaxNode_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParallaxNode_release()", "contents": "release()" }
,
		{ "trigger": "CCParallaxNode_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParallaxNode_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParallaxNode_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParallaxNode_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParallaxNode_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParallaxNode_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParallaxNode_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCParallaxNode_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParallaxNode_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParallaxNode_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParallaxNode_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParallaxNode_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParallaxNode_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParallaxNode_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParallaxNode_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParallaxNode_description()", "contents": "description()" }
,
		{ "trigger": "CCParallaxNode_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParallaxNode_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParallaxNode_create()", "contents": "CCParallaxNode:create()" }
,

		{ "trigger": "UICCTextField_setScaleX(float_fScaleX,)", "contents": "setScaleX(${1:float_fScaleX})" }
,
		{ "trigger": "UICCTextField_reorderChild(CCNode*_pChild,int_zOrder,)", "contents": "reorderChild(${1:CCNode*_pChild},${2:int_zOrder})" }
,
		{ "trigger": "UICCTextField_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "UICCTextField_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "UICCTextField_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "UICCTextField_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "UICCTextField_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "UICCTextField_setFlipY(bool_bFlipY,)", "contents": "setFlipY(${1:bool_bFlipY})" }
,
		{ "trigger": "UICCTextField_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "UICCTextField_setTextureRect(CCRect_rect,bool_rotated,CCSize_size,)", "contents": "setTextureRect(${1:CCRect_rect},${2:bool_rotated},${3:CCSize_size})" }
,
		{ "trigger": "UICCTextField_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "UICCTextField_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "UICCTextField_init()", "contents": "init()" }
,
		{ "trigger": "UICCTextField_draw()", "contents": "draw()" }
,
		{ "trigger": "UICCTextField_attachWithIME()", "contents": "attachWithIME()" }
,
		{ "trigger": "UICCTextField_setSkewY(float_sy,)", "contents": "setSkewY(${1:float_sy})" }
,
		{ "trigger": "UICCTextField_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "UICCTextField_getTag()", "contents": "getTag()" }
,
		{ "trigger": "UICCTextField_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "UICCTextField_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "UICCTextField_insertText(const_char*_text,int_len,)", "contents": "insertText(${1:const_char*_text},${2:int_len})" }
,
		{ "trigger": "UICCTextField_onTextFieldDeleteBackward(CCTextFieldTTF_*_pSender,const_char_*_delText,int_nLen,)", "contents": "onTextFieldDeleteBackward(${1:CCTextFieldTTF_*_pSender},${2:const_char_*_delText},${3:int_nLen})" }
,
		{ "trigger": "UICCTextField_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "UICCTextField_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "UICCTextField_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "UICCTextField_setVisible(bool_bVisible,)", "contents": "setVisible(${1:bool_bVisible})" }
,
		{ "trigger": "UICCTextField_getVerticalAlignment()", "contents": "getVerticalAlignment()" }
,
		{ "trigger": "UICCTextField_setFontName(const_char_*fontName,)", "contents": "setFontName(${1:const_char_*fontName})" }
,
		{ "trigger": "UICCTextField_isMaxLengthEnabled()", "contents": "isMaxLengthEnabled()" }
,
		{ "trigger": "UICCTextField_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "UICCTextField_getQuad()", "contents": "getQuad()" }
,
		{ "trigger": "UICCTextField_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "UICCTextField_getParent()", "contents": "getParent()" }
,
		{ "trigger": "UICCTextField_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "UICCTextField_setDeleteBackward(bool_deleteBackward,)", "contents": "setDeleteBackward(${1:bool_deleteBackward})" }
,
		{ "trigger": "UICCTextField_visit()", "contents": "visit()" }
,
		{ "trigger": "UICCTextField_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "UICCTextField_getString()", "contents": "getString()" }
,
		{ "trigger": "UICCTextField_getColorSpaceHolder()", "contents": "getColorSpaceHolder()" }
,
		{ "trigger": "UICCTextField_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "UICCTextField_setPlaceHolder(const_char_*_text,)", "contents": "setPlaceHolder(${1:const_char_*_text})" }
,
		{ "trigger": "UICCTextField_onTextFieldInsertText(CCTextFieldTTF_*_pSender,const_char_*_text,int_nLen,)", "contents": "onTextFieldInsertText(${1:CCTextFieldTTF_*_pSender},${2:const_char_*_text},${3:int_nLen})" }
,
		{ "trigger": "UICCTextField_setAttachWithIME(bool_attach,)", "contents": "setAttachWithIME(${1:bool_attach})" }
,
		{ "trigger": "UICCTextField_setDisplayFrameWithAnimationName(const_char_*animationName,int_frameIndex,)", "contents": "setDisplayFrameWithAnimationName(${1:const_char_*animationName},${2:int_frameIndex})" }
,
		{ "trigger": "UICCTextField_removeAllChildrenWithCleanup(bool_bCleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_bCleanup})" }
,
		{ "trigger": "UICCTextField_displayFrame()", "contents": "displayFrame()" }
,
		{ "trigger": "UICCTextField_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "UICCTextField_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "UICCTextField_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "UICCTextField_getPlaceHolder()", "contents": "getPlaceHolder()" }
,
		{ "trigger": "UICCTextField_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "UICCTextField_getDimensions()", "contents": "getDimensions()" }
,
		{ "trigger": "UICCTextField_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "UICCTextField_setDisplayFrame(CCSpriteFrame_*pNewFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame_*pNewFrame})" }
,
		{ "trigger": "UICCTextField_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "UICCTextField_setMaxLength(int_length,)", "contents": "setMaxLength(${1:int_length})" }
,
		{ "trigger": "UICCTextField_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "UICCTextField_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "UICCTextField_getAttachWithIME()", "contents": "getAttachWithIME()" }
,
		{ "trigger": "UICCTextField_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "UICCTextField_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "UICCTextField_getCharCount()", "contents": "getCharCount()" }
,
		{ "trigger": "UICCTextField_getFontName()", "contents": "getFontName()" }
,
		{ "trigger": "UICCTextField_setBlendFunc(ccBlendFunc_blendFunc,)", "contents": "setBlendFunc(${1:ccBlendFunc_blendFunc})" }
,
		{ "trigger": "UICCTextField_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "UICCTextField_setScaleY(float_fScaleY,)", "contents": "setScaleY(${1:float_fScaleY})" }
,
		{ "trigger": "UICCTextField_setFontSize(float_fontSize,)", "contents": "setFontSize(${1:float_fontSize})" }
,
		{ "trigger": "UICCTextField_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "UICCTextField_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "UICCTextField_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "UICCTextField_setAtlasIndex(unsigned_int_uAtlasIndex,)", "contents": "setAtlasIndex(${1:unsigned_int_uAtlasIndex})" }
,
		{ "trigger": "UICCTextField_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "UICCTextField_isPasswordEnabled()", "contents": "isPasswordEnabled()" }
,
		{ "trigger": "UICCTextField_isDirty()", "contents": "isDirty()" }
,
		{ "trigger": "UICCTextField_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "UICCTextField_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "UICCTextField_addChild(CCNode*_pChild,int_zOrder,)", "contents": "addChild(${1:CCNode*_pChild},${2:int_zOrder})" }
,
		{ "trigger": "UICCTextField_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "UICCTextField_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "UICCTextField_getInsertText()", "contents": "getInsertText()" }
,
		{ "trigger": "UICCTextField_openIME()", "contents": "openIME()" }
,
		{ "trigger": "UICCTextField_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "UICCTextField_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "UICCTextField_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "UICCTextField_setDetachWithIME(bool_detach,)", "contents": "setDetachWithIME(${1:bool_detach})" }
,
		{ "trigger": "UICCTextField_setInsertText(bool_insert,)", "contents": "setInsertText(${1:bool_insert})" }
,
		{ "trigger": "UICCTextField_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "UICCTextField_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "UICCTextField_isFlipY()", "contents": "isFlipY()" }
,
		{ "trigger": "UICCTextField_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "UICCTextField_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "UICCTextField_setDimensions(CCSize_&dim,)", "contents": "setDimensions(${1:CCSize_&dim})" }
,
		{ "trigger": "UICCTextField_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "UICCTextField_getTextureAtlas()", "contents": "getTextureAtlas()" }
,
		{ "trigger": "UICCTextField_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "UICCTextField_isFrameDisplayed(CCSpriteFrame_*pFrame,)", "contents": "isFrameDisplayed(${1:CCSpriteFrame_*pFrame})" }
,
		{ "trigger": "UICCTextField_setColorSpaceHolder(ccColor3B_val,)", "contents": "setColorSpaceHolder(${1:ccColor3B_val})" }
,
		{ "trigger": "UICCTextField_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "UICCTextField_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "UICCTextField_onTextFieldDetachWithIME(CCTextFieldTTF_*_pSender,)", "contents": "onTextFieldDetachWithIME(${1:CCTextFieldTTF_*_pSender})" }
,
		{ "trigger": "UICCTextField_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "UICCTextField_setTextureAtlas(CCTextureAtlas_*pobTextureAtlas,)", "contents": "setTextureAtlas(${1:CCTextureAtlas_*pobTextureAtlas})" }
,
		{ "trigger": "UICCTextField_detachWithIME()", "contents": "detachWithIME()" }
,
		{ "trigger": "UICCTextField_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "UICCTextField_setMaxLengthEnabled(bool_enable,)", "contents": "setMaxLengthEnabled(${1:bool_enable})" }
,
		{ "trigger": "UICCTextField_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "UICCTextField_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "UICCTextField_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "UICCTextField_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "UICCTextField_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "UICCTextField_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "UICCTextField_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "UICCTextField_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "UICCTextField_closeIME()", "contents": "closeIME()" }
,
		{ "trigger": "UICCTextField_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "UICCTextField_getFontSize()", "contents": "getFontSize()" }
,
		{ "trigger": "UICCTextField_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "UICCTextField_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "UICCTextField_retain()", "contents": "retain()" }
,
		{ "trigger": "UICCTextField_getDetachWithIME()", "contents": "getDetachWithIME()" }
,
		{ "trigger": "UICCTextField_addChild(CCNode*_pChild,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode*_pChild},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "UICCTextField_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "UICCTextField_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "UICCTextField_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "UICCTextField_getColor()", "contents": "getColor()" }
,
		{ "trigger": "UICCTextField_getDeleteBackward()", "contents": "getDeleteBackward()" }
,
		{ "trigger": "UICCTextField_setVertexRect(CCRect_rect,)", "contents": "setVertexRect(${1:CCRect_rect})" }
,
		{ "trigger": "UICCTextField_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "UICCTextField_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "UICCTextField_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "UICCTextField_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "UICCTextField_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "UICCTextField_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "UICCTextField_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "UICCTextField_setScale(float_fScale,)", "contents": "setScale(${1:float_fScale})" }
,
		{ "trigger": "UICCTextField_setPasswordStyleText(const_char*_styleText,)", "contents": "setPasswordStyleText(${1:const_char*_styleText})" }
,
		{ "trigger": "UICCTextField_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "UICCTextField_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "UICCTextField_getOffsetPosition()", "contents": "getOffsetPosition()" }
,
		{ "trigger": "UICCTextField_deleteBackward()", "contents": "deleteBackward()" }
,
		{ "trigger": "UICCTextField_copy()", "contents": "copy()" }
,
		{ "trigger": "UICCTextField_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "UICCTextField_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "UICCTextField_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "UICCTextField_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "UICCTextField_setColor(ccColor3B_color3,)", "contents": "setColor(${1:ccColor3B_color3})" }
,
		{ "trigger": "UICCTextField_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "UICCTextField_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "UICCTextField_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "UICCTextField_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "UICCTextField_setRotation(float_rotation,)", "contents": "setRotation(${1:float_rotation})" }
,
		{ "trigger": "UICCTextField_setVertexZ(float_fVertexZ,)", "contents": "setVertexZ(${1:float_fVertexZ})" }
,
		{ "trigger": "UICCTextField_onTextFieldAttachWithIME(CCTextFieldTTF_*pSender,)", "contents": "onTextFieldAttachWithIME(${1:CCTextFieldTTF_*pSender})" }
,
		{ "trigger": "UICCTextField_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "UICCTextField_isTextureRectRotated()", "contents": "isTextureRectRotated()" }
,
		{ "trigger": "UICCTextField_sortAllChildren()", "contents": "sortAllChildren()" }
,
		{ "trigger": "UICCTextField_setString(const_char_*text,)", "contents": "setString(${1:const_char_*text})" }
,
		{ "trigger": "UICCTextField_setPasswordText(const_char*_text,)", "contents": "setPasswordText(${1:const_char*_text})" }
,
		{ "trigger": "UICCTextField_setBatchNode(CCSpriteBatchNode*_pBatchNode,)", "contents": "setBatchNode(${1:CCSpriteBatchNode*_pBatchNode})" }
,
		{ "trigger": "UICCTextField_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "UICCTextField_getAtlasIndex()", "contents": "getAtlasIndex()" }
,
		{ "trigger": "UICCTextField_setTexture(CCTexture2D_*texture,)", "contents": "setTexture(${1:CCTexture2D_*texture})" }
,
		{ "trigger": "UICCTextField_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "UICCTextField_transform()", "contents": "transform()" }
,
		{ "trigger": "UICCTextField_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "UICCTextField_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "UICCTextField_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "UICCTextField_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "UICCTextField_updateTransform()", "contents": "updateTransform()" }
,
		{ "trigger": "UICCTextField_getMaxLength()", "contents": "getMaxLength()" }
,
		{ "trigger": "UICCTextField_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "UICCTextField_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "UICCTextField_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "UICCTextField_getRestrictType()", "contents": "getRestrictType()" }
,
		{ "trigger": "UICCTextField_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "UICCTextField_setPasswordEnabled(bool_enable,)", "contents": "setPasswordEnabled(${1:bool_enable})" }
,
		{ "trigger": "UICCTextField_setVerticalAlignment(CCVerticalTextAlignment_verticalAlignment,)", "contents": "setVerticalAlignment(${1:CCVerticalTextAlignment_verticalAlignment})" }
,
		{ "trigger": "UICCTextField_release()", "contents": "release()" }
,
		{ "trigger": "UICCTextField_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "UICCTextField_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "UICCTextField_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "UICCTextField_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "UICCTextField_setHorizontalAlignment(CCTextAlignment_alignment,)", "contents": "setHorizontalAlignment(${1:CCTextAlignment_alignment})" }
,
		{ "trigger": "UICCTextField_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "UICCTextField_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "UICCTextField_getTextureRect()", "contents": "getTextureRect()" }
,
		{ "trigger": "UICCTextField_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "UICCTextField_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "UICCTextField_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "UICCTextField_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "UICCTextField_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "UICCTextField_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "UICCTextField_removeChild(CCNode*_pChild,bool_bCleanUp,)", "contents": "removeChild(${1:CCNode*_pChild},${2:bool_bCleanUp})" }
,
		{ "trigger": "UICCTextField_isFlipX()", "contents": "isFlipX()" }
,
		{ "trigger": "UICCTextField_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "UICCTextField_setDirty(bool_bDirty,)", "contents": "setDirty(${1:bool_bDirty})" }
,
		{ "trigger": "UICCTextField_getScale()", "contents": "getScale()" }
,
		{ "trigger": "UICCTextField_setFlipX(bool_bFlipX,)", "contents": "setFlipX(${1:bool_bFlipX})" }
,
		{ "trigger": "UICCTextField_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "UICCTextField_setRestrictType(int_type,)", "contents": "setRestrictType(${1:int_type})" }
,
		{ "trigger": "UICCTextField_setSkewX(float_sx,)", "contents": "setSkewX(${1:float_sx})" }
,
		{ "trigger": "UICCTextField_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "UICCTextField_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "UICCTextField_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "UICCTextField_setTextureRect(CCRect_rect,)", "contents": "setTextureRect(${1:CCRect_rect})" }
,
		{ "trigger": "UICCTextField_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "UICCTextField_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "UICCTextField_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "UICCTextField_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "UICCTextField_description()", "contents": "description()" }
,
		{ "trigger": "UICCTextField_setString(const_char_*label,)", "contents": "setString(${1:const_char_*label})" }
,
		{ "trigger": "UICCTextField_addChild(CCNode*_pChild,)", "contents": "addChild(${1:CCNode*_pChild})" }
,
		{ "trigger": "UICCTextField_getHorizontalAlignment()", "contents": "getHorizontalAlignment()" }
,
		{ "trigger": "UICCTextField_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "UICCTextField_onEnter()", "contents": "onEnter()" }
,
		{ "trigger": "UICCTextField_create(const_char_*placeholder,const_char_*fontName,float_fontSize,)", "contents": "UICCTextField:create(${1:const_char_*placeholder},${2:const_char_*fontName},${3:float_fontSize})" }
,

		{ "trigger": "CCEaseElastic_setPeriod(float_fPeriod,)", "contents": "setPeriod(${1:float_fPeriod})" }
,
		{ "trigger": "CCEaseElastic_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseElastic_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseElastic_getPeriod()", "contents": "getPeriod()" }
,
		{ "trigger": "CCEaseElastic_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseElastic_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseElastic_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseElastic_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseElastic_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseElastic_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseElastic_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseElastic_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseElastic_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseElastic_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseElastic_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseElastic_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseElastic_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseElastic_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseElastic_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseElastic_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseElastic_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseElastic_create(CCActionInterval_*pAction,float_fPeriod_=_0.3,)", "contents": "CCEaseElastic:create(${1:CCActionInterval_*pAction},${2:float_fPeriod_=_0.3})" }
,

		{ "trigger": "CCDirector_isPaused()", "contents": "isPaused()" }
,
		{ "trigger": "CCDirector_getRunningScene()", "contents": "getRunningScene()" }
,
		{ "trigger": "CCDirector_popToRootScene()", "contents": "popToRootScene()" }
,
		{ "trigger": "CCDirector_setProjection(ccDirectorProjection_kProjection,)", "contents": "setProjection(${1:ccDirectorProjection_kProjection})" }
,
		{ "trigger": "CCDirector_replaceScene(CCScene_*pScene,)", "contents": "replaceScene(${1:CCScene_*pScene})" }
,
		{ "trigger": "CCDirector_release()", "contents": "release()" }
,
		{ "trigger": "CCDirector_retain()", "contents": "retain()" }
,
		{ "trigger": "CCDirector_getTotalFrames()", "contents": "getTotalFrames()" }
,
		{ "trigger": "CCDirector_popScene()", "contents": "popScene()" }
,
		{ "trigger": "CCDirector_getAnimationInterval()", "contents": "getAnimationInterval()" }
,
		{ "trigger": "CCDirector_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCDirector_getContentScaleFactor()", "contents": "getContentScaleFactor()" }
,
		{ "trigger": "CCDirector_isDisplayStats()", "contents": "isDisplayStats()" }
,
		{ "trigger": "CCDirector_setDepthTest(bool_var,)", "contents": "setDepthTest(${1:bool_var})" }
,
		{ "trigger": "CCDirector_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCDirector_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCDirector_getWinSize()", "contents": "getWinSize()" }
,
		{ "trigger": "CCDirector_setDisplayStats(bool_bDisplayStats,)", "contents": "setDisplayStats(${1:bool_bDisplayStats})" }
,
		{ "trigger": "CCDirector_getProjection()", "contents": "getProjection()" }
,
		{ "trigger": "CCDirector_setContentScaleFactor(float_scaleFactor,)", "contents": "setContentScaleFactor(${1:float_scaleFactor})" }
,
		{ "trigger": "CCDirector_getTouchDispatcher()", "contents": "getTouchDispatcher()" }
,
		{ "trigger": "CCDirector_pause()", "contents": "pause()" }
,
		{ "trigger": "CCDirector_convertToGL(CCPoint_obPoint,)", "contents": "convertToGL(${1:CCPoint_obPoint})" }
,
		{ "trigger": "CCDirector_setNotificationNode(CCNode_*node,)", "contents": "setNotificationNode(${1:CCNode_*node})" }
,
		{ "trigger": "CCDirector_purgeCachedData()", "contents": "purgeCachedData()" }
,
		{ "trigger": "CCDirector_getVisibleSize()", "contents": "getVisibleSize()" }
,
		{ "trigger": "CCDirector_getWinSizeInPixels()", "contents": "getWinSizeInPixels()" }
,
		{ "trigger": "CCDirector_copy()", "contents": "copy()" }
,
		{ "trigger": "CCDirector_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCDirector_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCDirector_runWithScene(CCScene_*pScene,)", "contents": "runWithScene(${1:CCScene_*pScene})" }
,
		{ "trigger": "CCDirector_getZEye()", "contents": "getZEye()" }
,
		{ "trigger": "CCDirector_getOpenGLView()", "contents": "getOpenGLView()" }
,
		{ "trigger": "CCDirector_resume()", "contents": "resume()" }
,
		{ "trigger": "CCDirector_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCDirector_getVisibleOrigin()", "contents": "getVisibleOrigin()" }
,
		{ "trigger": "CCDirector_getNotificationNode()", "contents": "getNotificationNode()" }
,
		{ "trigger": "CCDirector_pushScene(CCScene_*pScene,)", "contents": "pushScene(${1:CCScene_*pScene})" }
,
		{ "trigger": "CCDirector_convertToUI(CCPoint_obPoint,)", "contents": "convertToUI(${1:CCPoint_obPoint})" }
,
		{ "trigger": "CCDirector_sharedDirector()", "contents": "CCDirector:sharedDirector()" }
,

		{ "trigger": "CCScrollView_setDirection(CCScrollViewDirection_eDirection,)", "contents": "setDirection(${1:CCScrollViewDirection_eDirection})" }
,
		{ "trigger": "CCScrollView_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCScrollView_ccTouchBegan(CCTouch_*pTouch,CCEvent_*pEvent,)", "contents": "ccTouchBegan(${1:CCTouch_*pTouch},${2:CCEvent_*pEvent})" }
,
		{ "trigger": "CCScrollView_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCScrollView_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCScrollView_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCScrollView_init()", "contents": "init()" }
,
		{ "trigger": "CCScrollView_draw()", "contents": "draw()" }
,
		{ "trigger": "CCScrollView_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCScrollView_setContainer(CCNode_*_pContainer,)", "contents": "setContainer(${1:CCNode_*_pContainer})" }
,
		{ "trigger": "CCScrollView_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCScrollView_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCScrollView_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCScrollView_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCScrollView_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCScrollView_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCScrollView_visit()", "contents": "visit()" }
,
		{ "trigger": "CCScrollView_getZoomScale()", "contents": "getZoomScale()" }
,
		{ "trigger": "CCScrollView_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCScrollView_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCScrollView_registerScriptAccelerateHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptAccelerateHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCScrollView_registerWithTouchDispatcher()", "contents": "registerWithTouchDispatcher()" }
,
		{ "trigger": "CCScrollView_setZoomScale(float_s,)", "contents": "setZoomScale(${1:float_s})" }
,
		{ "trigger": "CCScrollView_getTouchMode()", "contents": "getTouchMode()" }
,
		{ "trigger": "CCScrollView_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCScrollView_setAccelerometerEnabled(bool_bValue,)", "contents": "setAccelerometerEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCScrollView_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCScrollView_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCScrollView_unregisterScriptTouchHandler()", "contents": "unregisterScriptTouchHandler()" }
,
		{ "trigger": "CCScrollView_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCScrollView_ccTouchEnded(CCTouch_*pTouch,CCEvent_*pEvent,)", "contents": "ccTouchEnded(${1:CCTouch_*pTouch},${2:CCEvent_*pEvent})" }
,
		{ "trigger": "CCScrollView_transform()", "contents": "transform()" }
,
		{ "trigger": "CCScrollView_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCScrollView_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCScrollView_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCScrollView_unregisterScriptAccelerateHandler()", "contents": "unregisterScriptAccelerateHandler()" }
,
		{ "trigger": "CCScrollView_setContentOffsetInDuration(CCPoint_offset,float_dt,)", "contents": "setContentOffsetInDuration(${1:CCPoint_offset},${2:float_dt})" }
,
		{ "trigger": "CCScrollView_ccTouchMoved(CCTouch_*pTouch,CCEvent_*pEvent,)", "contents": "ccTouchMoved(${1:CCTouch_*pTouch},${2:CCEvent_*pEvent})" }
,
		{ "trigger": "CCScrollView_isClippingToBounds()", "contents": "isClippingToBounds()" }
,
		{ "trigger": "CCScrollView_registerScriptKeypadHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptKeypadHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCScrollView_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCScrollView_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCScrollView_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCScrollView_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCScrollView_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCScrollView_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCScrollView_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCScrollView_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCScrollView_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCScrollView_setKeypadEnabled(bool_bValue,)", "contents": "setKeypadEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCScrollView_setTouchEnabled(bool_e,)", "contents": "setTouchEnabled(${1:bool_e})" }
,
		{ "trigger": "CCScrollView_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCScrollView_setTouchPriority(int_priority,)", "contents": "setTouchPriority(${1:int_priority})" }
,
		{ "trigger": "CCScrollView_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCScrollView_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCScrollView_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCScrollView_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCScrollView_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCScrollView_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCScrollView_setTouchEnabled(bool_bValue,)", "contents": "setTouchEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCScrollView_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCScrollView_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCScrollView_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCScrollView_getViewSize()", "contents": "getViewSize()" }
,
		{ "trigger": "CCScrollView_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCScrollView_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCScrollView_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "CCScrollView_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCScrollView_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCScrollView_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCScrollView_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCScrollView_setBounceable(bool_bBounceable,)", "contents": "setBounceable(${1:bool_bBounceable})" }
,
		{ "trigger": "CCScrollView_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCScrollView_setViewSize(CCSize_size,)", "contents": "setViewSize(${1:CCSize_size})" }
,
		{ "trigger": "CCScrollView_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCScrollView_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCScrollView_retain()", "contents": "retain()" }
,
		{ "trigger": "CCScrollView_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCScrollView_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCScrollView_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCScrollView_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCScrollView_setZoomScale(float_s,bool_animated,)", "contents": "setZoomScale(${1:float_s},${2:bool_animated})" }
,
		{ "trigger": "CCScrollView_unregisterScriptKeypadHandler()", "contents": "unregisterScriptKeypadHandler()" }
,
		{ "trigger": "CCScrollView_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCScrollView_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCScrollView_setClippingToBounds(bool_bClippingToBounds,)", "contents": "setClippingToBounds(${1:bool_bClippingToBounds})" }
,
		{ "trigger": "CCScrollView_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCScrollView_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCScrollView_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCScrollView_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCScrollView_isDragging()", "contents": "isDragging()" }
,
		{ "trigger": "CCScrollView_isTouchMoved()", "contents": "isTouchMoved()" }
,
		{ "trigger": "CCScrollView_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCScrollView_setZoomScaleInDuration(float_s,float_dt,)", "contents": "setZoomScaleInDuration(${1:float_s},${2:float_dt})" }
,
		{ "trigger": "CCScrollView_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCScrollView_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCScrollView_pause(CCObject*_sender,)", "contents": "pause(${1:CCObject*_sender})" }
,
		{ "trigger": "CCScrollView_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCScrollView_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCScrollView_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCScrollView_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCScrollView_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCScrollView_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCScrollView_isKeypadEnabled()", "contents": "isKeypadEnabled()" }
,
		{ "trigger": "CCScrollView_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCScrollView_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCScrollView_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCScrollView_updateInset()", "contents": "updateInset()" }
,
		{ "trigger": "CCScrollView_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCScrollView_ccTouchCancelled(CCTouch_*pTouch,CCEvent_*pEvent,)", "contents": "ccTouchCancelled(${1:CCTouch_*pTouch},${2:CCEvent_*pEvent})" }
,
		{ "trigger": "CCScrollView_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCScrollView_registerScriptTouchHandler(LUA_FUNCTION_nHandler,bool_bIsMultiTouches_=_false,int_nPriority_=_0,bool_bSwallowsTouches_=_false,)", "contents": "registerScriptTouchHandler(${1:LUA_FUNCTION_nHandler},${2:bool_bIsMultiTouches_=_false},${3:int_nPriority_=_0},${4:bool_bSwallowsTouches_=_false})" }
,
		{ "trigger": "CCScrollView_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCScrollView_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCScrollView_minContainerOffset()", "contents": "minContainerOffset()" }
,
		{ "trigger": "CCScrollView_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCScrollView_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCScrollView_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCScrollView_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCScrollView_getContainer()", "contents": "getContainer()" }
,
		{ "trigger": "CCScrollView_setContentOffset(CCPoint_offset,bool_animated_=_false,)", "contents": "setContentOffset(${1:CCPoint_offset},${2:bool_animated_=_false})" }
,
		{ "trigger": "CCScrollView_release()", "contents": "release()" }
,
		{ "trigger": "CCScrollView_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCScrollView_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCScrollView_isBounceable()", "contents": "isBounceable()" }
,
		{ "trigger": "CCScrollView_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCScrollView_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCScrollView_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCScrollView_getDirection()", "contents": "getDirection()" }
,
		{ "trigger": "CCScrollView_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCScrollView_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCScrollView_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCScrollView_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCScrollView_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCScrollView_resume(CCObject*_sender,)", "contents": "resume(${1:CCObject*_sender})" }
,
		{ "trigger": "CCScrollView_initWithViewSize(CCSize_size,CCNode*_container_=_NULL,)", "contents": "initWithViewSize(${1:CCSize_size},${2:CCNode*_container_=_NULL})" }
,
		{ "trigger": "CCScrollView_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCScrollView_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCScrollView_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCScrollView_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCScrollView_isAccelerometerEnabled()", "contents": "isAccelerometerEnabled()" }
,
		{ "trigger": "CCScrollView_getContentOffset()", "contents": "getContentOffset()" }
,
		{ "trigger": "CCScrollView_getTouchPriority()", "contents": "getTouchPriority()" }
,
		{ "trigger": "CCScrollView_copy()", "contents": "copy()" }
,
		{ "trigger": "CCScrollView_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCScrollView_description()", "contents": "description()" }
,
		{ "trigger": "CCScrollView_setTouchMode(ccTouchesMode_mode,)", "contents": "setTouchMode(${1:ccTouchesMode_mode})" }
,
		{ "trigger": "CCScrollView_isNodeVisible(CCNode_*_node,)", "contents": "isNodeVisible(${1:CCNode_*_node})" }
,
		{ "trigger": "CCScrollView_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCScrollView_maxContainerOffset()", "contents": "maxContainerOffset()" }
,
		{ "trigger": "CCScrollView_create(CCSize_size,CCNode*_container_=_NULL,)", "contents": "CCScrollView:create(${1:CCSize_size},${2:CCNode*_container_=_NULL})" }
,
		{ "trigger": "CCScrollView_create()", "contents": "CCScrollView:create()" }
,

		{ "trigger": "CCEaseElasticOut_setPeriod(float_fPeriod,)", "contents": "setPeriod(${1:float_fPeriod})" }
,
		{ "trigger": "CCEaseElasticOut_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseElasticOut_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseElasticOut_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseElasticOut_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseElasticOut_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseElasticOut_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseElasticOut_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseElasticOut_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseElasticOut_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseElasticOut_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseElasticOut_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseElasticOut_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseElasticOut_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseElasticOut_getPeriod()", "contents": "getPeriod()" }
,
		{ "trigger": "CCEaseElasticOut_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseElasticOut_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseElasticOut_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseElasticOut_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseElasticOut_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseElasticOut_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseElasticOut_create(CCActionInterval_*pAction,float_fPeriod_=_0.3,)", "contents": "CCEaseElasticOut:create(${1:CCActionInterval_*pAction},${2:float_fPeriod_=_0.3})" }
,

		{ "trigger": "CCParticleSnow_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleSnow_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleSnow_setStartSizeVar(float_size,)", "contents": "setStartSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleSnow_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleSnow_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleSnow_getRadialAccelVar()", "contents": "getRadialAccelVar()" }
,
		{ "trigger": "CCParticleSnow_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleSnow_setStartRadiusVar(float_startRadiusVar,)", "contents": "setStartRadiusVar(${1:float_startRadiusVar})" }
,
		{ "trigger": "CCParticleSnow_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleSnow_setTexture(CCTexture2D*_var,)", "contents": "setTexture(${1:CCTexture2D*_var})" }
,
		{ "trigger": "CCParticleSnow_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleSnow_isAutoRemoveOnFinish()", "contents": "isAutoRemoveOnFinish()" }
,
		{ "trigger": "CCParticleSnow_getTotalParticles()", "contents": "getTotalParticles()" }
,
		{ "trigger": "CCParticleSnow_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleSnow_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleSnow_setPositionType(tCCPositionType_type,)", "contents": "setPositionType(${1:tCCPositionType_type})" }
,
		{ "trigger": "CCParticleSnow_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCParticleSnow_setDisplayFrame(CCSpriteFrame*_spriteFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame*_spriteFrame})" }
,
		{ "trigger": "CCParticleSnow_getSourcePosition()", "contents": "getSourcePosition()" }
,
		{ "trigger": "CCParticleSnow_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleSnow_setBlendAdditive(bool_value,)", "contents": "setBlendAdditive(${1:bool_value})" }
,
		{ "trigger": "CCParticleSnow_setGravity(const_CCPoint&_g,)", "contents": "setGravity(${1:const_CCPoint&_g})" }
,
		{ "trigger": "CCParticleSnow_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSnow_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleSnow_stopSystem()", "contents": "stopSystem()" }
,
		{ "trigger": "CCParticleSnow_setLifeVar(float_lifeVar,)", "contents": "setLifeVar(${1:float_lifeVar})" }
,
		{ "trigger": "CCParticleSnow_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleSnow_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleSnow_setPosVar(CCPoint_pos,)", "contents": "setPosVar(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSnow_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleSnow_setEmissionRate(float_rate,)", "contents": "setEmissionRate(${1:float_rate})" }
,
		{ "trigger": "CCParticleSnow_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCParticleSnow_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleSnow_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleSnow_getEndColorVar()", "contents": "getEndColorVar()" }
,
		{ "trigger": "CCParticleSnow_getEndSize()", "contents": "getEndSize()" }
,
		{ "trigger": "CCParticleSnow_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleSnow_setEndRadiusVar(float_endRadiusVar,)", "contents": "setEndRadiusVar(${1:float_endRadiusVar})" }
,
		{ "trigger": "CCParticleSnow_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleSnow_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleSnow_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleSnow_setEndColorVar(const_ccColor4F_var,)", "contents": "setEndColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSnow_getEndSpin()", "contents": "getEndSpin()" }
,
		{ "trigger": "CCParticleSnow_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleSnow_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCParticleSnow_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleSnow_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCParticleSnow_setDuration(float_d,)", "contents": "setDuration(${1:float_d})" }
,
		{ "trigger": "CCParticleSnow_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleSnow_setStartSpinVar(float_var,)", "contents": "setStartSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleSnow_getEmitterMode()", "contents": "getEmitterMode()" }
,
		{ "trigger": "CCParticleSnow_updateQuadWithParticle(tCCParticle*_particle,const_CCPoint&_newPosition,)", "contents": "updateQuadWithParticle(${1:tCCParticle*_particle},${2:const_CCPoint&_newPosition})" }
,
		{ "trigger": "CCParticleSnow_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleSnow_setSpeed(float_speed,)", "contents": "setSpeed(${1:float_speed})" }
,
		{ "trigger": "CCParticleSnow_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleSnow_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleSnow_getGravity()", "contents": "getGravity()" }
,
		{ "trigger": "CCParticleSnow_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleSnow_setEndSpinVar(float_var,)", "contents": "setEndSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleSnow_getAngle()", "contents": "getAngle()" }
,
		{ "trigger": "CCParticleSnow_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleSnow_setStartRadius(float_startRadius,)", "contents": "setStartRadius(${1:float_startRadius})" }
,
		{ "trigger": "CCParticleSnow_getAngleVar()", "contents": "getAngleVar()" }
,
		{ "trigger": "CCParticleSnow_setEmitterMode(int_mode,)", "contents": "setEmitterMode(${1:int_mode})" }
,
		{ "trigger": "CCParticleSnow_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleSnow_getTangentialAccel()", "contents": "getTangentialAccel()" }
,
		{ "trigger": "CCParticleSnow_getRotatePerSecondVar()", "contents": "getRotatePerSecondVar()" }
,
		{ "trigger": "CCParticleSnow_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleSnow_getLifeVar()", "contents": "getLifeVar()" }
,
		{ "trigger": "CCParticleSnow_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSnow_setStartSpin(float_var,)", "contents": "setStartSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleSnow_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleSnow_getStartSize()", "contents": "getStartSize()" }
,
		{ "trigger": "CCParticleSnow_getEndRadius()", "contents": "getEndRadius()" }
,
		{ "trigger": "CCParticleSnow_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleSnow_addParticle()", "contents": "addParticle()" }
,
		{ "trigger": "CCParticleSnow_setBlendFunc(ccBlendFunc_var,)", "contents": "setBlendFunc(${1:ccBlendFunc_var})" }
,
		{ "trigger": "CCParticleSnow_initParticle(tCCParticle*_particle,)", "contents": "initParticle(${1:tCCParticle*_particle})" }
,
		{ "trigger": "CCParticleSnow_getTangentialAccelVar()", "contents": "getTangentialAccelVar()" }
,
		{ "trigger": "CCParticleSnow_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleSnow_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleSnow_setAngle(float_angle,)", "contents": "setAngle(${1:float_angle})" }
,
		{ "trigger": "CCParticleSnow_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleSnow_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleSnow_getEndRadiusVar()", "contents": "getEndRadiusVar()" }
,
		{ "trigger": "CCParticleSnow_getStartSpin()", "contents": "getStartSpin()" }
,
		{ "trigger": "CCParticleSnow_setSpeedVar(float_speed,)", "contents": "setSpeedVar(${1:float_speed})" }
,
		{ "trigger": "CCParticleSnow_getLife()", "contents": "getLife()" }
,
		{ "trigger": "CCParticleSnow_isBlendAdditive()", "contents": "isBlendAdditive()" }
,
		{ "trigger": "CCParticleSnow_getParticleCount()", "contents": "getParticleCount()" }
,
		{ "trigger": "CCParticleSnow_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleSnow_getEndSpinVar()", "contents": "getEndSpinVar()" }
,
		{ "trigger": "CCParticleSnow_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleSnow_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleSnow_setStartSize(float_size,)", "contents": "setStartSize(${1:float_size})" }
,
		{ "trigger": "CCParticleSnow_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleSnow_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSnow_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleSnow_getStartSpinVar()", "contents": "getStartSpinVar()" }
,
		{ "trigger": "CCParticleSnow_setRadialAccelVar(float_t,)", "contents": "setRadialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleSnow_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCParticleSnow_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleSnow_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleSnow_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleSnow_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleSnow_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleSnow_setTextureWithRect(CCTexture2D_*texture,const_CCRect&_rect,)", "contents": "setTextureWithRect(${1:CCTexture2D_*texture},${2:const_CCRect&_rect})" }
,
		{ "trigger": "CCParticleSnow_setSourcePosition(CCPoint_pos,)", "contents": "setSourcePosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSnow_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleSnow_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleSnow_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleSnow_getRotatePerSecond()", "contents": "getRotatePerSecond()" }
,
		{ "trigger": "CCParticleSnow_initWithTotalParticles(unsigned_int_number,)", "contents": "initWithTotalParticles(${1:unsigned_int_number})" }
,
		{ "trigger": "CCParticleSnow_setBatchNode(CCParticleBatchNode*_node,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_node})" }
,
		{ "trigger": "CCParticleSnow_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleSnow_isActive()", "contents": "isActive()" }
,
		{ "trigger": "CCParticleSnow_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleSnow_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleSnow_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleSnow_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleSnow_setEndSpin(float_var,)", "contents": "setEndSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleSnow_resetSystem()", "contents": "resetSystem()" }
,
		{ "trigger": "CCParticleSnow_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleSnow_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleSnow_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleSnow_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleSnow_getEndSizeVar()", "contents": "getEndSizeVar()" }
,
		{ "trigger": "CCParticleSnow_setStartColorVar(const_ccColor4F_var,)", "contents": "setStartColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSnow_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSnow_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleSnow_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleSnow_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleSnow_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleSnow_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleSnow_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleSnow_setStartColor(const_ccColor4F_var,)", "contents": "setStartColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSnow_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleSnow_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleSnow_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleSnow_setAngleVar(float_angle,)", "contents": "setAngleVar(${1:float_angle})" }
,
		{ "trigger": "CCParticleSnow_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleSnow_setTexture(CCTexture2D*_texture,)", "contents": "setTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCParticleSnow_setTangentialAccelVar(float_t,)", "contents": "setTangentialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleSnow_setRotatePerSecond(float_degrees,)", "contents": "setRotatePerSecond(${1:float_degrees})" }
,
		{ "trigger": "CCParticleSnow_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleSnow_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleSnow_setTotalParticles(unsigned_int_tp,)", "contents": "setTotalParticles(${1:unsigned_int_tp})" }
,
		{ "trigger": "CCParticleSnow_getSpeedVar()", "contents": "getSpeedVar()" }
,
		{ "trigger": "CCParticleSnow_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleSnow_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleSnow_getStartSizeVar()", "contents": "getStartSizeVar()" }
,
		{ "trigger": "CCParticleSnow_setAutoRemoveOnFinish(bool_var,)", "contents": "setAutoRemoveOnFinish(${1:bool_var})" }
,
		{ "trigger": "CCParticleSnow_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleSnow_setTangentialAccel(float_t,)", "contents": "setTangentialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleSnow_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleSnow_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleSnow_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleSnow_setLife(float_life,)", "contents": "setLife(${1:float_life})" }
,
		{ "trigger": "CCParticleSnow_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleSnow_setEndColor(const_ccColor4F_var,)", "contents": "setEndColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSnow_getRadialAccel()", "contents": "getRadialAccel()" }
,
		{ "trigger": "CCParticleSnow_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleSnow_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleSnow_setRotatePerSecondVar(float_degrees,)", "contents": "setRotatePerSecondVar(${1:float_degrees})" }
,
		{ "trigger": "CCParticleSnow_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleSnow_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleSnow_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCParticleSnow_getStartRadiusVar()", "contents": "getStartRadiusVar()" }
,
		{ "trigger": "CCParticleSnow_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleSnow_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleSnow_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleSnow_setBatchNode(CCParticleBatchNode*_batchNode,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_batchNode})" }
,
		{ "trigger": "CCParticleSnow_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleSnow_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCParticleSnow_getPosVar()", "contents": "getPosVar()" }
,
		{ "trigger": "CCParticleSnow_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleSnow_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "CCParticleSnow_setEndSize(float_size,)", "contents": "setEndSize(${1:float_size})" }
,
		{ "trigger": "CCParticleSnow_getEmissionRate()", "contents": "getEmissionRate()" }
,
		{ "trigger": "CCParticleSnow_setRadialAccel(float_t,)", "contents": "setRadialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleSnow_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleSnow_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleSnow_initWithFile(const_char*_plistFile,)", "contents": "initWithFile(${1:const_char*_plistFile})" }
,
		{ "trigger": "CCParticleSnow_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleSnow_setEndSizeVar(float_size,)", "contents": "setEndSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleSnow_isFull()", "contents": "isFull()" }
,
		{ "trigger": "CCParticleSnow_getStartRadius()", "contents": "getStartRadius()" }
,
		{ "trigger": "CCParticleSnow_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleSnow_setScale(float_s,)", "contents": "setScale(${1:float_s})" }
,
		{ "trigger": "CCParticleSnow_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCParticleSnow_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleSnow_getStartColorVar()", "contents": "getStartColorVar()" }
,
		{ "trigger": "CCParticleSnow_postStep()", "contents": "postStep()" }
,
		{ "trigger": "CCParticleSnow_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleSnow_setEndRadius(float_endRadius,)", "contents": "setEndRadius(${1:float_endRadius})" }
,
		{ "trigger": "CCParticleSnow_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCParticleSnow_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCParticleSnow_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleSnow_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleSnow_create()", "contents": "CCParticleSnow:create()" }
,

		{ "trigger": "CCShatteredTiles3D_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCShatteredTiles3D_originalTile(CCPoint_pos,)", "contents": "originalTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCShatteredTiles3D_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCShatteredTiles3D_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCShatteredTiles3D_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCShatteredTiles3D_release()", "contents": "release()" }
,
		{ "trigger": "CCShatteredTiles3D_setTile(CCPoint_pos,ccQuad3_coords,)", "contents": "setTile(${1:CCPoint_pos},${2:ccQuad3_coords})" }
,
		{ "trigger": "CCShatteredTiles3D_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCShatteredTiles3D_retain()", "contents": "retain()" }
,
		{ "trigger": "CCShatteredTiles3D_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCShatteredTiles3D_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCShatteredTiles3D_tile(CCPoint_pos,)", "contents": "tile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCShatteredTiles3D_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCShatteredTiles3D_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCShatteredTiles3D_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCShatteredTiles3D_copy()", "contents": "copy()" }
,
		{ "trigger": "CCShatteredTiles3D_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCShatteredTiles3D_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCShatteredTiles3D_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCShatteredTiles3D_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCShatteredTiles3D_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCShatteredTiles3D_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCShatteredTiles3D_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCShatteredTiles3D_create(float_duration,CCSize_gridSize,int_nRange,bool_bShatterZ,)", "contents": "CCShatteredTiles3D:create(${1:float_duration},${2:CCSize_gridSize},${3:int_nRange},${4:bool_bShatterZ})" }
,

		{ "trigger": "CCLiquid_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCLiquid_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCLiquid_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCLiquid_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCLiquid_release()", "contents": "release()" }
,
		{ "trigger": "CCLiquid_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCLiquid_retain()", "contents": "retain()" }
,
		{ "trigger": "CCLiquid_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCLiquid_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCLiquid_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCLiquid_vertex(const_CCPoint&_pos,)", "contents": "vertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCLiquid_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCLiquid_setAmplitude(float_fAmplitude,)", "contents": "setAmplitude(${1:float_fAmplitude})" }
,
		{ "trigger": "CCLiquid_copy()", "contents": "copy()" }
,
		{ "trigger": "CCLiquid_getAmplitude()", "contents": "getAmplitude()" }
,
		{ "trigger": "CCLiquid_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCLiquid_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCLiquid_setAmplitudeRate(float_fAmplitudeRate,)", "contents": "setAmplitudeRate(${1:float_fAmplitudeRate})" }
,
		{ "trigger": "CCLiquid_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCLiquid_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCLiquid_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCLiquid_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCLiquid_setVertex(const_CCPoint&_pos,const_ccVertex3F&_vertex,)", "contents": "setVertex(${1:const_CCPoint&_pos},${2:const_ccVertex3F&_vertex})" }
,
		{ "trigger": "CCLiquid_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCLiquid_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCLiquid_originalVertex(const_CCPoint&_pos,)", "contents": "originalVertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCLiquid_create(float_duration,CCSize_gridSize,unsigned_int_waves,float_amplitude,)", "contents": "CCLiquid:create(${1:float_duration},${2:CCSize_gridSize},${3:unsigned_int_waves},${4:float_amplitude})" }
,

		{ "trigger": "CCTransitionFlipY_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTransitionFlipY_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTransitionFlipY_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTransitionFlipY_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTransitionFlipY_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTransitionFlipY_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTransitionFlipY_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTransitionFlipY_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTransitionFlipY_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCTransitionFlipY_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCTransitionFlipY_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionFlipY_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTransitionFlipY_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTransitionFlipY_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionFlipY_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionFlipY_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTransitionFlipY_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFlipY_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTransitionFlipY_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCTransitionFlipY_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFlipY_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTransitionFlipY_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionFlipY_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTransitionFlipY_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionFlipY_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTransitionFlipY_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTransitionFlipY_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCTransitionFlipY_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTransitionFlipY_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTransitionFlipY_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTransitionFlipY_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTransitionFlipY_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTransitionFlipY_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTransitionFlipY_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionFlipY_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTransitionFlipY_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTransitionFlipY_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionFlipY_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTransitionFlipY_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTransitionFlipY_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTransitionFlipY_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTransitionFlipY_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionFlipY_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFlipY_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionFlipY_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTransitionFlipY_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTransitionFlipY_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTransitionFlipY_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTransitionFlipY_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTransitionFlipY_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTransitionFlipY_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTransitionFlipY_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionFlipY_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTransitionFlipY_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTransitionFlipY_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTransitionFlipY_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTransitionFlipY_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTransitionFlipY_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTransitionFlipY_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTransitionFlipY_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTransitionFlipY_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTransitionFlipY_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionFlipY_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTransitionFlipY_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTransitionFlipY_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTransitionFlipY_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTransitionFlipY_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTransitionFlipY_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTransitionFlipY_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTransitionFlipY_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTransitionFlipY_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionFlipY_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTransitionFlipY_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTransitionFlipY_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTransitionFlipY_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTransitionFlipY_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionFlipY_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTransitionFlipY_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTransitionFlipY_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTransitionFlipY_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTransitionFlipY_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTransitionFlipY_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionFlipY_release()", "contents": "release()" }
,
		{ "trigger": "CCTransitionFlipY_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionFlipY_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFlipY_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionFlipY_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTransitionFlipY_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTransitionFlipY_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTransitionFlipY_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCTransitionFlipY_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTransitionFlipY_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTransitionFlipY_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTransitionFlipY_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTransitionFlipY_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionFlipY_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTransitionFlipY_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTransitionFlipY_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTransitionFlipY_description()", "contents": "description()" }
,
		{ "trigger": "CCTransitionFlipY_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTransitionFlipY_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTransitionFlipY_create(float_t,CCScene*_s,tOrientation_o_=_kCCTransitionOrientationUpOver,)", "contents": "CCTransitionFlipY:create(${1:float_t},${2:CCScene*_s},${3:tOrientation_o_=_kCCTransitionOrientationUpOver})" }
,

		{ "trigger": "CCTransitionFlipX_create(float_t,CCScene*_s,tOrientation_o_=_kCCTransitionOrientationRightOver,)", "contents": "CCTransitionFlipX:create(${1:float_t},${2:CCScene*_s},${3:tOrientation_o_=_kCCTransitionOrientationRightOver})" }
,

		{ "trigger": "CCLayerRGBA_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCLayerRGBA_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCLayerRGBA_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCLayerRGBA_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCLayerRGBA_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCLayerRGBA_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCLayerRGBA_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCLayerRGBA_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCLayerRGBA_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCLayerRGBA_init()", "contents": "init()" }
,
		{ "trigger": "CCLayerRGBA_draw()", "contents": "draw()" }
,
		{ "trigger": "CCLayerRGBA_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCLayerRGBA_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCLayerRGBA_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCLayerRGBA_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCLayerRGBA_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCLayerRGBA_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCLayerRGBA_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCLayerRGBA_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLayerRGBA_visit()", "contents": "visit()" }
,
		{ "trigger": "CCLayerRGBA_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCLayerRGBA_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCLayerRGBA_registerScriptAccelerateHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptAccelerateHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCLayerRGBA_getTouchMode()", "contents": "getTouchMode()" }
,
		{ "trigger": "CCLayerRGBA_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLayerRGBA_setAccelerometerEnabled(bool_bValue,)", "contents": "setAccelerometerEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCLayerRGBA_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCLayerRGBA_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCLayerRGBA_unregisterScriptTouchHandler()", "contents": "unregisterScriptTouchHandler()" }
,
		{ "trigger": "CCLayerRGBA_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCLayerRGBA_transform()", "contents": "transform()" }
,
		{ "trigger": "CCLayerRGBA_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCLayerRGBA_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLayerRGBA_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCLayerRGBA_unregisterScriptAccelerateHandler()", "contents": "unregisterScriptAccelerateHandler()" }
,
		{ "trigger": "CCLayerRGBA_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCLayerRGBA_registerScriptKeypadHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptKeypadHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCLayerRGBA_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLayerRGBA_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCLayerRGBA_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLayerRGBA_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCLayerRGBA_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCLayerRGBA_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCLayerRGBA_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCLayerRGBA_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCLayerRGBA_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCLayerRGBA_setKeypadEnabled(bool_bValue,)", "contents": "setKeypadEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCLayerRGBA_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCLayerRGBA_setTouchPriority(int_priority,)", "contents": "setTouchPriority(${1:int_priority})" }
,
		{ "trigger": "CCLayerRGBA_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCLayerRGBA_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCLayerRGBA_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLayerRGBA_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCLayerRGBA_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCLayerRGBA_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLayerRGBA_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCLayerRGBA_setTouchEnabled(bool_bValue,)", "contents": "setTouchEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCLayerRGBA_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCLayerRGBA_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCLayerRGBA_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCLayerRGBA_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCLayerRGBA_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCLayerRGBA_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCLayerRGBA_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLayerRGBA_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "CCLayerRGBA_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLayerRGBA_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLayerRGBA_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCLayerRGBA_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCLayerRGBA_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCLayerRGBA_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCLayerRGBA_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCLayerRGBA_retain()", "contents": "retain()" }
,
		{ "trigger": "CCLayerRGBA_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLayerRGBA_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCLayerRGBA_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCLayerRGBA_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCLayerRGBA_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCLayerRGBA_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCLayerRGBA_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCLayerRGBA_unregisterScriptKeypadHandler()", "contents": "unregisterScriptKeypadHandler()" }
,
		{ "trigger": "CCLayerRGBA_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCLayerRGBA_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCLayerRGBA_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCLayerRGBA_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCLayerRGBA_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCLayerRGBA_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCLayerRGBA_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCLayerRGBA_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCLayerRGBA_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCLayerRGBA_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCLayerRGBA_isAccelerometerEnabled()", "contents": "isAccelerometerEnabled()" }
,
		{ "trigger": "CCLayerRGBA_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCLayerRGBA_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCLayerRGBA_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCLayerRGBA_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCLayerRGBA_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCLayerRGBA_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCLayerRGBA_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCLayerRGBA_isKeypadEnabled()", "contents": "isKeypadEnabled()" }
,
		{ "trigger": "CCLayerRGBA_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCLayerRGBA_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCLayerRGBA_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCLayerRGBA_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCLayerRGBA_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCLayerRGBA_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLayerRGBA_registerScriptTouchHandler(LUA_FUNCTION_nHandler,bool_bIsMultiTouches_=_false,int_nPriority_=_0,bool_bSwallowsTouches_=_false,)", "contents": "registerScriptTouchHandler(${1:LUA_FUNCTION_nHandler},${2:bool_bIsMultiTouches_=_false},${3:int_nPriority_=_0},${4:bool_bSwallowsTouches_=_false})" }
,
		{ "trigger": "CCLayerRGBA_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCLayerRGBA_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCLayerRGBA_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCLayerRGBA_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCLayerRGBA_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCLayerRGBA_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCLayerRGBA_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLayerRGBA_release()", "contents": "release()" }
,
		{ "trigger": "CCLayerRGBA_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLayerRGBA_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCLayerRGBA_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLayerRGBA_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCLayerRGBA_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCLayerRGBA_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCLayerRGBA_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCLayerRGBA_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCLayerRGBA_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCLayerRGBA_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCLayerRGBA_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCLayerRGBA_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCLayerRGBA_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCLayerRGBA_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLayerRGBA_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCLayerRGBA_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCLayerRGBA_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCLayerRGBA_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCLayerRGBA_getTouchPriority()", "contents": "getTouchPriority()" }
,
		{ "trigger": "CCLayerRGBA_copy()", "contents": "copy()" }
,
		{ "trigger": "CCLayerRGBA_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCLayerRGBA_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCLayerRGBA_description()", "contents": "description()" }
,
		{ "trigger": "CCLayerRGBA_setTouchMode(ccTouchesMode_mode,)", "contents": "setTouchMode(${1:ccTouchesMode_mode})" }
,
		{ "trigger": "CCLayerRGBA_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCLayerRGBA_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCLayerRGBA_create()", "contents": "CCLayerRGBA:create()" }
,

		{ "trigger": "CCSpriteFrame_getRectInPixels()", "contents": "getRectInPixels()" }
,
		{ "trigger": "CCSpriteFrame_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCSpriteFrame_setOriginalSize(const_CCSize_&_size,)", "contents": "setOriginalSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCSpriteFrame_release()", "contents": "release()" }
,
		{ "trigger": "CCSpriteFrame_setRotated(bool_bRotated,)", "contents": "setRotated(${1:bool_bRotated})" }
,
		{ "trigger": "CCSpriteFrame_setTexture(CCTexture2D*_pobTexture,)", "contents": "setTexture(${1:CCTexture2D*_pobTexture})" }
,
		{ "trigger": "CCSpriteFrame_retain()", "contents": "retain()" }
,
		{ "trigger": "CCSpriteFrame_setOriginalSizeInPixels(CCSize_sizeInPixels,)", "contents": "setOriginalSizeInPixels(${1:CCSize_sizeInPixels})" }
,
		{ "trigger": "CCSpriteFrame_setRectInPixels(CCRect_rectInPixels,)", "contents": "setRectInPixels(${1:CCRect_rectInPixels})" }
,
		{ "trigger": "CCSpriteFrame_getOffsetInPixels()", "contents": "getOffsetInPixels()" }
,
		{ "trigger": "CCSpriteFrame_getOffset()", "contents": "getOffset()" }
,
		{ "trigger": "CCSpriteFrame_setOffsetInPixels(CCPoint_offsetInPixels,)", "contents": "setOffsetInPixels(${1:CCPoint_offsetInPixels})" }
,
		{ "trigger": "CCSpriteFrame_setRect(CCRect_rect,)", "contents": "setRect(${1:CCRect_rect})" }
,
		{ "trigger": "CCSpriteFrame_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCSpriteFrame_getOriginalSizeInPixels()", "contents": "getOriginalSizeInPixels()" }
,
		{ "trigger": "CCSpriteFrame_isRotated()", "contents": "isRotated()" }
,
		{ "trigger": "CCSpriteFrame_getRect()", "contents": "getRect()" }
,
		{ "trigger": "CCSpriteFrame_getOriginalSize()", "contents": "getOriginalSize()" }
,
		{ "trigger": "CCSpriteFrame_copy()", "contents": "copy()" }
,
		{ "trigger": "CCSpriteFrame_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCSpriteFrame_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCSpriteFrame_setOffset(const_CCPoint_&_offsets,)", "contents": "setOffset(${1:const_CCPoint_&_offsets})" }
,
		{ "trigger": "CCSpriteFrame_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCSpriteFrame_createWithTexture(CCTexture2D*_pobTexture,CCRect_rect,bool_rotated,CCPoint_offset,CCSize_originalSize,)", "contents": "CCSpriteFrame:createWithTexture(${1:CCTexture2D*_pobTexture},${2:CCRect_rect},${3:bool_rotated},${4:CCPoint_offset},${5:CCSize_originalSize})" }
,
		{ "trigger": "CCSpriteFrame_create(const_char*_filename,CCRect_rect,bool_rotated,CCPoint_offset,CCSize_originalSize,)", "contents": "CCSpriteFrame:create(${1:const_char*_filename},${2:CCRect_rect},${3:bool_rotated},${4:CCPoint_offset},${5:CCSize_originalSize})" }
,
		{ "trigger": "CCSpriteFrame_create(const_char*_filename,CCRect_rect,)", "contents": "CCSpriteFrame:create(${1:const_char*_filename},${2:CCRect_rect})" }
,
		{ "trigger": "CCSpriteFrame_createWithTexture(CCTexture2D*_pobTexture,CCRect_rect,)", "contents": "CCSpriteFrame:createWithTexture(${1:CCTexture2D*_pobTexture},${2:CCRect_rect})" }
,

		{ "trigger": "CCSplitRows_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCSplitRows_originalTile(CCPoint_pos,)", "contents": "originalTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCSplitRows_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCSplitRows_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCSplitRows_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCSplitRows_release()", "contents": "release()" }
,
		{ "trigger": "CCSplitRows_setTile(CCPoint_pos,ccQuad3_coords,)", "contents": "setTile(${1:CCPoint_pos},${2:ccQuad3_coords})" }
,
		{ "trigger": "CCSplitRows_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCSplitRows_retain()", "contents": "retain()" }
,
		{ "trigger": "CCSplitRows_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCSplitRows_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCSplitRows_tile(CCPoint_pos,)", "contents": "tile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCSplitRows_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCSplitRows_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCSplitRows_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCSplitRows_copy()", "contents": "copy()" }
,
		{ "trigger": "CCSplitRows_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCSplitRows_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCSplitRows_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCSplitRows_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCSplitRows_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCSplitRows_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCSplitRows_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCSplitRows_create(float_duration,unsigned_int_nRows,)", "contents": "CCSplitRows:create(${1:float_duration},${2:unsigned_int_nRows})" }
,

		{ "trigger": "CheckBox_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CheckBox_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CheckBox_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CheckBox_getBottomInParent()", "contents": "getBottomInParent()" }
,
		{ "trigger": "CheckBox_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CheckBox_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CheckBox_onTouchBegan(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchBegan(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "CheckBox_getVirtualRenderer()", "contents": "getVirtualRenderer()" }
,
		{ "trigger": "CheckBox_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CheckBox_draw()", "contents": "draw()" }
,
		{ "trigger": "CheckBox_getNodes()", "contents": "getNodes()" }
,
		{ "trigger": "CheckBox_isBright()", "contents": "isBright()" }
,
		{ "trigger": "CheckBox_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CheckBox_getLayoutParameter(LayoutParameterType_type,)", "contents": "getLayoutParameter(${1:LayoutParameterType_type})" }
,
		{ "trigger": "CheckBox_ignoreContentAdaptWithSize(bool_ignore,)", "contents": "ignoreContentAdaptWithSize(${1:bool_ignore})" }
,
		{ "trigger": "CheckBox_getSelectedState()", "contents": "getSelectedState()" }
,
		{ "trigger": "CheckBox_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CheckBox_getSize()", "contents": "getSize()" }
,
		{ "trigger": "CheckBox_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CheckBox_getLayoutSize()", "contents": "getLayoutSize()" }
,
		{ "trigger": "CheckBox_visit()", "contents": "visit()" }
,
		{ "trigger": "CheckBox_getTopInParent()", "contents": "getTopInParent()" }
,
		{ "trigger": "CheckBox_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CheckBox_disable()", "contents": "disable()" }
,
		{ "trigger": "CheckBox_didNotSelectSelf()", "contents": "didNotSelectSelf()" }
,
		{ "trigger": "CheckBox_setSizeType(SizeType_type,)", "contents": "setSizeType(${1:SizeType_type})" }
,
		{ "trigger": "CheckBox_getNodeByTag(int_tag,)", "contents": "getNodeByTag(${1:int_tag})" }
,
		{ "trigger": "CheckBox_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CheckBox_getPositionPercent()", "contents": "getPositionPercent()" }
,
		{ "trigger": "CheckBox_setPosition(const_CCPoint_&pos,)", "contents": "setPosition(${1:const_CCPoint_&pos})" }
,
		{ "trigger": "CheckBox_setFlipY(bool_flipY,)", "contents": "setFlipY(${1:bool_flipY})" }
,
		{ "trigger": "CheckBox_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CheckBox_setSize(const_CCSize_&size,)", "contents": "setSize(${1:const_CCSize_&size})" }
,
		{ "trigger": "CheckBox_clone()", "contents": "clone()" }
,
		{ "trigger": "CheckBox_onTouchEnded(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchEnded(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "CheckBox_loadTextureFrontCross(const_char*_cross,TextureResType_texType_=_UI_TEX_TYPE_LOCAL,)", "contents": "loadTextureFrontCross(${1:const_char*_cross},${2:TextureResType_texType_=_UI_TEX_TYPE_LOCAL})" }
,
		{ "trigger": "CheckBox_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CheckBox_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CheckBox_getTouchEndPos()", "contents": "getTouchEndPos()" }
,
		{ "trigger": "CheckBox_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CheckBox_onTouchMoved(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchMoved(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "CheckBox_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CheckBox_setTouchEnable(bool_enabled,bool_containChildren_=_false,)", "contents": "setTouchEnable(${1:bool_enabled},${2:bool_containChildren_=_false})" }
,
		{ "trigger": "CheckBox_setSelectedState(bool_selected,)", "contents": "setSelectedState(${1:bool_selected})" }
,
		{ "trigger": "CheckBox_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CheckBox_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CheckBox_addNode(CCNode_*_node,int_zOrder,)", "contents": "addNode(${1:CCNode_*_node},${2:int_zOrder})" }
,
		{ "trigger": "CheckBox_removeAllNodes()", "contents": "removeAllNodes()" }
,
		{ "trigger": "CheckBox_getWidgetByTag(int_tag,)", "contents": "getWidgetByTag(${1:int_tag})" }
,
		{ "trigger": "CheckBox_getChildByName(const_char*_name,)", "contents": "getChildByName(${1:const_char*_name})" }
,
		{ "trigger": "CheckBox_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CheckBox_setAnchorPoint(const_CCPoint_&pt,)", "contents": "setAnchorPoint(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "CheckBox_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CheckBox_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CheckBox_getCustomSize()", "contents": "getCustomSize()" }
,
		{ "trigger": "CheckBox_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CheckBox_getRightInParent()", "contents": "getRightInParent()" }
,
		{ "trigger": "CheckBox_getDescription()", "contents": "getDescription()" }
,
		{ "trigger": "CheckBox_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CheckBox_getRect()", "contents": "getRect()" }
,
		{ "trigger": "CheckBox_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CheckBox_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CheckBox_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CheckBox_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CheckBox_getName()", "contents": "getName()" }
,
		{ "trigger": "CheckBox_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CheckBox_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CheckBox_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CheckBox_isFlipY()", "contents": "isFlipY()" }
,
		{ "trigger": "CheckBox_setSizePercent(const_CCPoint_&percent,)", "contents": "setSizePercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "CheckBox_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CheckBox_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CheckBox_addNode(CCNode*_node,)", "contents": "addNode(${1:CCNode*_node})" }
,
		{ "trigger": "CheckBox_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CheckBox_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CheckBox_loadTextureBackGround(const_char*_backGround,TextureResType_type_=_UI_TEX_TYPE_LOCAL,)", "contents": "loadTextureBackGround(${1:const_char*_backGround},${2:TextureResType_type_=_UI_TEX_TYPE_LOCAL})" }
,
		{ "trigger": "CheckBox_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CheckBox_setBright(bool_bright,)", "contents": "setBright(${1:bool_bright})" }
,
		{ "trigger": "CheckBox_active()", "contents": "active()" }
,
		{ "trigger": "CheckBox_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CheckBox_removeChild(CCNode*_child,)", "contents": "removeChild(${1:CCNode*_child})" }
,
		{ "trigger": "CheckBox_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CheckBox_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CheckBox_removeAllChildren()", "contents": "removeAllChildren()" }
,
		{ "trigger": "CheckBox_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CheckBox_loadTextureFrontCrossDisabled(const_char*_frontCrossDisabled,TextureResType_texType_=_UI_TEX_TYPE_LOCAL,)", "contents": "loadTextureFrontCrossDisabled(${1:const_char*_frontCrossDisabled},${2:TextureResType_texType_=_UI_TEX_TYPE_LOCAL})" }
,
		{ "trigger": "CheckBox_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "CheckBox_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CheckBox_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CheckBox_setFocused(bool_fucosed,)", "contents": "setFocused(${1:bool_fucosed})" }
,
		{ "trigger": "CheckBox_executeScriptEvent(int_eventName,)", "contents": "executeScriptEvent(${1:int_eventName})" }
,
		{ "trigger": "CheckBox_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CheckBox_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CheckBox_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CheckBox_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CheckBox_setTouchEnabled(bool_enabled,)", "contents": "setTouchEnabled(${1:bool_enabled})" }
,
		{ "trigger": "CheckBox_setBrightStyle(BrightStyle_style,)", "contents": "setBrightStyle(${1:BrightStyle_style})" }
,
		{ "trigger": "CheckBox_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CheckBox_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CheckBox_setPositionType(PositionType_type,)", "contents": "setPositionType(${1:PositionType_type})" }
,
		{ "trigger": "CheckBox_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CheckBox_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CheckBox_updateSizeAndPosition(const_CCSize&_parentSize,)", "contents": "updateSizeAndPosition(${1:const_CCSize&_parentSize})" }
,
		{ "trigger": "CheckBox_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CheckBox_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CheckBox_setLayoutParameter(LayoutParameter*_parameter,)", "contents": "setLayoutParameter(${1:LayoutParameter*_parameter})" }
,
		{ "trigger": "CheckBox_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CheckBox_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CheckBox_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CheckBox_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CheckBox_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CheckBox_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CheckBox_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CheckBox_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CheckBox_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CheckBox_removeNodeByTag(int_tag,)", "contents": "removeNodeByTag(${1:int_tag})" }
,
		{ "trigger": "CheckBox_setPositionPercent(const_CCPoint_&percent,)", "contents": "setPositionPercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "CheckBox_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CheckBox_copy()", "contents": "copy()" }
,
		{ "trigger": "CheckBox_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CheckBox_loadTextureBackGroundSelected(const_char*_backGroundSelected,TextureResType_texType_=_UI_TEX_TYPE_LOCAL,)", "contents": "loadTextureBackGroundSelected(${1:const_char*_backGroundSelected},${2:TextureResType_texType_=_UI_TEX_TYPE_LOCAL})" }
,
		{ "trigger": "CheckBox_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CheckBox_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CheckBox_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CheckBox_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CheckBox_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CheckBox_getTouchMovePos()", "contents": "getTouchMovePos()" }
,
		{ "trigger": "CheckBox_getTouchStartPos()", "contents": "getTouchStartPos()" }
,
		{ "trigger": "CheckBox_hitTest(const_CCPoint_&pt,)", "contents": "hitTest(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "CheckBox_sortAllChildren()", "contents": "sortAllChildren()" }
,
		{ "trigger": "CheckBox_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CheckBox_loadTextureBackGroundDisabled(const_char*_backGroundDisabled,TextureResType_texType_=_UI_TEX_TYPE_LOCAL,)", "contents": "loadTextureBackGroundDisabled(${1:const_char*_backGroundDisabled},${2:TextureResType_texType_=_UI_TEX_TYPE_LOCAL})" }
,
		{ "trigger": "CheckBox_getSizePercent()", "contents": "getSizePercent()" }
,
		{ "trigger": "CheckBox_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CheckBox_updateSizeAndPosition()", "contents": "updateSizeAndPosition()" }
,
		{ "trigger": "CheckBox_isFlipX()", "contents": "isFlipX()" }
,
		{ "trigger": "CheckBox_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CheckBox_setName(const_char*_name,)", "contents": "setName(${1:const_char*_name})" }
,
		{ "trigger": "CheckBox_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CheckBox_transform()", "contents": "transform()" }
,
		{ "trigger": "CheckBox_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CheckBox_isFocused()", "contents": "isFocused()" }
,
		{ "trigger": "CheckBox_retain()", "contents": "retain()" }
,
		{ "trigger": "CheckBox_setSoundEff(std::string_eff,)", "contents": "setSoundEff(${1:std::string_eff})" }
,
		{ "trigger": "CheckBox_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CheckBox_visit()", "contents": "visit()" }
,
		{ "trigger": "CheckBox_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CheckBox_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CheckBox_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CheckBox_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CheckBox_addNode(CCNode*_node,int_zOrder,int_tag,)", "contents": "addNode(${1:CCNode*_node},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CheckBox_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CheckBox_loadTextures(const_char*_backGround,const_char*_backGroundSelected,const_char*_cross,const_char*_backGroundDisabled,const_char*_frontCrossDisabled,TextureResType_texType_=_UI_TEX_TYPE_LOCAL,)", "contents": "loadTextures(${1:const_char*_backGround},${2:const_char*_backGroundSelected},${3:const_char*_cross},${4:const_char*_backGroundDisabled},${5:const_char*_frontCrossDisabled},${6:TextureResType_texType_=_UI_TEX_TYPE_LOCAL})" }
,
		{ "trigger": "CheckBox_getActionTag()", "contents": "getActionTag()" }
,
		{ "trigger": "CheckBox_release()", "contents": "release()" }
,
		{ "trigger": "CheckBox_setActionTag(int_tag,)", "contents": "setActionTag(${1:int_tag})" }
,
		{ "trigger": "CheckBox_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CheckBox_setFlipX(bool_flipX,)", "contents": "setFlipX(${1:bool_flipX})" }
,
		{ "trigger": "CheckBox_checkChildInfo(int_handleState,Widget*_sender,const_CCPoint_&touchPoint,)", "contents": "checkChildInfo(${1:int_handleState},${2:Widget*_sender},${3:const_CCPoint_&touchPoint})" }
,
		{ "trigger": "CheckBox_removeFromParent()", "contents": "removeFromParent()" }
,
		{ "trigger": "CheckBox_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CheckBox_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CheckBox_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CheckBox_isIgnoreContentAdaptWithSize()", "contents": "isIgnoreContentAdaptWithSize()" }
,
		{ "trigger": "CheckBox_getLeftInParent()", "contents": "getLeftInParent()" }
,
		{ "trigger": "CheckBox_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CheckBox_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CheckBox_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CheckBox_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CheckBox_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CheckBox_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CheckBox_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CheckBox_removeNode(CCNode*_node,)", "contents": "removeNode(${1:CCNode*_node})" }
,
		{ "trigger": "CheckBox_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CheckBox_onExit()", "contents": "onExit()" }
,
		{ "trigger": "CheckBox_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CheckBox_getWorldPosition()", "contents": "getWorldPosition()" }
,
		{ "trigger": "CheckBox_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CheckBox_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CheckBox_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CheckBox_clippingParentAreaContainPoint(const_CCPoint_&pt,)", "contents": "clippingParentAreaContainPoint(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "CheckBox_onTouchCancelled(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchCancelled(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "CheckBox_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CheckBox_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "CheckBox_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CheckBox_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "CheckBox_description()", "contents": "description()" }
,
		{ "trigger": "CheckBox_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CheckBox_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CheckBox_getWidgetType()", "contents": "getWidgetType()" }
,
		{ "trigger": "CheckBox_getSizeType()", "contents": "getSizeType()" }
,
		{ "trigger": "CheckBox_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CheckBox_onEnter()", "contents": "onEnter()" }
,
		{ "trigger": "CheckBox_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CheckBox_addChild(CCNode*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CheckBox_create()", "contents": "CheckBox:create()" }
,

		{ "trigger": "CCCardinalSplineTo_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCCardinalSplineTo_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCCardinalSplineTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCCardinalSplineTo_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCCardinalSplineTo_release()", "contents": "release()" }
,
		{ "trigger": "CCCardinalSplineTo_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCCardinalSplineTo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCCardinalSplineTo_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCCardinalSplineTo_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCCardinalSplineTo_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCCardinalSplineTo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCCardinalSplineTo_getPoints()", "contents": "getPoints()" }
,
		{ "trigger": "CCCardinalSplineTo_setPoints(CCPointArray*_points,)", "contents": "setPoints(${1:CCPointArray*_points})" }
,
		{ "trigger": "CCCardinalSplineTo_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCCardinalSplineTo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCCardinalSplineTo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCCardinalSplineTo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCCardinalSplineTo_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCCardinalSplineTo_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCCardinalSplineTo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCCardinalSplineTo_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCCardinalSplineTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCCardinalSplineTo_create(float_duration,CCPointArray*_points,float_tension,)", "contents": "CCCardinalSplineTo:create(${1:float_duration},${2:CCPointArray*_points},${3:float_tension})" }
,

		{ "trigger": "CCTextureCache_removeTexture(CCTexture2D*_texture,)", "contents": "removeTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCTextureCache_removeAllTextures()", "contents": "removeAllTextures()" }
,
		{ "trigger": "CCTextureCache_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTextureCache_removeUnusedTextures()", "contents": "removeUnusedTextures()" }
,
		{ "trigger": "CCTextureCache_textureForKey(const_char*_key,)", "contents": "textureForKey(${1:const_char*_key})" }
,
		{ "trigger": "CCTextureCache_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTextureCache_addImage(const_char*_fileimage,)", "contents": "addImage(${1:const_char*_fileimage})" }
,
		{ "trigger": "CCTextureCache_addPVRImage(const_char*_filename,)", "contents": "addPVRImage(${1:const_char*_filename})" }
,
		{ "trigger": "CCTextureCache_dumpCachedTextureInfo()", "contents": "dumpCachedTextureInfo()" }
,
		{ "trigger": "CCTextureCache_addUIImage(CCImage_*image,const_char_*key,)", "contents": "addUIImage(${1:CCImage_*image},${2:const_char_*key})" }
,
		{ "trigger": "CCTextureCache_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTextureCache_release()", "contents": "release()" }
,
		{ "trigger": "CCTextureCache_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTextureCache_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTextureCache_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTextureCache_removeTextureForKey(const_char_*textureKeyName,)", "contents": "removeTextureForKey(${1:const_char_*textureKeyName})" }
,
		{ "trigger": "CCTextureCache_purgeSharedTextureCache()", "contents": "CCTextureCache:purgeSharedTextureCache()" }
,
		{ "trigger": "CCTextureCache_reloadAllTextures()", "contents": "CCTextureCache:reloadAllTextures()" }
,
		{ "trigger": "CCTextureCache_sharedTextureCache()", "contents": "CCTextureCache:sharedTextureCache()" }
,

		{ "trigger": "CCMenuItemSprite_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCMenuItemSprite_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCMenuItemSprite_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCMenuItemSprite_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCMenuItemSprite_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCMenuItemSprite_getSelectedImage()", "contents": "getSelectedImage()" }
,
		{ "trigger": "CCMenuItemSprite_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCMenuItemSprite_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCMenuItemSprite_init()", "contents": "init()" }
,
		{ "trigger": "CCMenuItemSprite_draw()", "contents": "draw()" }
,
		{ "trigger": "CCMenuItemSprite_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCMenuItemSprite_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCMenuItemSprite_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCMenuItemSprite_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCMenuItemSprite_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCMenuItemSprite_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCMenuItemSprite_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCMenuItemSprite_getDisabledImage()", "contents": "getDisabledImage()" }
,
		{ "trigger": "CCMenuItemSprite_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemSprite_visit()", "contents": "visit()" }
,
		{ "trigger": "CCMenuItemSprite_setSelectedImage(CCNode*_pImage,)", "contents": "setSelectedImage(${1:CCNode*_pImage})" }
,
		{ "trigger": "CCMenuItemSprite_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCMenuItemSprite_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCMenuItemSprite_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItemSprite_activate()", "contents": "activate()" }
,
		{ "trigger": "CCMenuItemSprite_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItemSprite_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCMenuItemSprite_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCMenuItemSprite_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemSprite_unregisterScriptTapHandler()", "contents": "unregisterScriptTapHandler()" }
,
		{ "trigger": "CCMenuItemSprite_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCMenuItemSprite_transform()", "contents": "transform()" }
,
		{ "trigger": "CCMenuItemSprite_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCMenuItemSprite_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemSprite_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCMenuItemSprite_registerScriptTapHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptTapHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItemSprite_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCMenuItemSprite_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCMenuItemSprite_selected()", "contents": "selected()" }
,
		{ "trigger": "CCMenuItemSprite_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItemSprite_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItemSprite_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItemSprite_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCMenuItemSprite_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCMenuItemSprite_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCMenuItemSprite_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCMenuItemSprite_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCMenuItemSprite_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCMenuItemSprite_isSelected()", "contents": "isSelected()" }
,
		{ "trigger": "CCMenuItemSprite_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCMenuItemSprite_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCMenuItemSprite_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCMenuItemSprite_unselected()", "contents": "unselected()" }
,
		{ "trigger": "CCMenuItemSprite_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCMenuItemSprite_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCMenuItemSprite_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItemSprite_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCMenuItemSprite_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCMenuItemSprite_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCMenuItemSprite_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCMenuItemSprite_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItemSprite_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCMenuItemSprite_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCMenuItemSprite_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCMenuItemSprite_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCMenuItemSprite_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemSprite_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemSprite_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItemSprite_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCMenuItemSprite_setEnabled(bool_bEnabled,)", "contents": "setEnabled(${1:bool_bEnabled})" }
,
		{ "trigger": "CCMenuItemSprite_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCMenuItemSprite_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCMenuItemSprite_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCMenuItemSprite_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCMenuItemSprite_retain()", "contents": "retain()" }
,
		{ "trigger": "CCMenuItemSprite_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItemSprite_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCMenuItemSprite_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCMenuItemSprite_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCMenuItemSprite_setColor(ccColor3B_color,)", "contents": "setColor(${1:ccColor3B_color})" }
,
		{ "trigger": "CCMenuItemSprite_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCMenuItemSprite_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCMenuItemSprite_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCMenuItemSprite_rect()", "contents": "rect()" }
,
		{ "trigger": "CCMenuItemSprite_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCMenuItemSprite_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCMenuItemSprite_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCMenuItemSprite_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCMenuItemSprite_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCMenuItemSprite_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCMenuItemSprite_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCMenuItemSprite_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemSprite_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCMenuItemSprite_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCMenuItemSprite_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCMenuItemSprite_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCMenuItemSprite_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCMenuItemSprite_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCMenuItemSprite_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCMenuItemSprite_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCMenuItemSprite_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCMenuItemSprite_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItemSprite_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCMenuItemSprite_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCMenuItemSprite_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCMenuItemSprite_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCMenuItemSprite_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItemSprite_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCMenuItemSprite_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCMenuItemSprite_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCMenuItemSprite_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCMenuItemSprite_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCMenuItemSprite_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCMenuItemSprite_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItemSprite_release()", "contents": "release()" }
,
		{ "trigger": "CCMenuItemSprite_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItemSprite_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemSprite_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItemSprite_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCMenuItemSprite_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCMenuItemSprite_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCMenuItemSprite_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCMenuItemSprite_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCMenuItemSprite_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCMenuItemSprite_setNormalImage(CCNode*_pImage,)", "contents": "setNormalImage(${1:CCNode*_pImage})" }
,
		{ "trigger": "CCMenuItemSprite_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCMenuItemSprite_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCMenuItemSprite_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCMenuItemSprite_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItemSprite_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCMenuItemSprite_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCMenuItemSprite_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCMenuItemSprite_setDisabledImage(CCNode*_pImage,)", "contents": "setDisabledImage(${1:CCNode*_pImage})" }
,
		{ "trigger": "CCMenuItemSprite_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCMenuItemSprite_getNormalImage()", "contents": "getNormalImage()" }
,
		{ "trigger": "CCMenuItemSprite_copy()", "contents": "copy()" }
,
		{ "trigger": "CCMenuItemSprite_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCMenuItemSprite_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCMenuItemSprite_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "CCMenuItemSprite_description()", "contents": "description()" }
,
		{ "trigger": "CCMenuItemSprite_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCMenuItemSprite_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCMenuItemSprite_create(CCNode*_normalSprite,CCNode*_selectedSprite,)", "contents": "CCMenuItemSprite:create(${1:CCNode*_normalSprite},${2:CCNode*_selectedSprite})" }
,
		{ "trigger": "CCMenuItemSprite_create(CCNode*_normalSprite,CCNode*_selectedSprite,CCNode*_disabledSprite,)", "contents": "CCMenuItemSprite:create(${1:CCNode*_normalSprite},${2:CCNode*_selectedSprite},${3:CCNode*_disabledSprite})" }
,

		{ "trigger": "CCRipple3D_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCRipple3D_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCRipple3D_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCRipple3D_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCRipple3D_release()", "contents": "release()" }
,
		{ "trigger": "CCRipple3D_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCRipple3D_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCRipple3D_retain()", "contents": "retain()" }
,
		{ "trigger": "CCRipple3D_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCRipple3D_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCRipple3D_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCRipple3D_vertex(const_CCPoint&_pos,)", "contents": "vertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCRipple3D_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCRipple3D_setAmplitude(float_fAmplitude,)", "contents": "setAmplitude(${1:float_fAmplitude})" }
,
		{ "trigger": "CCRipple3D_copy()", "contents": "copy()" }
,
		{ "trigger": "CCRipple3D_getAmplitude()", "contents": "getAmplitude()" }
,
		{ "trigger": "CCRipple3D_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCRipple3D_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCRipple3D_setAmplitudeRate(float_fAmplitudeRate,)", "contents": "setAmplitudeRate(${1:float_fAmplitudeRate})" }
,
		{ "trigger": "CCRipple3D_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCRipple3D_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCRipple3D_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCRipple3D_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCRipple3D_setVertex(const_CCPoint&_pos,const_ccVertex3F&_vertex,)", "contents": "setVertex(${1:const_CCPoint&_pos},${2:const_ccVertex3F&_vertex})" }
,
		{ "trigger": "CCRipple3D_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCRipple3D_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCRipple3D_originalVertex(const_CCPoint&_pos,)", "contents": "originalVertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCRipple3D_create(float_duration,CCSize_gridSize,CCPoint_position,float_radius,unsigned_int_waves,float_amplitude,)", "contents": "CCRipple3D:create(${1:float_duration},${2:CCSize_gridSize},${3:CCPoint_position},${4:float_radius},${5:unsigned_int_waves},${6:float_amplitude})" }
,

		{ "trigger": "CCAtlasNode_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCAtlasNode_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCAtlasNode_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCAtlasNode_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCAtlasNode_getTextureAtlas()", "contents": "getTextureAtlas()" }
,
		{ "trigger": "CCAtlasNode_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCAtlasNode_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCAtlasNode_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCAtlasNode_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCAtlasNode_init()", "contents": "init()" }
,
		{ "trigger": "CCAtlasNode_updateAtlasValues()", "contents": "updateAtlasValues()" }
,
		{ "trigger": "CCAtlasNode_draw()", "contents": "draw()" }
,
		{ "trigger": "CCAtlasNode_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCAtlasNode_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCAtlasNode_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCAtlasNode_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCAtlasNode_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCAtlasNode_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCAtlasNode_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCAtlasNode_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCAtlasNode_visit()", "contents": "visit()" }
,
		{ "trigger": "CCAtlasNode_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCAtlasNode_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCAtlasNode_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCAtlasNode_setOpacityModifyRGB(bool_isOpacityModifyRGB,)", "contents": "setOpacityModifyRGB(${1:bool_isOpacityModifyRGB})" }
,
		{ "trigger": "CCAtlasNode_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCAtlasNode_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCAtlasNode_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCAtlasNode_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCAtlasNode_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCAtlasNode_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCAtlasNode_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCAtlasNode_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCAtlasNode_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCAtlasNode_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCAtlasNode_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCAtlasNode_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCAtlasNode_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCAtlasNode_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCAtlasNode_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCAtlasNode_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCAtlasNode_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCAtlasNode_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCAtlasNode_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCAtlasNode_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCAtlasNode_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCAtlasNode_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCAtlasNode_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCAtlasNode_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCAtlasNode_getQuadsToDraw()", "contents": "getQuadsToDraw()" }
,
		{ "trigger": "CCAtlasNode_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCAtlasNode_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCAtlasNode_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCAtlasNode_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCAtlasNode_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCAtlasNode_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCAtlasNode_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCAtlasNode_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCAtlasNode_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCAtlasNode_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCAtlasNode_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCAtlasNode_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCAtlasNode_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCAtlasNode_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCAtlasNode_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCAtlasNode_setQuadsToDraw(unsigned_int_quadsToDraw,)", "contents": "setQuadsToDraw(${1:unsigned_int_quadsToDraw})" }
,
		{ "trigger": "CCAtlasNode_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCAtlasNode_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCAtlasNode_retain()", "contents": "retain()" }
,
		{ "trigger": "CCAtlasNode_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCAtlasNode_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCAtlasNode_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCAtlasNode_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCAtlasNode_setColor(ccColor3B_color,)", "contents": "setColor(${1:ccColor3B_color})" }
,
		{ "trigger": "CCAtlasNode_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCAtlasNode_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCAtlasNode_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCAtlasNode_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCAtlasNode_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCAtlasNode_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCAtlasNode_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCAtlasNode_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCAtlasNode_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCAtlasNode_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCAtlasNode_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCAtlasNode_copy()", "contents": "copy()" }
,
		{ "trigger": "CCAtlasNode_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCAtlasNode_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCAtlasNode_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCAtlasNode_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCAtlasNode_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCAtlasNode_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCAtlasNode_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCAtlasNode_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCAtlasNode_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCAtlasNode_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCAtlasNode_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCAtlasNode_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCAtlasNode_transform()", "contents": "transform()" }
,
		{ "trigger": "CCAtlasNode_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCAtlasNode_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCAtlasNode_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCAtlasNode_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCAtlasNode_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCAtlasNode_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCAtlasNode_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCAtlasNode_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCAtlasNode_release()", "contents": "release()" }
,
		{ "trigger": "CCAtlasNode_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCAtlasNode_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCAtlasNode_setTexture(CCTexture2D_*texture,)", "contents": "setTexture(${1:CCTexture2D_*texture})" }
,
		{ "trigger": "CCAtlasNode_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCAtlasNode_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCAtlasNode_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCAtlasNode_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCAtlasNode_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCAtlasNode_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCAtlasNode_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCAtlasNode_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCAtlasNode_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCAtlasNode_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCAtlasNode_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCAtlasNode_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCAtlasNode_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCAtlasNode_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCAtlasNode_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCAtlasNode_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCAtlasNode_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCAtlasNode_setTextureAtlas(CCTextureAtlas*_atlas,)", "contents": "setTextureAtlas(${1:CCTextureAtlas*_atlas})" }
,
		{ "trigger": "CCAtlasNode_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCAtlasNode_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCAtlasNode_description()", "contents": "description()" }
,
		{ "trigger": "CCAtlasNode_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCAtlasNode_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCAtlasNode_create(const_char*_tile,unsigned_int_tileWidth,unsigned_int_tileHeight,unsigned_int_itemsToRender,)", "contents": "CCAtlasNode:create(${1:const_char*_tile},${2:unsigned_int_tileWidth},${3:unsigned_int_tileHeight},${4:unsigned_int_itemsToRender})" }
,

		{ "trigger": "CCRotateBy_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCRotateBy_copy()", "contents": "copy()" }
,
		{ "trigger": "CCRotateBy_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCRotateBy_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCRotateBy_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCRotateBy_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCRotateBy_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCRotateBy_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCRotateBy_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCRotateBy_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCRotateBy_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCRotateBy_retain()", "contents": "retain()" }
,
		{ "trigger": "CCRotateBy_release()", "contents": "release()" }
,
		{ "trigger": "CCRotateBy_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCRotateBy_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCRotateBy_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCRotateBy_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCRotateBy_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCRotateBy_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCRotateBy_create(float_duration,float_fDeltaAngle,)", "contents": "CCRotateBy:create(${1:float_duration},${2:float_fDeltaAngle})" }
,
		{ "trigger": "CCRotateBy_create(float_duration,float_fDeltaAngleX,float_DeltaAngleY,)", "contents": "CCRotateBy:create(${1:float_duration},${2:float_fDeltaAngleX},${3:float_DeltaAngleY})" }
,

		{ "trigger": "CCFadeOutBLTiles_turnOffTile(CCPoint_pos,)", "contents": "turnOffTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutBLTiles_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCFadeOutBLTiles_originalTile(CCPoint_pos,)", "contents": "originalTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutBLTiles_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCFadeOutBLTiles_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCFadeOutBLTiles_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCFadeOutBLTiles_release()", "contents": "release()" }
,
		{ "trigger": "CCFadeOutBLTiles_setTile(CCPoint_pos,ccQuad3_coords,)", "contents": "setTile(${1:CCPoint_pos},${2:ccQuad3_coords})" }
,
		{ "trigger": "CCFadeOutBLTiles_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCFadeOutBLTiles_retain()", "contents": "retain()" }
,
		{ "trigger": "CCFadeOutBLTiles_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCFadeOutBLTiles_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCFadeOutBLTiles_tile(CCPoint_pos,)", "contents": "tile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutBLTiles_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCFadeOutBLTiles_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCFadeOutBLTiles_transformTile(CCPoint_pos,float_distance,)", "contents": "transformTile(${1:CCPoint_pos},${2:float_distance})" }
,
		{ "trigger": "CCFadeOutBLTiles_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCFadeOutBLTiles_copy()", "contents": "copy()" }
,
		{ "trigger": "CCFadeOutBLTiles_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCFadeOutBLTiles_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCFadeOutBLTiles_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCFadeOutBLTiles_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCFadeOutBLTiles_turnOnTile(CCPoint_pos,)", "contents": "turnOnTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutBLTiles_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCFadeOutBLTiles_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCFadeOutBLTiles_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCFadeOutBLTiles_create(float_duration,CCSize_gridSize,)", "contents": "CCFadeOutBLTiles:create(${1:float_duration},${2:CCSize_gridSize})" }
,

		{ "trigger": "CCEaseIn_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseIn_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseIn_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseIn_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseIn_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseIn_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseIn_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseIn_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseIn_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseIn_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseIn_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseIn_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseIn_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseIn_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseIn_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseIn_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseIn_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseIn_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseIn_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseIn_create(CCActionInterval*_pAction,float_fRate,)", "contents": "CCEaseIn:create(${1:CCActionInterval*_pAction},${2:float_fRate})" }
,

		{ "trigger": "CCParticleFire_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleFire_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleFire_setStartSizeVar(float_size,)", "contents": "setStartSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleFire_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleFire_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleFire_getRadialAccelVar()", "contents": "getRadialAccelVar()" }
,
		{ "trigger": "CCParticleFire_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleFire_setStartRadiusVar(float_startRadiusVar,)", "contents": "setStartRadiusVar(${1:float_startRadiusVar})" }
,
		{ "trigger": "CCParticleFire_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleFire_setTexture(CCTexture2D*_var,)", "contents": "setTexture(${1:CCTexture2D*_var})" }
,
		{ "trigger": "CCParticleFire_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleFire_isAutoRemoveOnFinish()", "contents": "isAutoRemoveOnFinish()" }
,
		{ "trigger": "CCParticleFire_getTotalParticles()", "contents": "getTotalParticles()" }
,
		{ "trigger": "CCParticleFire_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleFire_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleFire_setPositionType(tCCPositionType_type,)", "contents": "setPositionType(${1:tCCPositionType_type})" }
,
		{ "trigger": "CCParticleFire_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCParticleFire_setDisplayFrame(CCSpriteFrame*_spriteFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame*_spriteFrame})" }
,
		{ "trigger": "CCParticleFire_getSourcePosition()", "contents": "getSourcePosition()" }
,
		{ "trigger": "CCParticleFire_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleFire_setBlendAdditive(bool_value,)", "contents": "setBlendAdditive(${1:bool_value})" }
,
		{ "trigger": "CCParticleFire_setGravity(const_CCPoint&_g,)", "contents": "setGravity(${1:const_CCPoint&_g})" }
,
		{ "trigger": "CCParticleFire_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleFire_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleFire_stopSystem()", "contents": "stopSystem()" }
,
		{ "trigger": "CCParticleFire_setLifeVar(float_lifeVar,)", "contents": "setLifeVar(${1:float_lifeVar})" }
,
		{ "trigger": "CCParticleFire_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleFire_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleFire_setPosVar(CCPoint_pos,)", "contents": "setPosVar(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleFire_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleFire_setEmissionRate(float_rate,)", "contents": "setEmissionRate(${1:float_rate})" }
,
		{ "trigger": "CCParticleFire_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCParticleFire_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleFire_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleFire_getEndColorVar()", "contents": "getEndColorVar()" }
,
		{ "trigger": "CCParticleFire_getEndSize()", "contents": "getEndSize()" }
,
		{ "trigger": "CCParticleFire_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleFire_setEndRadiusVar(float_endRadiusVar,)", "contents": "setEndRadiusVar(${1:float_endRadiusVar})" }
,
		{ "trigger": "CCParticleFire_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleFire_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleFire_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleFire_setEndColorVar(const_ccColor4F_var,)", "contents": "setEndColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleFire_getEndSpin()", "contents": "getEndSpin()" }
,
		{ "trigger": "CCParticleFire_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleFire_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCParticleFire_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleFire_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCParticleFire_setDuration(float_d,)", "contents": "setDuration(${1:float_d})" }
,
		{ "trigger": "CCParticleFire_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleFire_setStartSpinVar(float_var,)", "contents": "setStartSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleFire_getEmitterMode()", "contents": "getEmitterMode()" }
,
		{ "trigger": "CCParticleFire_updateQuadWithParticle(tCCParticle*_particle,const_CCPoint&_newPosition,)", "contents": "updateQuadWithParticle(${1:tCCParticle*_particle},${2:const_CCPoint&_newPosition})" }
,
		{ "trigger": "CCParticleFire_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleFire_setSpeed(float_speed,)", "contents": "setSpeed(${1:float_speed})" }
,
		{ "trigger": "CCParticleFire_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleFire_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleFire_getGravity()", "contents": "getGravity()" }
,
		{ "trigger": "CCParticleFire_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleFire_setEndSpinVar(float_var,)", "contents": "setEndSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleFire_getAngle()", "contents": "getAngle()" }
,
		{ "trigger": "CCParticleFire_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleFire_setStartRadius(float_startRadius,)", "contents": "setStartRadius(${1:float_startRadius})" }
,
		{ "trigger": "CCParticleFire_getAngleVar()", "contents": "getAngleVar()" }
,
		{ "trigger": "CCParticleFire_setEmitterMode(int_mode,)", "contents": "setEmitterMode(${1:int_mode})" }
,
		{ "trigger": "CCParticleFire_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleFire_getTangentialAccel()", "contents": "getTangentialAccel()" }
,
		{ "trigger": "CCParticleFire_getRotatePerSecondVar()", "contents": "getRotatePerSecondVar()" }
,
		{ "trigger": "CCParticleFire_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleFire_getLifeVar()", "contents": "getLifeVar()" }
,
		{ "trigger": "CCParticleFire_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleFire_setStartSpin(float_var,)", "contents": "setStartSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleFire_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleFire_getStartSize()", "contents": "getStartSize()" }
,
		{ "trigger": "CCParticleFire_getEndRadius()", "contents": "getEndRadius()" }
,
		{ "trigger": "CCParticleFire_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleFire_addParticle()", "contents": "addParticle()" }
,
		{ "trigger": "CCParticleFire_setBlendFunc(ccBlendFunc_var,)", "contents": "setBlendFunc(${1:ccBlendFunc_var})" }
,
		{ "trigger": "CCParticleFire_initParticle(tCCParticle*_particle,)", "contents": "initParticle(${1:tCCParticle*_particle})" }
,
		{ "trigger": "CCParticleFire_getTangentialAccelVar()", "contents": "getTangentialAccelVar()" }
,
		{ "trigger": "CCParticleFire_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleFire_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleFire_setAngle(float_angle,)", "contents": "setAngle(${1:float_angle})" }
,
		{ "trigger": "CCParticleFire_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleFire_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleFire_getEndRadiusVar()", "contents": "getEndRadiusVar()" }
,
		{ "trigger": "CCParticleFire_getStartSpin()", "contents": "getStartSpin()" }
,
		{ "trigger": "CCParticleFire_setSpeedVar(float_speed,)", "contents": "setSpeedVar(${1:float_speed})" }
,
		{ "trigger": "CCParticleFire_getLife()", "contents": "getLife()" }
,
		{ "trigger": "CCParticleFire_isBlendAdditive()", "contents": "isBlendAdditive()" }
,
		{ "trigger": "CCParticleFire_getParticleCount()", "contents": "getParticleCount()" }
,
		{ "trigger": "CCParticleFire_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleFire_getEndSpinVar()", "contents": "getEndSpinVar()" }
,
		{ "trigger": "CCParticleFire_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleFire_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleFire_setStartSize(float_size,)", "contents": "setStartSize(${1:float_size})" }
,
		{ "trigger": "CCParticleFire_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleFire_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleFire_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleFire_getStartSpinVar()", "contents": "getStartSpinVar()" }
,
		{ "trigger": "CCParticleFire_setRadialAccelVar(float_t,)", "contents": "setRadialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleFire_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCParticleFire_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleFire_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleFire_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleFire_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleFire_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleFire_setTextureWithRect(CCTexture2D_*texture,const_CCRect&_rect,)", "contents": "setTextureWithRect(${1:CCTexture2D_*texture},${2:const_CCRect&_rect})" }
,
		{ "trigger": "CCParticleFire_setSourcePosition(CCPoint_pos,)", "contents": "setSourcePosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleFire_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleFire_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleFire_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleFire_getRotatePerSecond()", "contents": "getRotatePerSecond()" }
,
		{ "trigger": "CCParticleFire_initWithTotalParticles(unsigned_int_number,)", "contents": "initWithTotalParticles(${1:unsigned_int_number})" }
,
		{ "trigger": "CCParticleFire_setBatchNode(CCParticleBatchNode*_node,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_node})" }
,
		{ "trigger": "CCParticleFire_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleFire_isActive()", "contents": "isActive()" }
,
		{ "trigger": "CCParticleFire_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleFire_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleFire_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleFire_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleFire_setEndSpin(float_var,)", "contents": "setEndSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleFire_resetSystem()", "contents": "resetSystem()" }
,
		{ "trigger": "CCParticleFire_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleFire_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleFire_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleFire_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleFire_getEndSizeVar()", "contents": "getEndSizeVar()" }
,
		{ "trigger": "CCParticleFire_setStartColorVar(const_ccColor4F_var,)", "contents": "setStartColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleFire_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleFire_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleFire_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleFire_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleFire_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleFire_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleFire_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleFire_setStartColor(const_ccColor4F_var,)", "contents": "setStartColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleFire_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleFire_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleFire_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleFire_setAngleVar(float_angle,)", "contents": "setAngleVar(${1:float_angle})" }
,
		{ "trigger": "CCParticleFire_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleFire_setTexture(CCTexture2D*_texture,)", "contents": "setTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCParticleFire_setTangentialAccelVar(float_t,)", "contents": "setTangentialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleFire_setRotatePerSecond(float_degrees,)", "contents": "setRotatePerSecond(${1:float_degrees})" }
,
		{ "trigger": "CCParticleFire_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleFire_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleFire_setTotalParticles(unsigned_int_tp,)", "contents": "setTotalParticles(${1:unsigned_int_tp})" }
,
		{ "trigger": "CCParticleFire_getSpeedVar()", "contents": "getSpeedVar()" }
,
		{ "trigger": "CCParticleFire_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleFire_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleFire_getStartSizeVar()", "contents": "getStartSizeVar()" }
,
		{ "trigger": "CCParticleFire_setAutoRemoveOnFinish(bool_var,)", "contents": "setAutoRemoveOnFinish(${1:bool_var})" }
,
		{ "trigger": "CCParticleFire_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleFire_setTangentialAccel(float_t,)", "contents": "setTangentialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleFire_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleFire_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleFire_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleFire_setLife(float_life,)", "contents": "setLife(${1:float_life})" }
,
		{ "trigger": "CCParticleFire_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleFire_setEndColor(const_ccColor4F_var,)", "contents": "setEndColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleFire_getRadialAccel()", "contents": "getRadialAccel()" }
,
		{ "trigger": "CCParticleFire_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleFire_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleFire_setRotatePerSecondVar(float_degrees,)", "contents": "setRotatePerSecondVar(${1:float_degrees})" }
,
		{ "trigger": "CCParticleFire_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleFire_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleFire_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCParticleFire_getStartRadiusVar()", "contents": "getStartRadiusVar()" }
,
		{ "trigger": "CCParticleFire_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleFire_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleFire_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleFire_setBatchNode(CCParticleBatchNode*_batchNode,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_batchNode})" }
,
		{ "trigger": "CCParticleFire_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleFire_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCParticleFire_getPosVar()", "contents": "getPosVar()" }
,
		{ "trigger": "CCParticleFire_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleFire_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "CCParticleFire_setEndSize(float_size,)", "contents": "setEndSize(${1:float_size})" }
,
		{ "trigger": "CCParticleFire_getEmissionRate()", "contents": "getEmissionRate()" }
,
		{ "trigger": "CCParticleFire_setRadialAccel(float_t,)", "contents": "setRadialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleFire_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleFire_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleFire_initWithFile(const_char*_plistFile,)", "contents": "initWithFile(${1:const_char*_plistFile})" }
,
		{ "trigger": "CCParticleFire_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleFire_setEndSizeVar(float_size,)", "contents": "setEndSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleFire_isFull()", "contents": "isFull()" }
,
		{ "trigger": "CCParticleFire_getStartRadius()", "contents": "getStartRadius()" }
,
		{ "trigger": "CCParticleFire_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleFire_setScale(float_s,)", "contents": "setScale(${1:float_s})" }
,
		{ "trigger": "CCParticleFire_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCParticleFire_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleFire_getStartColorVar()", "contents": "getStartColorVar()" }
,
		{ "trigger": "CCParticleFire_postStep()", "contents": "postStep()" }
,
		{ "trigger": "CCParticleFire_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleFire_setEndRadius(float_endRadius,)", "contents": "setEndRadius(${1:float_endRadius})" }
,
		{ "trigger": "CCParticleFire_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCParticleFire_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCParticleFire_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleFire_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleFire_create()", "contents": "CCParticleFire:create()" }
,


		{ "trigger": "CCTiledGrid3DAction_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCTiledGrid3DAction_originalTile(CCPoint_pos,)", "contents": "originalTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTiledGrid3DAction_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTiledGrid3DAction_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTiledGrid3DAction_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCTiledGrid3DAction_release()", "contents": "release()" }
,
		{ "trigger": "CCTiledGrid3DAction_setTile(CCPoint_pos,ccQuad3_coords,)", "contents": "setTile(${1:CCPoint_pos},${2:ccQuad3_coords})" }
,
		{ "trigger": "CCTiledGrid3DAction_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCTiledGrid3DAction_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTiledGrid3DAction_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCTiledGrid3DAction_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCTiledGrid3DAction_tile(CCPoint_pos,)", "contents": "tile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTiledGrid3DAction_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCTiledGrid3DAction_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTiledGrid3DAction_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCTiledGrid3DAction_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTiledGrid3DAction_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTiledGrid3DAction_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTiledGrid3DAction_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCTiledGrid3DAction_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCTiledGrid3DAction_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTiledGrid3DAction_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCTiledGrid3DAction_reverse()", "contents": "reverse()" }
,

		{ "trigger": "CCCallFuncN_create(LUA_FUNCTION_funcID,)", "contents": "CCCallFuncN:create(${1:LUA_FUNCTION_funcID})" }
,

		{ "trigger": "CCArmatureAnimation_playWithIndex(int_animationIndex,int_durationTo_=_-1,int_durationTween_=_-1,int_loop_=_-1,int_tweenEasing_=_TWEEN_EASING_MAX,)", "contents": "playWithIndex(${1:int_animationIndex},${2:int_durationTo_=_-1},${3:int_durationTween_=_-1},${4:int_loop_=_-1},${5:int_tweenEasing_=_TWEEN_EASING_MAX})" }
,
		{ "trigger": "CCArmatureAnimation_setAnimationData(CCAnimationData*_var,)", "contents": "setAnimationData(${1:CCAnimationData*_var})" }
,
		{ "trigger": "CCArmatureAnimation_stop()", "contents": "stop()" }
,
		{ "trigger": "CCArmatureAnimation_getMovementCount()", "contents": "getMovementCount()" }
,
		{ "trigger": "CCArmatureAnimation_update(float_dt,)", "contents": "update(${1:float_dt})" }
,
		{ "trigger": "CCArmatureAnimation_gotoAndPause(int_frameIndex,)", "contents": "gotoAndPause(${1:int_frameIndex})" }
,
		{ "trigger": "CCArmatureAnimation_getAnimationData()", "contents": "getAnimationData()" }
,
		{ "trigger": "CCArmatureAnimation_pause()", "contents": "pause()" }
,
		{ "trigger": "CCArmatureAnimation_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCArmatureAnimation_play(int_durationTo,int_durationTween,int_loop,int_tweenEasing,)", "contents": "play(${1:int_durationTo},${2:int_durationTween},${3:int_loop},${4:int_tweenEasing})" }
,
		{ "trigger": "CCArmatureAnimation_getSpeedScale()", "contents": "getSpeedScale()" }
,
		{ "trigger": "CCArmatureAnimation_getCurrentMovementID()", "contents": "getCurrentMovementID()" }
,
		{ "trigger": "CCArmatureAnimation_getRawDuration()", "contents": "getRawDuration()" }
,
		{ "trigger": "CCArmatureAnimation_init(CCArmature_*armature,)", "contents": "init(${1:CCArmature_*armature})" }
,
		{ "trigger": "CCArmatureAnimation_setUserObject(CCObject_*pUserObject,)", "contents": "setUserObject(${1:CCObject_*pUserObject})" }
,
		{ "trigger": "CCArmatureAnimation_play(const_char_*animationName,int_durationTo_=_-1,int_durationTween_=_-1,int_loop_=_-1,int_tweenEasing_=_TWEEN_EASING_MAX,)", "contents": "play(${1:const_char_*animationName},${2:int_durationTo_=_-1},${3:int_durationTween_=_-1},${4:int_loop_=_-1},${5:int_tweenEasing_=_TWEEN_EASING_MAX})" }
,
		{ "trigger": "CCArmatureAnimation_gotoAndPlay(int_frameIndex,)", "contents": "gotoAndPlay(${1:int_frameIndex})" }
,
		{ "trigger": "CCArmatureAnimation_resume()", "contents": "resume()" }
,
		{ "trigger": "CCArmatureAnimation_setSpeedScale(float_speedScale,)", "contents": "setSpeedScale(${1:float_speedScale})" }
,
		{ "trigger": "CCArmatureAnimation_create(CCArmature_*armature,)", "contents": "CCArmatureAnimation:create(${1:CCArmature_*armature})" }
,

		{ "trigger": "Timeline_copy()", "contents": "copy()" }
,
		{ "trigger": "Timeline_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "Timeline_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "Timeline_removeFrame(Frame*_frame,)", "contents": "removeFrame(${1:Frame*_frame})" }
,
		{ "trigger": "Timeline_clone()", "contents": "clone()" }
,
		{ "trigger": "Timeline_setNode(cocos2d::CCNode*_node,)", "contents": "setNode(${1:cocos2d::CCNode*_node})" }
,
		{ "trigger": "Timeline_setActionTimeline(ActionTimeline*_action,)", "contents": "setActionTimeline(${1:ActionTimeline*_action})" }
,
		{ "trigger": "Timeline_getActionTimeline()", "contents": "getActionTimeline()" }
,
		{ "trigger": "Timeline_stepToFrame(int_frameIndex,)", "contents": "stepToFrame(${1:int_frameIndex})" }
,
		{ "trigger": "Timeline_insertFrame(Frame*_frame,int_index,)", "contents": "insertFrame(${1:Frame*_frame},${2:int_index})" }
,
		{ "trigger": "Timeline_addFrame(Frame*_frame,)", "contents": "addFrame(${1:Frame*_frame})" }
,
		{ "trigger": "Timeline_retain()", "contents": "retain()" }
,
		{ "trigger": "Timeline_release()", "contents": "release()" }
,
		{ "trigger": "Timeline_getActionTag()", "contents": "getActionTag()" }
,
		{ "trigger": "Timeline_setActionTag(int_tag,)", "contents": "setActionTag(${1:int_tag})" }
,
		{ "trigger": "Timeline_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "Timeline_getNode()", "contents": "getNode()" }
,
		{ "trigger": "Timeline_init()", "contents": "init()" }
,
		{ "trigger": "Timeline_getFrames()", "contents": "getFrames()" }
,
		{ "trigger": "Timeline_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "Timeline_create()", "contents": "Timeline:create()" }
,

		{ "trigger": "CCDictionary_setObject(CCObject*_pObject,const_std::string&_key,)", "contents": "setObject(${1:CCObject*_pObject},${2:const_std::string&_key})" }
,
		{ "trigger": "CCDictionary_allKeysForObject(CCObject*_object,)", "contents": "allKeysForObject(${1:CCObject*_object})" }
,
		{ "trigger": "CCDictionary_removeAllObjects()", "contents": "removeAllObjects()" }
,
		{ "trigger": "CCDictionary_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCDictionary_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCDictionary_objectForKey(int_key,)", "contents": "objectForKey(${1:int_key})" }
,
		{ "trigger": "CCDictionary_setObject(CCObject*_pObject,int_key,)", "contents": "setObject(${1:CCObject*_pObject},${2:int_key})" }
,
		{ "trigger": "CCDictionary_valueForKey(const_std::string&_key,)", "contents": "valueForKey(${1:const_std::string&_key})" }
,
		{ "trigger": "CCDictionary_copy()", "contents": "copy()" }
,
		{ "trigger": "CCDictionary_removeObjectForKey(int_key,)", "contents": "removeObjectForKey(${1:int_key})" }
,
		{ "trigger": "CCDictionary_objectForKey(const_std::string&_key,)", "contents": "objectForKey(${1:const_std::string&_key})" }
,
		{ "trigger": "CCDictionary_count()", "contents": "count()" }
,
		{ "trigger": "CCDictionary_release()", "contents": "release()" }
,
		{ "trigger": "CCDictionary_allKeys()", "contents": "allKeys()" }
,
		{ "trigger": "CCDictionary_removeObjectsForKeys(CCArray*_pKeyArray,)", "contents": "removeObjectsForKeys(${1:CCArray*_pKeyArray})" }
,
		{ "trigger": "CCDictionary_valueForKey(int_key,)", "contents": "valueForKey(${1:int_key})" }
,
		{ "trigger": "CCDictionary_removeObjectForKey(const_std::string&_key,)", "contents": "removeObjectForKey(${1:const_std::string&_key})" }
,
		{ "trigger": "CCDictionary_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCDictionary_retain()", "contents": "retain()" }
,
		{ "trigger": "CCDictionary_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCDictionary_create()", "contents": "CCDictionary:create()" }
,
		{ "trigger": "CCDictionary_createWithContentsOfFile(const_char_*pFileName,)", "contents": "CCDictionary:createWithContentsOfFile(${1:const_char_*pFileName})" }
,
		{ "trigger": "CCDictionary_createWithDictionary(CCDictionary*_srcDict,)", "contents": "CCDictionary:createWithDictionary(${1:CCDictionary*_srcDict})" }
,

		{ "trigger": "CCParticleSun_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleSun_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleSun_setStartSizeVar(float_size,)", "contents": "setStartSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleSun_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleSun_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleSun_getRadialAccelVar()", "contents": "getRadialAccelVar()" }
,
		{ "trigger": "CCParticleSun_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleSun_setStartRadiusVar(float_startRadiusVar,)", "contents": "setStartRadiusVar(${1:float_startRadiusVar})" }
,
		{ "trigger": "CCParticleSun_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleSun_setTexture(CCTexture2D*_var,)", "contents": "setTexture(${1:CCTexture2D*_var})" }
,
		{ "trigger": "CCParticleSun_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleSun_isAutoRemoveOnFinish()", "contents": "isAutoRemoveOnFinish()" }
,
		{ "trigger": "CCParticleSun_getTotalParticles()", "contents": "getTotalParticles()" }
,
		{ "trigger": "CCParticleSun_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleSun_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleSun_setPositionType(tCCPositionType_type,)", "contents": "setPositionType(${1:tCCPositionType_type})" }
,
		{ "trigger": "CCParticleSun_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCParticleSun_setDisplayFrame(CCSpriteFrame*_spriteFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame*_spriteFrame})" }
,
		{ "trigger": "CCParticleSun_getSourcePosition()", "contents": "getSourcePosition()" }
,
		{ "trigger": "CCParticleSun_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleSun_setBlendAdditive(bool_value,)", "contents": "setBlendAdditive(${1:bool_value})" }
,
		{ "trigger": "CCParticleSun_setGravity(const_CCPoint&_g,)", "contents": "setGravity(${1:const_CCPoint&_g})" }
,
		{ "trigger": "CCParticleSun_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSun_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleSun_stopSystem()", "contents": "stopSystem()" }
,
		{ "trigger": "CCParticleSun_setLifeVar(float_lifeVar,)", "contents": "setLifeVar(${1:float_lifeVar})" }
,
		{ "trigger": "CCParticleSun_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleSun_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleSun_setPosVar(CCPoint_pos,)", "contents": "setPosVar(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSun_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleSun_setEmissionRate(float_rate,)", "contents": "setEmissionRate(${1:float_rate})" }
,
		{ "trigger": "CCParticleSun_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCParticleSun_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleSun_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleSun_getEndColorVar()", "contents": "getEndColorVar()" }
,
		{ "trigger": "CCParticleSun_getEndSize()", "contents": "getEndSize()" }
,
		{ "trigger": "CCParticleSun_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleSun_setEndRadiusVar(float_endRadiusVar,)", "contents": "setEndRadiusVar(${1:float_endRadiusVar})" }
,
		{ "trigger": "CCParticleSun_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleSun_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleSun_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleSun_setEndColorVar(const_ccColor4F_var,)", "contents": "setEndColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSun_getEndSpin()", "contents": "getEndSpin()" }
,
		{ "trigger": "CCParticleSun_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleSun_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCParticleSun_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleSun_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCParticleSun_setDuration(float_d,)", "contents": "setDuration(${1:float_d})" }
,
		{ "trigger": "CCParticleSun_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleSun_setStartSpinVar(float_var,)", "contents": "setStartSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleSun_getEmitterMode()", "contents": "getEmitterMode()" }
,
		{ "trigger": "CCParticleSun_updateQuadWithParticle(tCCParticle*_particle,const_CCPoint&_newPosition,)", "contents": "updateQuadWithParticle(${1:tCCParticle*_particle},${2:const_CCPoint&_newPosition})" }
,
		{ "trigger": "CCParticleSun_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleSun_setSpeed(float_speed,)", "contents": "setSpeed(${1:float_speed})" }
,
		{ "trigger": "CCParticleSun_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleSun_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleSun_getGravity()", "contents": "getGravity()" }
,
		{ "trigger": "CCParticleSun_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleSun_setEndSpinVar(float_var,)", "contents": "setEndSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleSun_getAngle()", "contents": "getAngle()" }
,
		{ "trigger": "CCParticleSun_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleSun_setStartRadius(float_startRadius,)", "contents": "setStartRadius(${1:float_startRadius})" }
,
		{ "trigger": "CCParticleSun_getAngleVar()", "contents": "getAngleVar()" }
,
		{ "trigger": "CCParticleSun_setEmitterMode(int_mode,)", "contents": "setEmitterMode(${1:int_mode})" }
,
		{ "trigger": "CCParticleSun_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleSun_getTangentialAccel()", "contents": "getTangentialAccel()" }
,
		{ "trigger": "CCParticleSun_getRotatePerSecondVar()", "contents": "getRotatePerSecondVar()" }
,
		{ "trigger": "CCParticleSun_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleSun_getLifeVar()", "contents": "getLifeVar()" }
,
		{ "trigger": "CCParticleSun_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSun_setStartSpin(float_var,)", "contents": "setStartSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleSun_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleSun_getStartSize()", "contents": "getStartSize()" }
,
		{ "trigger": "CCParticleSun_getEndRadius()", "contents": "getEndRadius()" }
,
		{ "trigger": "CCParticleSun_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleSun_addParticle()", "contents": "addParticle()" }
,
		{ "trigger": "CCParticleSun_setBlendFunc(ccBlendFunc_var,)", "contents": "setBlendFunc(${1:ccBlendFunc_var})" }
,
		{ "trigger": "CCParticleSun_initParticle(tCCParticle*_particle,)", "contents": "initParticle(${1:tCCParticle*_particle})" }
,
		{ "trigger": "CCParticleSun_getTangentialAccelVar()", "contents": "getTangentialAccelVar()" }
,
		{ "trigger": "CCParticleSun_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleSun_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleSun_setAngle(float_angle,)", "contents": "setAngle(${1:float_angle})" }
,
		{ "trigger": "CCParticleSun_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleSun_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleSun_getEndRadiusVar()", "contents": "getEndRadiusVar()" }
,
		{ "trigger": "CCParticleSun_getStartSpin()", "contents": "getStartSpin()" }
,
		{ "trigger": "CCParticleSun_setSpeedVar(float_speed,)", "contents": "setSpeedVar(${1:float_speed})" }
,
		{ "trigger": "CCParticleSun_getLife()", "contents": "getLife()" }
,
		{ "trigger": "CCParticleSun_isBlendAdditive()", "contents": "isBlendAdditive()" }
,
		{ "trigger": "CCParticleSun_getParticleCount()", "contents": "getParticleCount()" }
,
		{ "trigger": "CCParticleSun_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleSun_getEndSpinVar()", "contents": "getEndSpinVar()" }
,
		{ "trigger": "CCParticleSun_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleSun_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleSun_setStartSize(float_size,)", "contents": "setStartSize(${1:float_size})" }
,
		{ "trigger": "CCParticleSun_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleSun_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSun_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleSun_getStartSpinVar()", "contents": "getStartSpinVar()" }
,
		{ "trigger": "CCParticleSun_setRadialAccelVar(float_t,)", "contents": "setRadialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleSun_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCParticleSun_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleSun_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleSun_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleSun_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleSun_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleSun_setTextureWithRect(CCTexture2D_*texture,const_CCRect&_rect,)", "contents": "setTextureWithRect(${1:CCTexture2D_*texture},${2:const_CCRect&_rect})" }
,
		{ "trigger": "CCParticleSun_setSourcePosition(CCPoint_pos,)", "contents": "setSourcePosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSun_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleSun_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleSun_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleSun_getRotatePerSecond()", "contents": "getRotatePerSecond()" }
,
		{ "trigger": "CCParticleSun_initWithTotalParticles(unsigned_int_number,)", "contents": "initWithTotalParticles(${1:unsigned_int_number})" }
,
		{ "trigger": "CCParticleSun_setBatchNode(CCParticleBatchNode*_node,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_node})" }
,
		{ "trigger": "CCParticleSun_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleSun_isActive()", "contents": "isActive()" }
,
		{ "trigger": "CCParticleSun_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleSun_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleSun_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleSun_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleSun_setEndSpin(float_var,)", "contents": "setEndSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleSun_resetSystem()", "contents": "resetSystem()" }
,
		{ "trigger": "CCParticleSun_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleSun_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleSun_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleSun_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleSun_getEndSizeVar()", "contents": "getEndSizeVar()" }
,
		{ "trigger": "CCParticleSun_setStartColorVar(const_ccColor4F_var,)", "contents": "setStartColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSun_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSun_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleSun_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleSun_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleSun_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleSun_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleSun_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleSun_setStartColor(const_ccColor4F_var,)", "contents": "setStartColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSun_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleSun_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleSun_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleSun_setAngleVar(float_angle,)", "contents": "setAngleVar(${1:float_angle})" }
,
		{ "trigger": "CCParticleSun_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleSun_setTexture(CCTexture2D*_texture,)", "contents": "setTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCParticleSun_setTangentialAccelVar(float_t,)", "contents": "setTangentialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleSun_setRotatePerSecond(float_degrees,)", "contents": "setRotatePerSecond(${1:float_degrees})" }
,
		{ "trigger": "CCParticleSun_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleSun_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleSun_setTotalParticles(unsigned_int_tp,)", "contents": "setTotalParticles(${1:unsigned_int_tp})" }
,
		{ "trigger": "CCParticleSun_getSpeedVar()", "contents": "getSpeedVar()" }
,
		{ "trigger": "CCParticleSun_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleSun_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleSun_getStartSizeVar()", "contents": "getStartSizeVar()" }
,
		{ "trigger": "CCParticleSun_setAutoRemoveOnFinish(bool_var,)", "contents": "setAutoRemoveOnFinish(${1:bool_var})" }
,
		{ "trigger": "CCParticleSun_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleSun_setTangentialAccel(float_t,)", "contents": "setTangentialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleSun_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleSun_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleSun_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleSun_setLife(float_life,)", "contents": "setLife(${1:float_life})" }
,
		{ "trigger": "CCParticleSun_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleSun_setEndColor(const_ccColor4F_var,)", "contents": "setEndColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSun_getRadialAccel()", "contents": "getRadialAccel()" }
,
		{ "trigger": "CCParticleSun_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleSun_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleSun_setRotatePerSecondVar(float_degrees,)", "contents": "setRotatePerSecondVar(${1:float_degrees})" }
,
		{ "trigger": "CCParticleSun_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleSun_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleSun_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCParticleSun_getStartRadiusVar()", "contents": "getStartRadiusVar()" }
,
		{ "trigger": "CCParticleSun_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleSun_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleSun_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleSun_setBatchNode(CCParticleBatchNode*_batchNode,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_batchNode})" }
,
		{ "trigger": "CCParticleSun_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleSun_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCParticleSun_getPosVar()", "contents": "getPosVar()" }
,
		{ "trigger": "CCParticleSun_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleSun_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "CCParticleSun_setEndSize(float_size,)", "contents": "setEndSize(${1:float_size})" }
,
		{ "trigger": "CCParticleSun_getEmissionRate()", "contents": "getEmissionRate()" }
,
		{ "trigger": "CCParticleSun_setRadialAccel(float_t,)", "contents": "setRadialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleSun_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleSun_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleSun_initWithFile(const_char*_plistFile,)", "contents": "initWithFile(${1:const_char*_plistFile})" }
,
		{ "trigger": "CCParticleSun_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleSun_setEndSizeVar(float_size,)", "contents": "setEndSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleSun_isFull()", "contents": "isFull()" }
,
		{ "trigger": "CCParticleSun_getStartRadius()", "contents": "getStartRadius()" }
,
		{ "trigger": "CCParticleSun_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleSun_setScale(float_s,)", "contents": "setScale(${1:float_s})" }
,
		{ "trigger": "CCParticleSun_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCParticleSun_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleSun_getStartColorVar()", "contents": "getStartColorVar()" }
,
		{ "trigger": "CCParticleSun_postStep()", "contents": "postStep()" }
,
		{ "trigger": "CCParticleSun_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleSun_setEndRadius(float_endRadius,)", "contents": "setEndRadius(${1:float_endRadius})" }
,
		{ "trigger": "CCParticleSun_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCParticleSun_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCParticleSun_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleSun_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleSun_create()", "contents": "CCParticleSun:create()" }
,

		{ "trigger": "CCTMXLayerInfo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTMXLayerInfo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTMXLayerInfo_getProperties()", "contents": "getProperties()" }
,
		{ "trigger": "CCTMXLayerInfo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTMXLayerInfo_release()", "contents": "release()" }
,
		{ "trigger": "CCTMXLayerInfo_setProperties(CCDictionary*_pval,)", "contents": "setProperties(${1:CCDictionary*_pval})" }
,
		{ "trigger": "CCTMXLayerInfo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTMXLayerInfo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTMXLayerInfo_isSingleReference()", "contents": "isSingleReference()" }
,

		{ "trigger": "CCSprite_setScaleX(float_fScaleX,)", "contents": "setScaleX(${1:float_fScaleX})" }
,
		{ "trigger": "CCSprite_reorderChild(CCNode*_pChild,int_zOrder,)", "contents": "reorderChild(${1:CCNode*_pChild},${2:int_zOrder})" }
,
		{ "trigger": "CCSprite_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCSprite_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCSprite_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCSprite_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCSprite_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCSprite_setFlipY(bool_bFlipY,)", "contents": "setFlipY(${1:bool_bFlipY})" }
,
		{ "trigger": "CCSprite_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCSprite_setTextureRect(CCRect_rect,bool_rotated,CCSize_size,)", "contents": "setTextureRect(${1:CCRect_rect},${2:bool_rotated},${3:CCSize_size})" }
,
		{ "trigger": "CCSprite_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCSprite_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCSprite_setAtlasIndex(unsigned_int_uAtlasIndex,)", "contents": "setAtlasIndex(${1:unsigned_int_uAtlasIndex})" }
,
		{ "trigger": "CCSprite_draw()", "contents": "draw()" }
,
		{ "trigger": "CCSprite_setSkewY(float_sy,)", "contents": "setSkewY(${1:float_sy})" }
,
		{ "trigger": "CCSprite_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCSprite_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCSprite_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCSprite_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCSprite_setBlendFunc(ccBlendFunc_blendFunc,)", "contents": "setBlendFunc(${1:ccBlendFunc_blendFunc})" }
,
		{ "trigger": "CCSprite_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCSprite_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCSprite_setVisible(bool_bVisible,)", "contents": "setVisible(${1:bool_bVisible})" }
,
		{ "trigger": "CCSprite_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCSprite_getQuad()", "contents": "getQuad()" }
,
		{ "trigger": "CCSprite_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCSprite_visit()", "contents": "visit()" }
,
		{ "trigger": "CCSprite_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCSprite_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCSprite_setDisplayFrameWithAnimationName(const_char_*animationName,int_frameIndex,)", "contents": "setDisplayFrameWithAnimationName(${1:const_char_*animationName},${2:int_frameIndex})" }
,
		{ "trigger": "CCSprite_removeAllChildrenWithCleanup(bool_bCleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_bCleanup})" }
,
		{ "trigger": "CCSprite_displayFrame()", "contents": "displayFrame()" }
,
		{ "trigger": "CCSprite_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCSprite_addChild(CCNode*_pChild,int_zOrder,)", "contents": "addChild(${1:CCNode*_pChild},${2:int_zOrder})" }
,
		{ "trigger": "CCSprite_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCSprite_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCSprite_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCSprite_setDisplayFrame(CCSpriteFrame_*pNewFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame_*pNewFrame})" }
,
		{ "trigger": "CCSprite_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCSprite_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCSprite_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCSprite_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCSprite_setVertexZ(float_fVertexZ,)", "contents": "setVertexZ(${1:float_fVertexZ})" }
,
		{ "trigger": "CCSprite_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCSprite_setScaleY(float_fScaleY,)", "contents": "setScaleY(${1:float_fScaleY})" }
,
		{ "trigger": "CCSprite_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCSprite_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCSprite_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCSprite_init()", "contents": "init()" }
,
		{ "trigger": "CCSprite_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCSprite_isDirty()", "contents": "isDirty()" }
,
		{ "trigger": "CCSprite_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCSprite_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCSprite_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCSprite_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCSprite_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCSprite_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCSprite_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCSprite_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCSprite_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCSprite_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCSprite_isFlipY()", "contents": "isFlipY()" }
,
		{ "trigger": "CCSprite_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCSprite_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCSprite_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCSprite_getTextureAtlas()", "contents": "getTextureAtlas()" }
,
		{ "trigger": "CCSprite_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCSprite_isFrameDisplayed(CCSpriteFrame_*pFrame,)", "contents": "isFrameDisplayed(${1:CCSpriteFrame_*pFrame})" }
,
		{ "trigger": "CCSprite_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCSprite_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCSprite_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCSprite_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCSprite_setTextureAtlas(CCTextureAtlas_*pobTextureAtlas,)", "contents": "setTextureAtlas(${1:CCTextureAtlas_*pobTextureAtlas})" }
,
		{ "trigger": "CCSprite_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCSprite_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCSprite_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCSprite_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCSprite_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCSprite_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCSprite_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCSprite_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCSprite_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCSprite_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCSprite_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCSprite_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCSprite_retain()", "contents": "retain()" }
,
		{ "trigger": "CCSprite_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCSprite_addChild(CCNode*_pChild,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode*_pChild},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCSprite_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCSprite_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCSprite_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCSprite_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCSprite_setVertexRect(CCRect_rect,)", "contents": "setVertexRect(${1:CCRect_rect})" }
,
		{ "trigger": "CCSprite_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCSprite_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCSprite_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCSprite_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCSprite_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCSprite_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCSprite_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCSprite_setScale(float_fScale,)", "contents": "setScale(${1:float_fScale})" }
,
		{ "trigger": "CCSprite_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCSprite_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCSprite_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCSprite_getOffsetPosition()", "contents": "getOffsetPosition()" }
,
		{ "trigger": "CCSprite_copy()", "contents": "copy()" }
,
		{ "trigger": "CCSprite_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCSprite_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCSprite_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCSprite_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCSprite_setColor(ccColor3B_color3,)", "contents": "setColor(${1:ccColor3B_color3})" }
,
		{ "trigger": "CCSprite_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCSprite_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCSprite_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCSprite_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCSprite_setRotation(float_rotation,)", "contents": "setRotation(${1:float_rotation})" }
,
		{ "trigger": "CCSprite_setTexture(CCTexture2D_*texture,)", "contents": "setTexture(${1:CCTexture2D_*texture})" }
,
		{ "trigger": "CCSprite_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCSprite_isTextureRectRotated()", "contents": "isTextureRectRotated()" }
,
		{ "trigger": "CCSprite_sortAllChildren()", "contents": "sortAllChildren()" }
,
		{ "trigger": "CCSprite_setBatchNode(CCSpriteBatchNode*_pBatchNode,)", "contents": "setBatchNode(${1:CCSpriteBatchNode*_pBatchNode})" }
,
		{ "trigger": "CCSprite_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCSprite_getAtlasIndex()", "contents": "getAtlasIndex()" }
,
		{ "trigger": "CCSprite_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCSprite_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCSprite_transform()", "contents": "transform()" }
,
		{ "trigger": "CCSprite_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCSprite_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCSprite_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCSprite_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCSprite_updateTransform()", "contents": "updateTransform()" }
,
		{ "trigger": "CCSprite_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCSprite_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCSprite_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCSprite_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCSprite_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCSprite_release()", "contents": "release()" }
,
		{ "trigger": "CCSprite_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCSprite_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCSprite_setSkewX(float_sx,)", "contents": "setSkewX(${1:float_sx})" }
,
		{ "trigger": "CCSprite_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCSprite_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCSprite_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCSprite_getTextureRect()", "contents": "getTextureRect()" }
,
		{ "trigger": "CCSprite_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCSprite_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCSprite_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCSprite_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCSprite_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCSprite_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCSprite_removeChild(CCNode*_pChild,bool_bCleanUp,)", "contents": "removeChild(${1:CCNode*_pChild},${2:bool_bCleanUp})" }
,
		{ "trigger": "CCSprite_isFlipX()", "contents": "isFlipX()" }
,
		{ "trigger": "CCSprite_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCSprite_setDirty(bool_bDirty,)", "contents": "setDirty(${1:bool_bDirty})" }
,
		{ "trigger": "CCSprite_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCSprite_setFlipX(bool_bFlipX,)", "contents": "setFlipX(${1:bool_bFlipX})" }
,
		{ "trigger": "CCSprite_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCSprite_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCSprite_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCSprite_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCSprite_setTextureRect(CCRect_rect,)", "contents": "setTextureRect(${1:CCRect_rect})" }
,
		{ "trigger": "CCSprite_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCSprite_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCSprite_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCSprite_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCSprite_description()", "contents": "description()" }
,
		{ "trigger": "CCSprite_addChild(CCNode*_pChild,)", "contents": "addChild(${1:CCNode*_pChild})" }
,
		{ "trigger": "CCSprite_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCSprite_createWithSpriteFrameName(const_char_*pszSpriteFrameName,)", "contents": "CCSprite:createWithSpriteFrameName(${1:const_char_*pszSpriteFrameName})" }
,
		{ "trigger": "CCSprite_createWithTexture(CCTexture2D_*pTexture,)", "contents": "CCSprite:createWithTexture(${1:CCTexture2D_*pTexture})" }
,
		{ "trigger": "CCSprite_createWithSpriteFrame(CCSpriteFrame_*pSpriteFrame,)", "contents": "CCSprite:createWithSpriteFrame(${1:CCSpriteFrame_*pSpriteFrame})" }
,
		{ "trigger": "CCSprite_create(const_char_*pszFileName,CCRect_rect,)", "contents": "CCSprite:create(${1:const_char_*pszFileName},${2:CCRect_rect})" }
,
		{ "trigger": "CCSprite_create(const_char_*pszFileName,)", "contents": "CCSprite:create(${1:const_char_*pszFileName})" }
,
		{ "trigger": "CCSprite_create()", "contents": "CCSprite:create()" }
,
		{ "trigger": "CCSprite_createWithTexture(CCTexture2D_*pTexture,CCRect_rect,)", "contents": "CCSprite:createWithTexture(${1:CCTexture2D_*pTexture},${2:CCRect_rect})" }
,

		{ "trigger": "CCTMXMapInfo_parseXMLString(const_char_*xmlString,)", "contents": "parseXMLString(${1:const_char_*xmlString})" }
,
		{ "trigger": "CCTMXMapInfo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTMXMapInfo_setOrientation(int_val,)", "contents": "setOrientation(${1:int_val})" }
,
		{ "trigger": "CCTMXMapInfo_release()", "contents": "release()" }
,
		{ "trigger": "CCTMXMapInfo_setTileSize(CCSize_sz,)", "contents": "setTileSize(${1:CCSize_sz})" }
,
		{ "trigger": "CCTMXMapInfo_getParentElement()", "contents": "getParentElement()" }
,
		{ "trigger": "CCTMXMapInfo_setProperties(CCDictionary*_pval,)", "contents": "setProperties(${1:CCDictionary*_pval})" }
,
		{ "trigger": "CCTMXMapInfo_getMapSize()", "contents": "getMapSize()" }
,
		{ "trigger": "CCTMXMapInfo_parseXMLFile(const_char_*xmlFilename,)", "contents": "parseXMLFile(${1:const_char_*xmlFilename})" }
,
		{ "trigger": "CCTMXMapInfo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTMXMapInfo_getProperties()", "contents": "getProperties()" }
,
		{ "trigger": "CCTMXMapInfo_getLayerAttribs()", "contents": "getLayerAttribs()" }
,
		{ "trigger": "CCTMXMapInfo_setLayers(CCArray*_pval,)", "contents": "setLayers(${1:CCArray*_pval})" }
,
		{ "trigger": "CCTMXMapInfo_getStoringCharacters()", "contents": "getStoringCharacters()" }
,
		{ "trigger": "CCTMXMapInfo_textHandler(void_*ctx,const_char_*ch,int_len,)", "contents": "textHandler(${1:void_*ctx},${2:const_char_*ch},${3:int_len})" }
,
		{ "trigger": "CCTMXMapInfo_setTMXFileName(const_char_*fileName,)", "contents": "setTMXFileName(${1:const_char_*fileName})" }
,
		{ "trigger": "CCTMXMapInfo_getOrientation()", "contents": "getOrientation()" }
,
		{ "trigger": "CCTMXMapInfo_setParentElement(int_val,)", "contents": "setParentElement(${1:int_val})" }
,
		{ "trigger": "CCTMXMapInfo_getTMXFileName()", "contents": "getTMXFileName()" }
,
		{ "trigger": "CCTMXMapInfo_getTileSize()", "contents": "getTileSize()" }
,
		{ "trigger": "CCTMXMapInfo_getTilesets()", "contents": "getTilesets()" }
,
		{ "trigger": "CCTMXMapInfo_setCurrentString(const_char_*currentString,)", "contents": "setCurrentString(${1:const_char_*currentString})" }
,
		{ "trigger": "CCTMXMapInfo_getObjectGroups()", "contents": "getObjectGroups()" }
,
		{ "trigger": "CCTMXMapInfo_getLayers()", "contents": "getLayers()" }
,
		{ "trigger": "CCTMXMapInfo_setTileProperties(CCDictionary*_tileProperties,)", "contents": "setTileProperties(${1:CCDictionary*_tileProperties})" }
,
		{ "trigger": "CCTMXMapInfo_setLayerAttribs(int_val,)", "contents": "setLayerAttribs(${1:int_val})" }
,
		{ "trigger": "CCTMXMapInfo_setObjectGroups(CCArray*_val,)", "contents": "setObjectGroups(${1:CCArray*_val})" }
,
		{ "trigger": "CCTMXMapInfo_startElement(void_*ctx,const_char_*name,const_char_**atts,)", "contents": "startElement(${1:void_*ctx},${2:const_char_*name},${3:const_char_**atts})" }
,
		{ "trigger": "CCTMXMapInfo_setParentGID(unsigned_int_val,)", "contents": "setParentGID(${1:unsigned_int_val})" }
,
		{ "trigger": "CCTMXMapInfo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTMXMapInfo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTMXMapInfo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTMXMapInfo_setStoringCharacters(bool_val,)", "contents": "setStoringCharacters(${1:bool_val})" }
,
		{ "trigger": "CCTMXMapInfo_getCurrentString()", "contents": "getCurrentString()" }
,
		{ "trigger": "CCTMXMapInfo_getTileProperties()", "contents": "getTileProperties()" }
,
		{ "trigger": "CCTMXMapInfo_setTilesets(CCArray*_pval,)", "contents": "setTilesets(${1:CCArray*_pval})" }
,
		{ "trigger": "CCTMXMapInfo_setMapSize(CCSize_sz,)", "contents": "setMapSize(${1:CCSize_sz})" }
,
		{ "trigger": "CCTMXMapInfo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTMXMapInfo_getParentGID()", "contents": "getParentGID()" }
,
		{ "trigger": "CCTMXMapInfo_endElement(void_*ctx,const_char_*name,)", "contents": "endElement(${1:void_*ctx},${2:const_char_*name})" }
,
		{ "trigger": "CCTMXMapInfo_formatWithTMXFile(const_char_*tmxFile,)", "contents": "CCTMXMapInfo:formatWithTMXFile(${1:const_char_*tmxFile})" }
,
		{ "trigger": "CCTMXMapInfo_formatWithXML(const_char_*tmxString,const_char*_resourcePath,)", "contents": "CCTMXMapInfo:formatWithXML(${1:const_char_*tmxString},${2:const_char*_resourcePath})" }
,

		{ "trigger": "CCReuseGrid_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCReuseGrid_copy()", "contents": "copy()" }
,
		{ "trigger": "CCReuseGrid_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCReuseGrid_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCReuseGrid_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCReuseGrid_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCReuseGrid_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCReuseGrid_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCReuseGrid_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCReuseGrid_release()", "contents": "release()" }
,
		{ "trigger": "CCReuseGrid_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCReuseGrid_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCReuseGrid_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCReuseGrid_retain()", "contents": "retain()" }
,
		{ "trigger": "CCReuseGrid_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCReuseGrid_create(int_times,)", "contents": "CCReuseGrid:create(${1:int_times})" }
,

		{ "trigger": "CCSpriteBatchNode_getDescendants()", "contents": "getDescendants()" }
,
		{ "trigger": "CCSpriteBatchNode_lowestAtlasIndexInChild(CCSprite_*sprite,)", "contents": "lowestAtlasIndexInChild(${1:CCSprite_*sprite})" }
,
		{ "trigger": "CCSpriteBatchNode_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCSpriteBatchNode_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCSpriteBatchNode_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCSpriteBatchNode_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCSpriteBatchNode_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCSpriteBatchNode_draw()", "contents": "draw()" }
,
		{ "trigger": "CCSpriteBatchNode_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCSpriteBatchNode_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCSpriteBatchNode_setBlendFunc(ccBlendFunc_blendFunc,)", "contents": "setBlendFunc(${1:ccBlendFunc_blendFunc})" }
,
		{ "trigger": "CCSpriteBatchNode_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCSpriteBatchNode_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCSpriteBatchNode_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCSpriteBatchNode_visit()", "contents": "visit()" }
,
		{ "trigger": "CCSpriteBatchNode_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCSpriteBatchNode_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCSpriteBatchNode_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCSpriteBatchNode_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCSpriteBatchNode_removeChildAtIndex(unsigned_int_index,bool_doCleanup,)", "contents": "removeChildAtIndex(${1:unsigned_int_index},${2:bool_doCleanup})" }
,
		{ "trigger": "CCSpriteBatchNode_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCSpriteBatchNode_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCSpriteBatchNode_transform()", "contents": "transform()" }
,
		{ "trigger": "CCSpriteBatchNode_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCSpriteBatchNode_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCSpriteBatchNode_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCSpriteBatchNode_removeSpriteFromAtlas(CCSprite_*sprite,)", "contents": "removeSpriteFromAtlas(${1:CCSprite_*sprite})" }
,
		{ "trigger": "CCSpriteBatchNode_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCSpriteBatchNode_reorderBatch(bool_reorder,)", "contents": "reorderBatch(${1:bool_reorder})" }
,
		{ "trigger": "CCSpriteBatchNode_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCSpriteBatchNode_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCSpriteBatchNode_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCSpriteBatchNode_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCSpriteBatchNode_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCSpriteBatchNode_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCSpriteBatchNode_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCSpriteBatchNode_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCSpriteBatchNode_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCSpriteBatchNode_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCSpriteBatchNode_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCSpriteBatchNode_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCSpriteBatchNode_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCSpriteBatchNode_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCSpriteBatchNode_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCSpriteBatchNode_getTextureAtlas()", "contents": "getTextureAtlas()" }
,
		{ "trigger": "CCSpriteBatchNode_setTextureAtlas(CCTextureAtlas*_textureAtlas,)", "contents": "setTextureAtlas(${1:CCTextureAtlas*_textureAtlas})" }
,
		{ "trigger": "CCSpriteBatchNode_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCSpriteBatchNode_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCSpriteBatchNode_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCSpriteBatchNode_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCSpriteBatchNode_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCSpriteBatchNode_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCSpriteBatchNode_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCSpriteBatchNode_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCSpriteBatchNode_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCSpriteBatchNode_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCSpriteBatchNode_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCSpriteBatchNode_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCSpriteBatchNode_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCSpriteBatchNode_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCSpriteBatchNode_retain()", "contents": "retain()" }
,
		{ "trigger": "CCSpriteBatchNode_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCSpriteBatchNode_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCSpriteBatchNode_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCSpriteBatchNode_atlasIndexForChild(CCSprite_*sprite,int_z,)", "contents": "atlasIndexForChild(${1:CCSprite_*sprite},${2:int_z})" }
,
		{ "trigger": "CCSpriteBatchNode_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCSpriteBatchNode_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCSpriteBatchNode_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCSpriteBatchNode_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCSpriteBatchNode_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCSpriteBatchNode_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCSpriteBatchNode_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCSpriteBatchNode_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCSpriteBatchNode_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCSpriteBatchNode_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCSpriteBatchNode_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCSpriteBatchNode_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCSpriteBatchNode_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCSpriteBatchNode_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCSpriteBatchNode_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCSpriteBatchNode_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCSpriteBatchNode_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCSpriteBatchNode_sortAllChildren()", "contents": "sortAllChildren()" }
,
		{ "trigger": "CCSpriteBatchNode_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCSpriteBatchNode_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCSpriteBatchNode_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCSpriteBatchNode_rebuildIndexInOrder(CCSprite_*parent,unsigned_int_index,)", "contents": "rebuildIndexInOrder(${1:CCSprite_*parent},${2:unsigned_int_index})" }
,
		{ "trigger": "CCSpriteBatchNode_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCSpriteBatchNode_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCSpriteBatchNode_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCSpriteBatchNode_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCSpriteBatchNode_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCSpriteBatchNode_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCSpriteBatchNode_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCSpriteBatchNode_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCSpriteBatchNode_release()", "contents": "release()" }
,
		{ "trigger": "CCSpriteBatchNode_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCSpriteBatchNode_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCSpriteBatchNode_setTexture(CCTexture2D_*texture,)", "contents": "setTexture(${1:CCTexture2D_*texture})" }
,
		{ "trigger": "CCSpriteBatchNode_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCSpriteBatchNode_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCSpriteBatchNode_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCSpriteBatchNode_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCSpriteBatchNode_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCSpriteBatchNode_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCSpriteBatchNode_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCSpriteBatchNode_insertChild(CCSprite_*child,unsigned_int_index,)", "contents": "insertChild(${1:CCSprite_*child},${2:unsigned_int_index})" }
,
		{ "trigger": "CCSpriteBatchNode_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCSpriteBatchNode_appendChild(CCSprite_*child,)", "contents": "appendChild(${1:CCSprite_*child})" }
,
		{ "trigger": "CCSpriteBatchNode_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCSpriteBatchNode_increaseAtlasCapacity()", "contents": "increaseAtlasCapacity()" }
,
		{ "trigger": "CCSpriteBatchNode_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCSpriteBatchNode_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCSpriteBatchNode_highestAtlasIndexInChild(CCSprite_*sprite,)", "contents": "highestAtlasIndexInChild(${1:CCSprite_*sprite})" }
,
		{ "trigger": "CCSpriteBatchNode_copy()", "contents": "copy()" }
,
		{ "trigger": "CCSpriteBatchNode_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCSpriteBatchNode_description()", "contents": "description()" }
,
		{ "trigger": "CCSpriteBatchNode_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCSpriteBatchNode_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCSpriteBatchNode_create(const_char*_fileImage,unsigned_int_capacity,)", "contents": "CCSpriteBatchNode:create(${1:const_char*_fileImage},${2:unsigned_int_capacity})" }
,
		{ "trigger": "CCSpriteBatchNode_create(const_char*_fileImage,)", "contents": "CCSpriteBatchNode:create(${1:const_char*_fileImage})" }
,
		{ "trigger": "CCSpriteBatchNode_createWithTexture(CCTexture2D*_tex,unsigned_int_capacity,)", "contents": "CCSpriteBatchNode:createWithTexture(${1:CCTexture2D*_tex},${2:unsigned_int_capacity})" }
,
		{ "trigger": "CCSpriteBatchNode_createWithTexture(CCTexture2D_*tex,)", "contents": "CCSpriteBatchNode:createWithTexture(${1:CCTexture2D_*tex})" }
,

		{ "trigger": "ListView_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "ListView_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "ListView_pushBackDefaultItem()", "contents": "pushBackDefaultItem()" }
,
		{ "trigger": "ListView_getBottomInParent()", "contents": "getBottomInParent()" }
,
		{ "trigger": "ListView_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "ListView_release()", "contents": "release()" }
,
		{ "trigger": "ListView_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "ListView_scrollToBottomRight(float_time,bool_attenuated,)", "contents": "scrollToBottomRight(${1:float_time},${2:bool_attenuated})" }
,
		{ "trigger": "ListView_scrollToBottom(float_time,bool_attenuated,)", "contents": "scrollToBottom(${1:float_time},${2:bool_attenuated})" }
,
		{ "trigger": "ListView_getVirtualRenderer()", "contents": "getVirtualRenderer()" }
,
		{ "trigger": "ListView_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "ListView_draw()", "contents": "draw()" }
,
		{ "trigger": "ListView_getNodes()", "contents": "getNodes()" }
,
		{ "trigger": "ListView_setFocused(bool_fucosed,)", "contents": "setFocused(${1:bool_fucosed})" }
,
		{ "trigger": "ListView_isBright()", "contents": "isBright()" }
,
		{ "trigger": "ListView_scrollToPercentBothDirection(const_CCPoint&_percent,float_time,bool_attenuated,)", "contents": "scrollToPercentBothDirection(${1:const_CCPoint&_percent},${2:float_time},${3:bool_attenuated})" }
,
		{ "trigger": "ListView_getLayoutParameter(LayoutParameterType_type,)", "contents": "getLayoutParameter(${1:LayoutParameterType_type})" }
,
		{ "trigger": "ListView_ignoreContentAdaptWithSize(bool_ignore,)", "contents": "ignoreContentAdaptWithSize(${1:bool_ignore})" }
,
		{ "trigger": "ListView_scrollToTop(float_time,bool_attenuated,)", "contents": "scrollToTop(${1:float_time},${2:bool_attenuated})" }
,
		{ "trigger": "ListView_getBackGroundEndColor()", "contents": "getBackGroundEndColor()" }
,
		{ "trigger": "ListView_setInnerContainerSize(const_CCSize_&size,)", "contents": "setInnerContainerSize(${1:const_CCSize_&size})" }
,
		{ "trigger": "ListView_getItem(unsigned_int_index,)", "contents": "getItem(${1:unsigned_int_index})" }
,
		{ "trigger": "ListView_update(float_dt,)", "contents": "update(${1:float_dt})" }
,
		{ "trigger": "ListView_jumpToPercentVertical(float_percent,)", "contents": "jumpToPercentVertical(${1:float_percent})" }
,
		{ "trigger": "ListView_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "ListView_getLayoutSize()", "contents": "getLayoutSize()" }
,
		{ "trigger": "ListView_visit()", "contents": "visit()" }
,
		{ "trigger": "ListView_getTopInParent()", "contents": "getTopInParent()" }
,
		{ "trigger": "ListView_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "ListView_requestDoLayout()", "contents": "requestDoLayout()" }
,
		{ "trigger": "ListView_disable()", "contents": "disable()" }
,
		{ "trigger": "ListView_setBackGroundColorOpacity(GLubyte_opacity,)", "contents": "setBackGroundColorOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "ListView_getRect()", "contents": "getRect()" }
,
		{ "trigger": "ListView_jumpToTopRight()", "contents": "jumpToTopRight()" }
,
		{ "trigger": "ListView_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "ListView_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "ListView_refreshView()", "contents": "refreshView()" }
,
		{ "trigger": "ListView_removeChild(CCNode*_child,bool_cleaup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleaup})" }
,
		{ "trigger": "ListView_isBounceEnabled()", "contents": "isBounceEnabled()" }
,
		{ "trigger": "ListView_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "ListView_getPositionPercent()", "contents": "getPositionPercent()" }
,
		{ "trigger": "ListView_getInnerContainerSize()", "contents": "getInnerContainerSize()" }
,
		{ "trigger": "ListView_getColor()", "contents": "getColor()" }
,
		{ "trigger": "ListView_setFlipY(bool_flipY,)", "contents": "setFlipY(${1:bool_flipY})" }
,
		{ "trigger": "ListView_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "ListView_setSize(const_CCSize_&size,)", "contents": "setSize(${1:const_CCSize_&size})" }
,
		{ "trigger": "ListView_isInertiaScrollEnabled()", "contents": "isInertiaScrollEnabled()" }
,
		{ "trigger": "ListView_scrollToRight(float_time,bool_attenuated,)", "contents": "scrollToRight(${1:float_time},${2:bool_attenuated})" }
,
		{ "trigger": "ListView_getBackGroundImageCapInsets()", "contents": "getBackGroundImageCapInsets()" }
,
		{ "trigger": "ListView_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "ListView_getTouchEndPos()", "contents": "getTouchEndPos()" }
,
		{ "trigger": "ListView_jumpToTop()", "contents": "jumpToTop()" }
,
		{ "trigger": "ListView_onTouchEnded(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchEnded(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "ListView_didNotSelectSelf()", "contents": "didNotSelectSelf()" }
,
		{ "trigger": "ListView_onTouchMoved(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchMoved(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "ListView_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "ListView_isBackGroundImageScale9Enabled()", "contents": "isBackGroundImageScale9Enabled()" }
,
		{ "trigger": "ListView_scrollToPercentVertical(float_percent,float_time,bool_attenuated,)", "contents": "scrollToPercentVertical(${1:float_percent},${2:float_time},${3:bool_attenuated})" }
,
		{ "trigger": "ListView_insertCustomItem(Widget*_item,int_index,)", "contents": "insertCustomItem(${1:Widget*_item},${2:int_index})" }
,
		{ "trigger": "ListView_setTouchEnable(bool_enabled,bool_containChildren_=_false,)", "contents": "setTouchEnable(${1:bool_enabled},${2:bool_containChildren_=_false})" }
,
		{ "trigger": "ListView_transform()", "contents": "transform()" }
,
		{ "trigger": "ListView_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "ListView_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "ListView_addNode(CCNode_*_node,int_zOrder,)", "contents": "addNode(${1:CCNode_*_node},${2:int_zOrder})" }
,
		{ "trigger": "ListView_removeAllNodes()", "contents": "removeAllNodes()" }
,
		{ "trigger": "ListView_setBackGroundImageCapInsets(const_CCRect&_capInsets,)", "contents": "setBackGroundImageCapInsets(${1:const_CCRect&_capInsets})" }
,
		{ "trigger": "ListView_setBrightStyle(BrightStyle_style,)", "contents": "setBrightStyle(${1:BrightStyle_style})" }
,
		{ "trigger": "ListView_getWidgetByTag(int_tag,)", "contents": "getWidgetByTag(${1:int_tag})" }
,
		{ "trigger": "ListView_getChildByName(const_char*_name,)", "contents": "getChildByName(${1:const_char*_name})" }
,
		{ "trigger": "ListView_jumpToTopLeft()", "contents": "jumpToTopLeft()" }
,
		{ "trigger": "ListView_setBackGroundImageColor(const_ccColor3B&_color,)", "contents": "setBackGroundImageColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "ListView_jumpToPercentHorizontal(float_percent,)", "contents": "jumpToPercentHorizontal(${1:float_percent})" }
,
		{ "trigger": "ListView_jumpToBottomRight()", "contents": "jumpToBottomRight()" }
,
		{ "trigger": "ListView_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "ListView_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "ListView_getCustomSize()", "contents": "getCustomSize()" }
,
		{ "trigger": "ListView_jumpToBottom()", "contents": "jumpToBottom()" }
,
		{ "trigger": "ListView_setBackGroundColorType(LayoutBackGroundColorType_type,)", "contents": "setBackGroundColorType(${1:LayoutBackGroundColorType_type})" }
,
		{ "trigger": "ListView_setLayoutType(LayoutType_type,)", "contents": "setLayoutType(${1:LayoutType_type})" }
,
		{ "trigger": "ListView_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "ListView_getRightInParent()", "contents": "getRightInParent()" }
,
		{ "trigger": "ListView_getDescription()", "contents": "getDescription()" }
,
		{ "trigger": "ListView_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "ListView_setItemsMargin(float_margin,)", "contents": "setItemsMargin(${1:float_margin})" }
,
		{ "trigger": "ListView_getNodeByTag(int_tag,)", "contents": "getNodeByTag(${1:int_tag})" }
,
		{ "trigger": "ListView_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "ListView_getBackGroundColorVector()", "contents": "getBackGroundColorVector()" }
,
		{ "trigger": "ListView_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "ListView_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "ListView_setName(const_char*_name,)", "contents": "setName(${1:const_char*_name})" }
,
		{ "trigger": "ListView_setBackGroundImage(const_char*_fileName,TextureResType_texType_=_UI_TEX_TYPE_LOCAL,)", "contents": "setBackGroundImage(${1:const_char*_fileName},${2:TextureResType_texType_=_UI_TEX_TYPE_LOCAL})" }
,
		{ "trigger": "ListView_setBackGroundColor(const_ccColor3B_&color,)", "contents": "setBackGroundColor(${1:const_ccColor3B_&color})" }
,
		{ "trigger": "ListView_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "ListView_updateSizeAndPosition(const_CCSize&_parentSize,)", "contents": "updateSizeAndPosition(${1:const_CCSize&_parentSize})" }
,
		{ "trigger": "ListView_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "ListView_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "ListView_getWidgetType()", "contents": "getWidgetType()" }
,
		{ "trigger": "ListView_setSizePercent(const_CCPoint_&percent,)", "contents": "setSizePercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "ListView_insertDefaultItem(int_index,)", "contents": "insertDefaultItem(${1:int_index})" }
,
		{ "trigger": "ListView_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "ListView_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "ListView_addNode(CCNode*_node,)", "contents": "addNode(${1:CCNode*_node})" }
,
		{ "trigger": "ListView_setGravity(ListViewGravity_gravity,)", "contents": "setGravity(${1:ListViewGravity_gravity})" }
,
		{ "trigger": "ListView_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "ListView_getTouchMovePos()", "contents": "getTouchMovePos()" }
,
		{ "trigger": "ListView_jumpToBottomLeft()", "contents": "jumpToBottomLeft()" }
,
		{ "trigger": "ListView_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "ListView_setBackGroundImageOpacity(GLubyte_opacity,)", "contents": "setBackGroundImageOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "ListView_setDirection(SCROLLVIEW_DIR_dir,)", "contents": "setDirection(${1:SCROLLVIEW_DIR_dir})" }
,
		{ "trigger": "ListView_setBright(bool_bright,)", "contents": "setBright(${1:bool_bright})" }
,
		{ "trigger": "ListView_active()", "contents": "active()" }
,
		{ "trigger": "ListView_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "ListView_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "ListView_removeChild(CCNode*_child,)", "contents": "removeChild(${1:CCNode*_child})" }
,
		{ "trigger": "ListView_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "ListView_scrollToBottomLeft(float_time,bool_attenuated,)", "contents": "scrollToBottomLeft(${1:float_time},${2:bool_attenuated})" }
,
		{ "trigger": "ListView_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "ListView_getClippingType()", "contents": "getClippingType()" }
,
		{ "trigger": "ListView_getIndex(Widget*_item,)", "contents": "getIndex(${1:Widget*_item})" }
,
		{ "trigger": "ListView_removeAllChildren()", "contents": "removeAllChildren()" }
,
		{ "trigger": "ListView_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "ListView_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "ListView_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "ListView_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "ListView_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "ListView_setInertiaScrollEnabled(bool_enabled,)", "contents": "setInertiaScrollEnabled(${1:bool_enabled})" }
,
		{ "trigger": "ListView_getBackGroundColor()", "contents": "getBackGroundColor()" }
,
		{ "trigger": "ListView_executeScriptEvent(int_eventName,)", "contents": "executeScriptEvent(${1:int_eventName})" }
,
		{ "trigger": "ListView_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "ListView_setSizeType(SizeType_type,)", "contents": "setSizeType(${1:SizeType_type})" }
,
		{ "trigger": "ListView_removeItem(int_index,)", "contents": "removeItem(${1:int_index})" }
,
		{ "trigger": "ListView_clone()", "contents": "clone()" }
,
		{ "trigger": "ListView_jumpToRight()", "contents": "jumpToRight()" }
,
		{ "trigger": "ListView_setTouchEnabled(bool_enabled,)", "contents": "setTouchEnabled(${1:bool_enabled})" }
,
		{ "trigger": "ListView_getTag()", "contents": "getTag()" }
,
		{ "trigger": "ListView_removeAllItems()", "contents": "removeAllItems()" }
,
		{ "trigger": "ListView_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "ListView_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "ListView_setPositionType(PositionType_type,)", "contents": "setPositionType(${1:PositionType_type})" }
,
		{ "trigger": "ListView_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "ListView_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "ListView_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "ListView_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "ListView_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "ListView_requestRefreshView()", "contents": "requestRefreshView()" }
,
		{ "trigger": "ListView_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "ListView_scrollToTopLeft(float_time,bool_attenuated,)", "contents": "scrollToTopLeft(${1:float_time},${2:bool_attenuated})" }
,
		{ "trigger": "ListView_setLayoutParameter(LayoutParameter*_parameter,)", "contents": "setLayoutParameter(${1:LayoutParameter*_parameter})" }
,
		{ "trigger": "ListView_setPosition(const_CCPoint_&pos,)", "contents": "setPosition(${1:const_CCPoint_&pos})" }
,
		{ "trigger": "ListView_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "ListView_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "ListView_getBackGroundStartColor()", "contents": "getBackGroundStartColor()" }
,
		{ "trigger": "ListView_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "ListView_getBackGroundColorType()", "contents": "getBackGroundColorType()" }
,
		{ "trigger": "ListView_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "ListView_isFlipY()", "contents": "isFlipY()" }
,
		{ "trigger": "ListView_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "ListView_isFlipX()", "contents": "isFlipX()" }
,
		{ "trigger": "ListView_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "ListView_removeNodeByTag(int_tag,)", "contents": "removeNodeByTag(${1:int_tag})" }
,
		{ "trigger": "ListView_setPositionPercent(const_CCPoint_&percent,)", "contents": "setPositionPercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "ListView_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "ListView_getSize()", "contents": "getSize()" }
,
		{ "trigger": "ListView_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "ListView_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "ListView_setItemModel(Widget*_model,)", "contents": "setItemModel(${1:Widget*_model})" }
,
		{ "trigger": "ListView_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "ListView_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "ListView_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "ListView_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "ListView_getLeftInParent()", "contents": "getLeftInParent()" }
,
		{ "trigger": "ListView_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "ListView_onTouchBegan(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchBegan(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "ListView_getTouchStartPos()", "contents": "getTouchStartPos()" }
,
		{ "trigger": "ListView_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "ListView_hitTest(const_CCPoint_&pt,)", "contents": "hitTest(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "ListView_getLayoutType()", "contents": "getLayoutType()" }
,
		{ "trigger": "ListView_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "ListView_removeChild(CCNode*_widget,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_widget},${2:bool_cleanup})" }
,
		{ "trigger": "ListView_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "ListView_sortAllChildren()", "contents": "sortAllChildren()" }
,
		{ "trigger": "ListView_getSizePercent()", "contents": "getSizePercent()" }
,
		{ "trigger": "ListView_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "ListView_updateSizeAndPosition()", "contents": "updateSizeAndPosition()" }
,
		{ "trigger": "ListView_getItems()", "contents": "getItems()" }
,
		{ "trigger": "ListView_getParent()", "contents": "getParent()" }
,
		{ "trigger": "ListView_getName()", "contents": "getName()" }
,
		{ "trigger": "ListView_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "ListView_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "ListView_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "ListView_retain()", "contents": "retain()" }
,
		{ "trigger": "ListView_isFocused()", "contents": "isFocused()" }
,
		{ "trigger": "ListView_jumpToLeft()", "contents": "jumpToLeft()" }
,
		{ "trigger": "ListView_setSoundEff(std::string_eff,)", "contents": "setSoundEff(${1:std::string_eff})" }
,
		{ "trigger": "ListView_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "ListView_setBackGroundColorVector(const_CCPoint_&vector,)", "contents": "setBackGroundColorVector(${1:const_CCPoint_&vector})" }
,
		{ "trigger": "ListView_visit()", "contents": "visit()" }
,
		{ "trigger": "ListView_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "ListView_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "ListView_isClippingEnabled()", "contents": "isClippingEnabled()" }
,
		{ "trigger": "ListView_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "ListView_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "ListView_addNode(CCNode*_node,int_zOrder,int_tag,)", "contents": "addNode(${1:CCNode*_node},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "ListView_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "ListView_pushBackCustomItem(Widget*_item,)", "contents": "pushBackCustomItem(${1:Widget*_item})" }
,
		{ "trigger": "ListView_getActionTag()", "contents": "getActionTag()" }
,
		{ "trigger": "ListView_getBackGroundImageTextureSize()", "contents": "getBackGroundImageTextureSize()" }
,
		{ "trigger": "ListView_setActionTag(int_tag,)", "contents": "setActionTag(${1:int_tag})" }
,
		{ "trigger": "ListView_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "ListView_setFlipX(bool_flipX,)", "contents": "setFlipX(${1:bool_flipX})" }
,
		{ "trigger": "ListView_scrollToPercentHorizontal(float_percent,float_time,bool_attenuated,)", "contents": "scrollToPercentHorizontal(${1:float_percent},${2:float_time},${3:bool_attenuated})" }
,
		{ "trigger": "ListView_removeNode(CCNode*_node,)", "contents": "removeNode(${1:CCNode*_node})" }
,
		{ "trigger": "ListView_removeFromParent()", "contents": "removeFromParent()" }
,
		{ "trigger": "ListView_scrollToLeft(float_time,bool_attenuated,)", "contents": "scrollToLeft(${1:float_time},${2:bool_attenuated})" }
,
		{ "trigger": "ListView_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "ListView_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "ListView_getDirection()", "contents": "getDirection()" }
,
		{ "trigger": "ListView_isIgnoreContentAdaptWithSize()", "contents": "isIgnoreContentAdaptWithSize()" }
,
		{ "trigger": "ListView_getBackGroundColorOpacity()", "contents": "getBackGroundColorOpacity()" }
,
		{ "trigger": "ListView_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "ListView_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "ListView_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "ListView_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "ListView_isClippingChange(bool_change,)", "contents": "isClippingChange(${1:bool_change})" }
,
		{ "trigger": "ListView_getCurSelectedIndex()", "contents": "getCurSelectedIndex()" }
,
		{ "trigger": "ListView_setClippingType(LayoutClippingType_type,)", "contents": "setClippingType(${1:LayoutClippingType_type})" }
,
		{ "trigger": "ListView_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "ListView_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "ListView_scrollToTopRight(float_time,bool_attenuated,)", "contents": "scrollToTopRight(${1:float_time},${2:bool_attenuated})" }
,
		{ "trigger": "ListView_jumpToPercentBothDirection(const_CCPoint&_percent,)", "contents": "jumpToPercentBothDirection(${1:const_CCPoint&_percent})" }
,
		{ "trigger": "ListView_setBackGroundImageScale9Enabled(bool_enabled,)", "contents": "setBackGroundImageScale9Enabled(${1:bool_enabled})" }
,
		{ "trigger": "ListView_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "ListView_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "ListView_getScale()", "contents": "getScale()" }
,
		{ "trigger": "ListView_setBounceEnabled(bool_enabled,)", "contents": "setBounceEnabled(${1:bool_enabled})" }
,
		{ "trigger": "ListView_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "ListView_checkChildInfo(int_handleState,Widget*_sender,const_CCPoint_&touchPoint,)", "contents": "checkChildInfo(${1:int_handleState},${2:Widget*_sender},${3:const_CCPoint_&touchPoint})" }
,
		{ "trigger": "ListView_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "ListView_removeLastItem()", "contents": "removeLastItem()" }
,
		{ "trigger": "ListView_onExit()", "contents": "onExit()" }
,
		{ "trigger": "ListView_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "ListView_getBackGroundImageOpacity()", "contents": "getBackGroundImageOpacity()" }
,
		{ "trigger": "ListView_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "ListView_getBackGroundImageColor()", "contents": "getBackGroundImageColor()" }
,
		{ "trigger": "ListView_setClippingEnabled(bool_enabled,)", "contents": "setClippingEnabled(${1:bool_enabled})" }
,
		{ "trigger": "ListView_getWorldPosition()", "contents": "getWorldPosition()" }
,
		{ "trigger": "ListView_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "ListView_copy()", "contents": "copy()" }
,
		{ "trigger": "ListView_getInnerContainer()", "contents": "getInnerContainer()" }
,
		{ "trigger": "ListView_removeBackGroundImage()", "contents": "removeBackGroundImage()" }
,
		{ "trigger": "ListView_clippingParentAreaContainPoint(const_CCPoint_&pt,)", "contents": "clippingParentAreaContainPoint(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "ListView_onTouchCancelled(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchCancelled(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "ListView_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "ListView_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "ListView_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "ListView_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "ListView_description()", "contents": "description()" }
,
		{ "trigger": "ListView_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "ListView_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "ListView_setBackGroundColor(const_ccColor3B_&startColor,const_ccColor3B_&endColor,)", "contents": "setBackGroundColor(${1:const_ccColor3B_&startColor},${2:const_ccColor3B_&endColor})" }
,
		{ "trigger": "ListView_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "ListView_getSizeType()", "contents": "getSizeType()" }
,
		{ "trigger": "ListView_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "ListView_onEnter()", "contents": "onEnter()" }
,
		{ "trigger": "ListView_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "ListView_addChild(CCNode*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "ListView_create()", "contents": "ListView:create()" }
,

		{ "trigger": "CCShuffleTiles_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCShuffleTiles_originalTile(CCPoint_pos,)", "contents": "originalTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCShuffleTiles_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCShuffleTiles_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCShuffleTiles_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCShuffleTiles_release()", "contents": "release()" }
,
		{ "trigger": "CCShuffleTiles_setTile(CCPoint_pos,ccQuad3_coords,)", "contents": "setTile(${1:CCPoint_pos},${2:ccQuad3_coords})" }
,
		{ "trigger": "CCShuffleTiles_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCShuffleTiles_retain()", "contents": "retain()" }
,
		{ "trigger": "CCShuffleTiles_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCShuffleTiles_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCShuffleTiles_tile(CCPoint_pos,)", "contents": "tile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCShuffleTiles_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCShuffleTiles_placeTile(CCPoint_pos,Tile_*t,)", "contents": "placeTile(${1:CCPoint_pos},${2:Tile_*t})" }
,
		{ "trigger": "CCShuffleTiles_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCShuffleTiles_getDelta(CCSize_pos,)", "contents": "getDelta(${1:CCSize_pos})" }
,
		{ "trigger": "CCShuffleTiles_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCShuffleTiles_copy()", "contents": "copy()" }
,
		{ "trigger": "CCShuffleTiles_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCShuffleTiles_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCShuffleTiles_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCShuffleTiles_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCShuffleTiles_shuffle(unsigned_int_*pArray,int_nLen,)", "contents": "shuffle(${1:unsigned_int_*pArray},${2:int_nLen})" }
,
		{ "trigger": "CCShuffleTiles_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCShuffleTiles_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCShuffleTiles_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCShuffleTiles_create(float_duration,CCSize_gridSize,unsigned_int_seed,)", "contents": "CCShuffleTiles:create(${1:float_duration},${2:CCSize_gridSize},${3:unsigned_int_seed})" }
,

		{ "trigger": "ActionTimeline_gotoFrameAndPlay(int_startIndex,bool_loop,)", "contents": "gotoFrameAndPlay(${1:int_startIndex},${2:bool_loop})" }
,
		{ "trigger": "ActionTimeline_getEndFrame()", "contents": "getEndFrame()" }
,
		{ "trigger": "ActionTimeline_getTag()", "contents": "getTag()" }
,
		{ "trigger": "ActionTimeline_setTimeSpeed(float_speed,)", "contents": "setTimeSpeed(${1:float_speed})" }
,
		{ "trigger": "ActionTimeline_removeTimeline(Timeline*_timeline,)", "contents": "removeTimeline(${1:Timeline*_timeline})" }
,
		{ "trigger": "ActionTimeline_isDone()", "contents": "isDone()" }
,
		{ "trigger": "ActionTimeline_reverse()", "contents": "reverse()" }
,
		{ "trigger": "ActionTimeline_isDone()", "contents": "isDone()" }
,
		{ "trigger": "ActionTimeline_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "ActionTimeline_release()", "contents": "release()" }
,
		{ "trigger": "ActionTimeline_init()", "contents": "init()" }
,
		{ "trigger": "ActionTimeline_retain()", "contents": "retain()" }
,
		{ "trigger": "ActionTimeline_getCurrentFrame()", "contents": "getCurrentFrame()" }
,
		{ "trigger": "ActionTimeline_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "ActionTimeline_gotoFrameAndPlay(int_startIndex,)", "contents": "gotoFrameAndPlay(${1:int_startIndex})" }
,
		{ "trigger": "ActionTimeline_setDuration(int_duration,)", "contents": "setDuration(${1:int_duration})" }
,
		{ "trigger": "ActionTimeline_resume()", "contents": "resume()" }
,
		{ "trigger": "ActionTimeline_getTimeSpeed()", "contents": "getTimeSpeed()" }
,
		{ "trigger": "ActionTimeline_isPlaying()", "contents": "isPlaying()" }
,
		{ "trigger": "ActionTimeline_pause()", "contents": "pause()" }
,
		{ "trigger": "ActionTimeline_startWithTarget(cocos2d::CCNode_*target,)", "contents": "startWithTarget(${1:cocos2d::CCNode_*target})" }
,
		{ "trigger": "ActionTimeline_gotoFrameAndPlay(int_startIndex,int_endIndex,bool_loop,)", "contents": "gotoFrameAndPlay(${1:int_startIndex},${2:int_endIndex},${3:bool_loop})" }
,
		{ "trigger": "ActionTimeline_gotoFrameAndPause(int_startIndex,)", "contents": "gotoFrameAndPause(${1:int_startIndex})" }
,
		{ "trigger": "ActionTimeline_copy()", "contents": "copy()" }
,
		{ "trigger": "ActionTimeline_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "ActionTimeline_step(float_delta,)", "contents": "step(${1:float_delta})" }
,
		{ "trigger": "ActionTimeline_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "ActionTimeline_clone()", "contents": "clone()" }
,
		{ "trigger": "ActionTimeline_addTimeline(Timeline*_timeline,)", "contents": "addTimeline(${1:Timeline*_timeline})" }
,
		{ "trigger": "ActionTimeline_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "ActionTimeline_getStartFrame()", "contents": "getStartFrame()" }
,
		{ "trigger": "ActionTimeline_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "ActionTimeline_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "ActionTimeline_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "ActionTimeline_create()", "contents": "ActionTimeline:create()" }
,

		{ "trigger": "CCControlStepper_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCControlStepper_ccTouchBegan(CCTouch_*pTouch,CCEvent_*pEvent,)", "contents": "ccTouchBegan(${1:CCTouch_*pTouch},${2:CCEvent_*pEvent})" }
,
		{ "trigger": "CCControlStepper_update(float_dt,)", "contents": "update(${1:float_dt})" }
,
		{ "trigger": "CCControlStepper_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCControlStepper_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCControlStepper_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCControlStepper_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCControlStepper_setOpacityModifyRGB(bool_bOpacityModifyRGB,)", "contents": "setOpacityModifyRGB(${1:bool_bOpacityModifyRGB})" }
,
		{ "trigger": "CCControlStepper_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCControlStepper_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCControlStepper_stopAutorepeat()", "contents": "stopAutorepeat()" }
,
		{ "trigger": "CCControlStepper_draw()", "contents": "draw()" }
,
		{ "trigger": "CCControlStepper_getPlusSprite()", "contents": "getPlusSprite()" }
,
		{ "trigger": "CCControlStepper_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCControlStepper_removeHandleOfControlEvent(CCControlEvent_controlEvents,)", "contents": "removeHandleOfControlEvent(${1:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlStepper_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCControlStepper_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCControlStepper_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCControlStepper_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCControlStepper_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCControlStepper_setValue(double_value,)", "contents": "setValue(${1:double_value})" }
,
		{ "trigger": "CCControlStepper_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCControlStepper_setMinimumValue(double_minimumValue,)", "contents": "setMinimumValue(${1:double_minimumValue})" }
,
		{ "trigger": "CCControlStepper_visit()", "contents": "visit()" }
,
		{ "trigger": "CCControlStepper_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCControlStepper_isHighlighted()", "contents": "isHighlighted()" }
,
		{ "trigger": "CCControlStepper_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCControlStepper_registerScriptAccelerateHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptAccelerateHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCControlStepper_registerWithTouchDispatcher()", "contents": "registerWithTouchDispatcher()" }
,
		{ "trigger": "CCControlStepper_getTouchMode()", "contents": "getTouchMode()" }
,
		{ "trigger": "CCControlStepper_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCControlStepper_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCControlStepper_setAccelerometerEnabled(bool_bValue,)", "contents": "setAccelerometerEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCControlStepper_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCControlStepper_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCControlStepper_unregisterScriptTouchHandler()", "contents": "unregisterScriptTouchHandler()" }
,
		{ "trigger": "CCControlStepper_setTouchPriority(int_priority,)", "contents": "setTouchPriority(${1:int_priority})" }
,
		{ "trigger": "CCControlStepper_ccTouchEnded(CCTouch_*pTouch,CCEvent_*pEvent,)", "contents": "ccTouchEnded(${1:CCTouch_*pTouch},${2:CCEvent_*pEvent})" }
,
		{ "trigger": "CCControlStepper_setPlusSprite(CCSprite*_var,)", "contents": "setPlusSprite(${1:CCSprite*_var})" }
,
		{ "trigger": "CCControlStepper_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCControlStepper_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCControlStepper_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCControlStepper_sendActionsForControlEvents(CCControlEvent_controlEvents,)", "contents": "sendActionsForControlEvents(${1:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlStepper_getPlusLabel()", "contents": "getPlusLabel()" }
,
		{ "trigger": "CCControlStepper_removeTargetWithActionForControlEvents(CCObject*_target,SEL_CCControlHandler_action,CCControlEvent_controlEvents,)", "contents": "removeTargetWithActionForControlEvents(${1:CCObject*_target},${2:SEL_CCControlHandler_action},${3:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlStepper_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCControlStepper_initWithMinusSpriteAndPlusSprite(CCSprite_*minusSprite,CCSprite_*plusSprite,)", "contents": "initWithMinusSpriteAndPlusSprite(${1:CCSprite_*minusSprite},${2:CCSprite_*plusSprite})" }
,
		{ "trigger": "CCControlStepper_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCControlStepper_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCControlStepper_ccTouchMoved(CCTouch_*pTouch,CCEvent_*pEvent,)", "contents": "ccTouchMoved(${1:CCTouch_*pTouch},${2:CCEvent_*pEvent})" }
,
		{ "trigger": "CCControlStepper_setPlusLabel(CCLabelTTF*_var,)", "contents": "setPlusLabel(${1:CCLabelTTF*_var})" }
,
		{ "trigger": "CCControlStepper_registerScriptKeypadHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptKeypadHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCControlStepper_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCControlStepper_getMinusLabel()", "contents": "getMinusLabel()" }
,
		{ "trigger": "CCControlStepper_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCControlStepper_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCControlStepper_init()", "contents": "init()" }
,
		{ "trigger": "CCControlStepper_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCControlStepper_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCControlStepper_setMinusLabel(CCLabelTTF*_var,)", "contents": "setMinusLabel(${1:CCLabelTTF*_var})" }
,
		{ "trigger": "CCControlStepper_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCControlStepper_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCControlStepper_isContinuous()", "contents": "isContinuous()" }
,
		{ "trigger": "CCControlStepper_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCControlStepper_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCControlStepper_setKeypadEnabled(bool_bValue,)", "contents": "setKeypadEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCControlStepper_isSelected()", "contents": "isSelected()" }
,
		{ "trigger": "CCControlStepper_setMinusSprite(CCSprite*_var,)", "contents": "setMinusSprite(${1:CCSprite*_var})" }
,
		{ "trigger": "CCControlStepper_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCControlStepper_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCControlStepper_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCControlStepper_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCControlStepper_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCControlStepper_addTargetWithActionForControlEvents(CCObject*_target,SEL_CCControlHandler_action,CCControlEvent_controlEvents,)", "contents": "addTargetWithActionForControlEvents(${1:CCObject*_target},${2:SEL_CCControlHandler_action},${3:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlStepper_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCControlStepper_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCControlStepper_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCControlStepper_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCControlStepper_setSelected(bool_bSelected,)", "contents": "setSelected(${1:bool_bSelected})" }
,
		{ "trigger": "CCControlStepper_setTouchEnabled(bool_bValue,)", "contents": "setTouchEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCControlStepper_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCControlStepper_init()", "contents": "init()" }
,
		{ "trigger": "CCControlStepper_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCControlStepper_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCControlStepper_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCControlStepper_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCControlStepper_onExit()", "contents": "onExit()" }
,
		{ "trigger": "CCControlStepper_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCControlStepper_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCControlStepper_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "CCControlStepper_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCControlStepper_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCControlStepper_updateLayoutUsingTouchLocation(CCPoint_location,)", "contents": "updateLayoutUsingTouchLocation(${1:CCPoint_location})" }
,
		{ "trigger": "CCControlStepper_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCControlStepper_setEnabled(bool_bEnabled,)", "contents": "setEnabled(${1:bool_bEnabled})" }
,
		{ "trigger": "CCControlStepper_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCControlStepper_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCControlStepper_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCControlStepper_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCControlStepper_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCControlStepper_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCControlStepper_retain()", "contents": "retain()" }
,
		{ "trigger": "CCControlStepper_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCControlStepper_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCControlStepper_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCControlStepper_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCControlStepper_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCControlStepper_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCControlStepper_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCControlStepper_unregisterScriptKeypadHandler()", "contents": "unregisterScriptKeypadHandler()" }
,
		{ "trigger": "CCControlStepper_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCControlStepper_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCControlStepper_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCControlStepper_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCControlStepper_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCControlStepper_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCControlStepper_getTouchLocation(CCTouch*_touch,)", "contents": "getTouchLocation(${1:CCTouch*_touch})" }
,
		{ "trigger": "CCControlStepper_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCControlStepper_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCControlStepper_copy()", "contents": "copy()" }
,
		{ "trigger": "CCControlStepper_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCControlStepper_isAccelerometerEnabled()", "contents": "isAccelerometerEnabled()" }
,
		{ "trigger": "CCControlStepper_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCControlStepper_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCControlStepper_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCControlStepper_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCControlStepper_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCControlStepper_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCControlStepper_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCControlStepper_isKeypadEnabled()", "contents": "isKeypadEnabled()" }
,
		{ "trigger": "CCControlStepper_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCControlStepper_hasVisibleParents()", "contents": "hasVisibleParents()" }
,
		{ "trigger": "CCControlStepper_getState()", "contents": "getState()" }
,
		{ "trigger": "CCControlStepper_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCControlStepper_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCControlStepper_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCControlStepper_setStepValue(double_stepValue,)", "contents": "setStepValue(${1:double_stepValue})" }
,
		{ "trigger": "CCControlStepper_transform()", "contents": "transform()" }
,
		{ "trigger": "CCControlStepper_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCControlStepper_registerScriptTouchHandler(LUA_FUNCTION_nHandler,bool_bIsMultiTouches_=_false,int_nPriority_=_0,bool_bSwallowsTouches_=_false,)", "contents": "registerScriptTouchHandler(${1:LUA_FUNCTION_nHandler},${2:bool_bIsMultiTouches_=_false},${3:int_nPriority_=_0},${4:bool_bSwallowsTouches_=_false})" }
,
		{ "trigger": "CCControlStepper_isTouchInside(CCTouch_*_touch,)", "contents": "isTouchInside(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCControlStepper_setMaximumValue(double_maximumValue,)", "contents": "setMaximumValue(${1:double_maximumValue})" }
,
		{ "trigger": "CCControlStepper_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCControlStepper_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCControlStepper_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCControlStepper_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCControlStepper_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCControlStepper_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCControlStepper_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCControlStepper_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCControlStepper_release()", "contents": "release()" }
,
		{ "trigger": "CCControlStepper_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCControlStepper_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCControlStepper_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCControlStepper_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCControlStepper_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCControlStepper_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCControlStepper_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCControlStepper_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCControlStepper_setHighlighted(bool_bHighlighted,)", "contents": "setHighlighted(${1:bool_bHighlighted})" }
,
		{ "trigger": "CCControlStepper_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCControlStepper_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCControlStepper_needsLayout()", "contents": "needsLayout()" }
,
		{ "trigger": "CCControlStepper_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCControlStepper_unregisterScriptAccelerateHandler()", "contents": "unregisterScriptAccelerateHandler()" }
,
		{ "trigger": "CCControlStepper_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCControlStepper_getValue()", "contents": "getValue()" }
,
		{ "trigger": "CCControlStepper_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCControlStepper_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCControlStepper_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCControlStepper_startAutorepeat()", "contents": "startAutorepeat()" }
,
		{ "trigger": "CCControlStepper_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCControlStepper_setValueWithSendingEvent(double_value,bool_send,)", "contents": "setValueWithSendingEvent(${1:double_value},${2:bool_send})" }
,
		{ "trigger": "CCControlStepper_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCControlStepper_getTouchPriority()", "contents": "getTouchPriority()" }
,
		{ "trigger": "CCControlStepper_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCControlStepper_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCControlStepper_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCControlStepper_addHandleOfControlEvent(LUA_FUNCTION_nFunID,CCControlEvent_controlEvents,)", "contents": "addHandleOfControlEvent(${1:LUA_FUNCTION_nFunID},${2:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlStepper_setWraps(bool_wraps,)", "contents": "setWraps(${1:bool_wraps})" }
,
		{ "trigger": "CCControlStepper_description()", "contents": "description()" }
,
		{ "trigger": "CCControlStepper_setTouchMode(ccTouchesMode_mode,)", "contents": "setTouchMode(${1:ccTouchesMode_mode})" }
,
		{ "trigger": "CCControlStepper_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCControlStepper_getMinusSprite()", "contents": "getMinusSprite()" }
,
		{ "trigger": "CCControlStepper_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCControlStepper_onEnter()", "contents": "onEnter()" }
,
		{ "trigger": "CCControlStepper_create(CCSprite_*minusSprite,CCSprite_*plusSprite,)", "contents": "CCControlStepper:create(${1:CCSprite_*minusSprite},${2:CCSprite_*plusSprite})" }
,

		{ "trigger": "CCInteger_copy()", "contents": "copy()" }
,
		{ "trigger": "CCInteger_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCInteger_getValue()", "contents": "getValue()" }
,
		{ "trigger": "CCInteger_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCInteger_release()", "contents": "release()" }
,
		{ "trigger": "CCInteger_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCInteger_retain()", "contents": "retain()" }
,
		{ "trigger": "CCInteger_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCInteger_create(int_v,)", "contents": "CCInteger:create(${1:int_v})" }
,


		{ "trigger": "ActionManager_copy()", "contents": "copy()" }
,
		{ "trigger": "ActionManager_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "ActionManager_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "ActionManager_playActionByName(const_char*_jsonName,const_char*_actionName,)", "contents": "playActionByName(${1:const_char*_jsonName},${2:const_char*_actionName})" }
,
		{ "trigger": "ActionManager_releaseActions()", "contents": "releaseActions()" }
,
		{ "trigger": "ActionManager_release()", "contents": "release()" }
,
		{ "trigger": "ActionManager_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "ActionManager_getActionByName(const_char*_jsonName,const_char*_actionName,)", "contents": "getActionByName(${1:const_char*_jsonName},${2:const_char*_actionName})" }
,
		{ "trigger": "ActionManager_retain()", "contents": "retain()" }
,
		{ "trigger": "ActionManager_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "ActionManager_purge()", "contents": "ActionManager:purge()" }
,
		{ "trigger": "ActionManager_shareManager()", "contents": "ActionManager:shareManager()" }
,

		{ "trigger": "CCComponent_serialize(void*_r,)", "contents": "serialize(${1:void*_r})" }
,
		{ "trigger": "CCComponent_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCComponent_setOwner(CCNode_*pOwner,)", "contents": "setOwner(${1:CCNode_*pOwner})" }
,
		{ "trigger": "CCComponent_setName(const_char_*pName,)", "contents": "setName(${1:const_char_*pName})" }
,
		{ "trigger": "CCComponent_setEnabled(bool_b,)", "contents": "setEnabled(${1:bool_b})" }
,
		{ "trigger": "CCComponent_copy()", "contents": "copy()" }
,
		{ "trigger": "CCComponent_getName()", "contents": "getName()" }
,
		{ "trigger": "CCComponent_release()", "contents": "release()" }
,
		{ "trigger": "CCComponent_getOwner()", "contents": "getOwner()" }
,
		{ "trigger": "CCComponent_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCComponent_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCComponent_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCComponent_retain()", "contents": "retain()" }
,
		{ "trigger": "CCComponent_init()", "contents": "init()" }
,
		{ "trigger": "CCComponent_update(float_delta,)", "contents": "update(${1:float_delta})" }
,
		{ "trigger": "CCComponent_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCComponent_create()", "contents": "CCComponent:create()" }
,

		{ "trigger": "CCActionInstant_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCActionInstant_copy()", "contents": "copy()" }
,
		{ "trigger": "CCActionInstant_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCActionInstant_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCActionInstant_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCActionInstant_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCActionInstant_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCActionInstant_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCActionInstant_retain()", "contents": "retain()" }
,
		{ "trigger": "CCActionInstant_release()", "contents": "release()" }
,
		{ "trigger": "CCActionInstant_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCActionInstant_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCActionInstant_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCActionInstant_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCActionInstant_isSingleReference()", "contents": "isSingleReference()" }
,

		{ "trigger": "CCComAttribute_serialize(void*_r,)", "contents": "serialize(${1:void*_r})" }
,
		{ "trigger": "CCComAttribute_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCComAttribute_getOwner()", "contents": "getOwner()" }
,
		{ "trigger": "CCComAttribute_release()", "contents": "release()" }
,
		{ "trigger": "CCComAttribute_init()", "contents": "init()" }
,
		{ "trigger": "CCComAttribute_retain()", "contents": "retain()" }
,
		{ "trigger": "CCComAttribute_getCString(const_char_*key,)", "contents": "getCString(${1:const_char_*key})" }
,
		{ "trigger": "CCComAttribute_getInt(const_char_*key,)", "contents": "getInt(${1:const_char_*key})" }
,
		{ "trigger": "CCComAttribute_setCString(const_char_*key,const_char_*value,)", "contents": "setCString(${1:const_char_*key},${2:const_char_*value})" }
,
		{ "trigger": "CCComAttribute_setOwner(CCNode_*pOwner,)", "contents": "setOwner(${1:CCNode_*pOwner})" }
,
		{ "trigger": "CCComAttribute_update(float_delta,)", "contents": "update(${1:float_delta})" }
,
		{ "trigger": "CCComAttribute_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCComAttribute_setEnabled(bool_b,)", "contents": "setEnabled(${1:bool_b})" }
,
		{ "trigger": "CCComAttribute_setBool(const_char_*key,bool_value,)", "contents": "setBool(${1:const_char_*key},${2:bool_value})" }
,
		{ "trigger": "CCComAttribute_setInt(const_char_*key,int_value,)", "contents": "setInt(${1:const_char_*key},${2:int_value})" }
,
		{ "trigger": "CCComAttribute_copy()", "contents": "copy()" }
,
		{ "trigger": "CCComAttribute_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCComAttribute_setName(const_char_*pName,)", "contents": "setName(${1:const_char_*pName})" }
,
		{ "trigger": "CCComAttribute_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCComAttribute_getFloat(const_char_*key,)", "contents": "getFloat(${1:const_char_*key})" }
,
		{ "trigger": "CCComAttribute_getBool(const_char_*key,)", "contents": "getBool(${1:const_char_*key})" }
,
		{ "trigger": "CCComAttribute_getName()", "contents": "getName()" }
,
		{ "trigger": "CCComAttribute_setFloat(const_char_*key,float_value,)", "contents": "setFloat(${1:const_char_*key},${2:float_value})" }
,
		{ "trigger": "CCComAttribute_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCComAttribute_create()", "contents": "CCComAttribute:create()" }
,

		{ "trigger": "CCEaseSineIn_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseSineIn_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseSineIn_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseSineIn_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseSineIn_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseSineIn_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseSineIn_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseSineIn_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseSineIn_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseSineIn_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseSineIn_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseSineIn_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseSineIn_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseSineIn_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseSineIn_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseSineIn_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseSineIn_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseSineIn_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseSineIn_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseSineIn_create(CCActionInterval*_pAction,)", "contents": "CCEaseSineIn:create(${1:CCActionInterval*_pAction})" }
,

		{ "trigger": "LinearLayoutParameter_copy()", "contents": "copy()" }
,
		{ "trigger": "LinearLayoutParameter_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "LinearLayoutParameter_getLayoutType()", "contents": "getLayoutType()" }
,
		{ "trigger": "LinearLayoutParameter_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "LinearLayoutParameter_getGravity()", "contents": "getGravity()" }
,
		{ "trigger": "LinearLayoutParameter_setGravity(LinearGravity_gravity,)", "contents": "setGravity(${1:LinearGravity_gravity})" }
,
		{ "trigger": "LinearLayoutParameter_release()", "contents": "release()" }
,
		{ "trigger": "LinearLayoutParameter_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "LinearLayoutParameter_retain()", "contents": "retain()" }
,
		{ "trigger": "LinearLayoutParameter_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "LinearLayoutParameter_create()", "contents": "LinearLayoutParameter:create()" }
,

		{ "trigger": "CCTransitionFadeBL_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTransitionFadeBL_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTransitionFadeBL_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTransitionFadeBL_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTransitionFadeBL_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTransitionFadeBL_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTransitionFadeBL_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTransitionFadeBL_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTransitionFadeBL_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCTransitionFadeBL_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCTransitionFadeBL_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionFadeBL_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTransitionFadeBL_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTransitionFadeBL_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionFadeBL_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionFadeBL_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTransitionFadeBL_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFadeBL_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTransitionFadeBL_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCTransitionFadeBL_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFadeBL_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTransitionFadeBL_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionFadeBL_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTransitionFadeBL_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionFadeBL_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTransitionFadeBL_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTransitionFadeBL_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCTransitionFadeBL_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTransitionFadeBL_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTransitionFadeBL_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTransitionFadeBL_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTransitionFadeBL_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTransitionFadeBL_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTransitionFadeBL_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionFadeBL_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTransitionFadeBL_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTransitionFadeBL_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionFadeBL_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTransitionFadeBL_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTransitionFadeBL_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTransitionFadeBL_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTransitionFadeBL_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionFadeBL_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFadeBL_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionFadeBL_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTransitionFadeBL_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTransitionFadeBL_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTransitionFadeBL_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTransitionFadeBL_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTransitionFadeBL_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTransitionFadeBL_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTransitionFadeBL_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionFadeBL_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTransitionFadeBL_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTransitionFadeBL_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTransitionFadeBL_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTransitionFadeBL_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTransitionFadeBL_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTransitionFadeBL_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTransitionFadeBL_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTransitionFadeBL_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTransitionFadeBL_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionFadeBL_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTransitionFadeBL_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTransitionFadeBL_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTransitionFadeBL_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTransitionFadeBL_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTransitionFadeBL_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTransitionFadeBL_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTransitionFadeBL_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTransitionFadeBL_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionFadeBL_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTransitionFadeBL_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTransitionFadeBL_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTransitionFadeBL_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTransitionFadeBL_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionFadeBL_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTransitionFadeBL_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTransitionFadeBL_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTransitionFadeBL_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTransitionFadeBL_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTransitionFadeBL_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionFadeBL_release()", "contents": "release()" }
,
		{ "trigger": "CCTransitionFadeBL_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionFadeBL_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFadeBL_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionFadeBL_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTransitionFadeBL_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTransitionFadeBL_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTransitionFadeBL_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCTransitionFadeBL_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTransitionFadeBL_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTransitionFadeBL_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTransitionFadeBL_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTransitionFadeBL_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionFadeBL_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTransitionFadeBL_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTransitionFadeBL_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTransitionFadeBL_description()", "contents": "description()" }
,
		{ "trigger": "CCTransitionFadeBL_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTransitionFadeBL_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTransitionFadeBL_create(float_t,CCScene*_scene,)", "contents": "CCTransitionFadeBL:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCAnimate_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCAnimate_copy()", "contents": "copy()" }
,
		{ "trigger": "CCAnimate_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCAnimate_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCAnimate_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCAnimate_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCAnimate_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCAnimate_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCAnimate_getAnimation()", "contents": "getAnimation()" }
,
		{ "trigger": "CCAnimate_setAnimation(CCAnimation_*pAnimation,)", "contents": "setAnimation(${1:CCAnimation_*pAnimation})" }
,
		{ "trigger": "CCAnimate_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCAnimate_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCAnimate_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCAnimate_retain()", "contents": "retain()" }
,
		{ "trigger": "CCAnimate_release()", "contents": "release()" }
,
		{ "trigger": "CCAnimate_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCAnimate_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCAnimate_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCAnimate_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCAnimate_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCAnimate_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCAnimate_create(CCAnimation_*pAnimation,)", "contents": "CCAnimate:create(${1:CCAnimation_*pAnimation})" }
,

		{ "trigger": "CCRect_intersectsRect(const_CCRect_&_rect,)", "contents": "intersectsRect(${1:const_CCRect_&_rect})" }
,
		{ "trigger": "CCRect_containsPoint(const_CCPoint_&_point,)", "contents": "containsPoint(${1:const_CCPoint_&_point})" }
,
		{ "trigger": "CCRect_getMinY()", "contents": "getMinY()" }
,
		{ "trigger": "CCRect_getMinX()", "contents": "getMinX()" }
,
		{ "trigger": "CCRect_equals(const_CCRect_&_rect,)", "contents": "equals(${1:const_CCRect_&_rect})" }
,
		{ "trigger": "CCRect_getMidX()", "contents": "getMidX()" }
,
		{ "trigger": "CCRect_getMaxX()", "contents": "getMaxX()" }
,
		{ "trigger": "CCRect_getMidY()", "contents": "getMidY()" }
,
		{ "trigger": "CCRect_getMaxY()", "contents": "getMaxY()" }
,

		{ "trigger": "LayoutParameter_copy()", "contents": "copy()" }
,
		{ "trigger": "LayoutParameter_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "LayoutParameter_getLayoutType()", "contents": "getLayoutType()" }
,
		{ "trigger": "LayoutParameter_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "LayoutParameter_release()", "contents": "release()" }
,
		{ "trigger": "LayoutParameter_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "LayoutParameter_retain()", "contents": "retain()" }
,
		{ "trigger": "LayoutParameter_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "LayoutParameter_create()", "contents": "LayoutParameter:create()" }
,


		{ "trigger": "CCControl_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCControl_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCControl_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCControl_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCControl_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCControl_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCControl_setOpacityModifyRGB(bool_bOpacityModifyRGB,)", "contents": "setOpacityModifyRGB(${1:bool_bOpacityModifyRGB})" }
,
		{ "trigger": "CCControl_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCControl_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCControl_init()", "contents": "init()" }
,
		{ "trigger": "CCControl_draw()", "contents": "draw()" }
,
		{ "trigger": "CCControl_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCControl_removeHandleOfControlEvent(CCControlEvent_controlEvents,)", "contents": "removeHandleOfControlEvent(${1:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControl_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCControl_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCControl_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCControl_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCControl_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCControl_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCControl_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCControl_visit()", "contents": "visit()" }
,
		{ "trigger": "CCControl_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCControl_isHighlighted()", "contents": "isHighlighted()" }
,
		{ "trigger": "CCControl_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCControl_registerScriptAccelerateHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptAccelerateHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCControl_registerWithTouchDispatcher()", "contents": "registerWithTouchDispatcher()" }
,
		{ "trigger": "CCControl_getTouchMode()", "contents": "getTouchMode()" }
,
		{ "trigger": "CCControl_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCControl_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCControl_setAccelerometerEnabled(bool_bValue,)", "contents": "setAccelerometerEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCControl_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCControl_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCControl_unregisterScriptTouchHandler()", "contents": "unregisterScriptTouchHandler()" }
,
		{ "trigger": "CCControl_setTouchPriority(int_priority,)", "contents": "setTouchPriority(${1:int_priority})" }
,
		{ "trigger": "CCControl_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCControl_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCControl_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCControl_sendActionsForControlEvents(CCControlEvent_controlEvents,)", "contents": "sendActionsForControlEvents(${1:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControl_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCControl_removeTargetWithActionForControlEvents(CCObject*_target,SEL_CCControlHandler_action,CCControlEvent_controlEvents,)", "contents": "removeTargetWithActionForControlEvents(${1:CCObject*_target},${2:SEL_CCControlHandler_action},${3:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControl_getState()", "contents": "getState()" }
,
		{ "trigger": "CCControl_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCControl_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCControl_registerScriptKeypadHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptKeypadHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCControl_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCControl_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCControl_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCControl_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCControl_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCControl_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCControl_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCControl_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCControl_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCControl_setKeypadEnabled(bool_bValue,)", "contents": "setKeypadEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCControl_isSelected()", "contents": "isSelected()" }
,
		{ "trigger": "CCControl_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCControl_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCControl_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCControl_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCControl_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCControl_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCControl_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCControl_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCControl_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCControl_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCControl_setSelected(bool_bSelected,)", "contents": "setSelected(${1:bool_bSelected})" }
,
		{ "trigger": "CCControl_setTouchEnabled(bool_bValue,)", "contents": "setTouchEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCControl_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCControl_init()", "contents": "init()" }
,
		{ "trigger": "CCControl_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCControl_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCControl_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCControl_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCControl_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCControl_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCControl_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCControl_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "CCControl_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCControl_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCControl_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCControl_setEnabled(bool_bEnabled,)", "contents": "setEnabled(${1:bool_bEnabled})" }
,
		{ "trigger": "CCControl_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCControl_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCControl_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCControl_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCControl_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCControl_retain()", "contents": "retain()" }
,
		{ "trigger": "CCControl_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCControl_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCControl_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCControl_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCControl_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCControl_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCControl_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCControl_unregisterScriptKeypadHandler()", "contents": "unregisterScriptKeypadHandler()" }
,
		{ "trigger": "CCControl_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCControl_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCControl_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCControl_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCControl_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCControl_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCControl_getTouchLocation(CCTouch*_touch,)", "contents": "getTouchLocation(${1:CCTouch*_touch})" }
,
		{ "trigger": "CCControl_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCControl_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCControl_copy()", "contents": "copy()" }
,
		{ "trigger": "CCControl_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCControl_isAccelerometerEnabled()", "contents": "isAccelerometerEnabled()" }
,
		{ "trigger": "CCControl_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCControl_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCControl_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCControl_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCControl_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCControl_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCControl_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCControl_isKeypadEnabled()", "contents": "isKeypadEnabled()" }
,
		{ "trigger": "CCControl_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCControl_hasVisibleParents()", "contents": "hasVisibleParents()" }
,
		{ "trigger": "CCControl_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCControl_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCControl_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCControl_transform()", "contents": "transform()" }
,
		{ "trigger": "CCControl_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCControl_registerScriptTouchHandler(LUA_FUNCTION_nHandler,bool_bIsMultiTouches_=_false,int_nPriority_=_0,bool_bSwallowsTouches_=_false,)", "contents": "registerScriptTouchHandler(${1:LUA_FUNCTION_nHandler},${2:bool_bIsMultiTouches_=_false},${3:int_nPriority_=_0},${4:bool_bSwallowsTouches_=_false})" }
,
		{ "trigger": "CCControl_isTouchInside(CCTouch_*_touch,)", "contents": "isTouchInside(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCControl_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCControl_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCControl_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCControl_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCControl_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCControl_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCControl_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCControl_release()", "contents": "release()" }
,
		{ "trigger": "CCControl_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCControl_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCControl_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCControl_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCControl_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCControl_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCControl_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCControl_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCControl_setHighlighted(bool_bHighlighted,)", "contents": "setHighlighted(${1:bool_bHighlighted})" }
,
		{ "trigger": "CCControl_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCControl_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCControl_needsLayout()", "contents": "needsLayout()" }
,
		{ "trigger": "CCControl_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCControl_unregisterScriptAccelerateHandler()", "contents": "unregisterScriptAccelerateHandler()" }
,
		{ "trigger": "CCControl_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCControl_addTargetWithActionForControlEvents(CCObject*_target,SEL_CCControlHandler_action,CCControlEvent_controlEvents,)", "contents": "addTargetWithActionForControlEvents(${1:CCObject*_target},${2:SEL_CCControlHandler_action},${3:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControl_onExit()", "contents": "onExit()" }
,
		{ "trigger": "CCControl_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCControl_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCControl_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCControl_getTouchPriority()", "contents": "getTouchPriority()" }
,
		{ "trigger": "CCControl_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCControl_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCControl_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCControl_addHandleOfControlEvent(LUA_FUNCTION_nFunID,CCControlEvent_controlEvents,)", "contents": "addHandleOfControlEvent(${1:LUA_FUNCTION_nFunID},${2:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControl_description()", "contents": "description()" }
,
		{ "trigger": "CCControl_setTouchMode(ccTouchesMode_mode,)", "contents": "setTouchMode(${1:ccTouchesMode_mode})" }
,
		{ "trigger": "CCControl_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCControl_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCControl_onEnter()", "contents": "onEnter()" }
,

		{ "trigger": "ActionTimelineCache_copy()", "contents": "copy()" }
,
		{ "trigger": "ActionTimelineCache_createAction(const_std::string&_fileName,)", "contents": "createAction(${1:const_std::string&_fileName})" }
,
		{ "trigger": "ActionTimelineCache_purge()", "contents": "purge()" }
,
		{ "trigger": "ActionTimelineCache_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "ActionTimelineCache_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "ActionTimelineCache_loadAnimationActionWithContent(const_std::string&fileName,const_std::string&_content,)", "contents": "loadAnimationActionWithContent(${1:const_std::string&fileName},${2:const_std::string&_content})" }
,
		{ "trigger": "ActionTimelineCache_removeAction(const_std::string&_fileName,)", "contents": "removeAction(${1:const_std::string&_fileName})" }
,
		{ "trigger": "ActionTimelineCache_loadAnimationActionWithFile(const_std::string&_fileName,)", "contents": "loadAnimationActionWithFile(${1:const_std::string&_fileName})" }
,
		{ "trigger": "ActionTimelineCache_release()", "contents": "release()" }
,
		{ "trigger": "ActionTimelineCache_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "ActionTimelineCache_init()", "contents": "init()" }
,
		{ "trigger": "ActionTimelineCache_retain()", "contents": "retain()" }
,
		{ "trigger": "ActionTimelineCache_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "ActionTimelineCache_getInstance()", "contents": "ActionTimelineCache:getInstance()" }
,
		{ "trigger": "ActionTimelineCache_destroyInstance()", "contents": "ActionTimelineCache:destroyInstance()" }
,

		{ "trigger": "CCBezierBy_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCBezierBy_copy()", "contents": "copy()" }
,
		{ "trigger": "CCBezierBy_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCBezierBy_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCBezierBy_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCBezierBy_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCBezierBy_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCBezierBy_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCBezierBy_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCBezierBy_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCBezierBy_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCBezierBy_retain()", "contents": "retain()" }
,
		{ "trigger": "CCBezierBy_release()", "contents": "release()" }
,
		{ "trigger": "CCBezierBy_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCBezierBy_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCBezierBy_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCBezierBy_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCBezierBy_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCBezierBy_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCBezierBy_create(float_t,ccBezierConfig_c,)", "contents": "CCBezierBy:create(${1:float_t},${2:ccBezierConfig_c})" }
,

		{ "trigger": "Label_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "Label_getStringLength()", "contents": "getStringLength()" }
,
		{ "trigger": "Label_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "Label_getBottomInParent()", "contents": "getBottomInParent()" }
,
		{ "trigger": "Label_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "Label_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "Label_getVirtualRenderer()", "contents": "getVirtualRenderer()" }
,
		{ "trigger": "Label_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "Label_draw()", "contents": "draw()" }
,
		{ "trigger": "Label_getNodes()", "contents": "getNodes()" }
,
		{ "trigger": "Label_isBright()", "contents": "isBright()" }
,
		{ "trigger": "Label_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "Label_getLayoutParameter(LayoutParameterType_type,)", "contents": "getLayoutParameter(${1:LayoutParameterType_type})" }
,
		{ "trigger": "Label_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "Label_ignoreContentAdaptWithSize(bool_ignore,)", "contents": "ignoreContentAdaptWithSize(${1:bool_ignore})" }
,
		{ "trigger": "Label_onTouchBegan(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchBegan(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "Label_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "Label_getSize()", "contents": "getSize()" }
,
		{ "trigger": "Label_getTextAreaSize()", "contents": "getTextAreaSize()" }
,
		{ "trigger": "Label_getLayoutSize()", "contents": "getLayoutSize()" }
,
		{ "trigger": "Label_visit()", "contents": "visit()" }
,
		{ "trigger": "Label_getTopInParent()", "contents": "getTopInParent()" }
,
		{ "trigger": "Label_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "Label_disable()", "contents": "disable()" }
,
		{ "trigger": "Label_didNotSelectSelf()", "contents": "didNotSelectSelf()" }
,
		{ "trigger": "Label_setSizeType(SizeType_type,)", "contents": "setSizeType(${1:SizeType_type})" }
,
		{ "trigger": "Label_getNodeByTag(int_tag,)", "contents": "getNodeByTag(${1:int_tag})" }
,
		{ "trigger": "Label_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "Label_getPositionPercent()", "contents": "getPositionPercent()" }
,
		{ "trigger": "Label_setPosition(const_CCPoint_&pos,)", "contents": "setPosition(${1:const_CCPoint_&pos})" }
,
		{ "trigger": "Label_setFlipY(bool_flipY,)", "contents": "setFlipY(${1:bool_flipY})" }
,
		{ "trigger": "Label_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "Label_setSize(const_CCSize_&size,)", "contents": "setSize(${1:const_CCSize_&size})" }
,
		{ "trigger": "Label_clone()", "contents": "clone()" }
,
		{ "trigger": "Label_onTouchEnded(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchEnded(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "Label_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "Label_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "Label_getTouchEndPos()", "contents": "getTouchEndPos()" }
,
		{ "trigger": "Label_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "Label_onTouchMoved(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchMoved(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "Label_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "Label_setTouchEnable(bool_enabled,bool_containChildren_=_false,)", "contents": "setTouchEnable(${1:bool_enabled},${2:bool_containChildren_=_false})" }
,
		{ "trigger": "Label_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "Label_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "Label_addNode(CCNode_*_node,int_zOrder,)", "contents": "addNode(${1:CCNode_*_node},${2:int_zOrder})" }
,
		{ "trigger": "Label_removeAllNodes()", "contents": "removeAllNodes()" }
,
		{ "trigger": "Label_getWidgetByTag(int_tag,)", "contents": "getWidgetByTag(${1:int_tag})" }
,
		{ "trigger": "Label_getFontName()", "contents": "getFontName()" }
,
		{ "trigger": "Label_getChildByName(const_char*_name,)", "contents": "getChildByName(${1:const_char*_name})" }
,
		{ "trigger": "Label_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "Label_setAnchorPoint(const_CCPoint_&pt,)", "contents": "setAnchorPoint(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "Label_getSizePercent()", "contents": "getSizePercent()" }
,
		{ "trigger": "Label_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "Label_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "Label_getCustomSize()", "contents": "getCustomSize()" }
,
		{ "trigger": "Label_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "Label_getRightInParent()", "contents": "getRightInParent()" }
,
		{ "trigger": "Label_getDescription()", "contents": "getDescription()" }
,
		{ "trigger": "Label_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "Label_getRect()", "contents": "getRect()" }
,
		{ "trigger": "Label_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "Label_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "Label_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "Label_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "Label_getName()", "contents": "getName()" }
,
		{ "trigger": "Label_isTouchScaleChangeEnabled()", "contents": "isTouchScaleChangeEnabled()" }
,
		{ "trigger": "Label_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "Label_setTextVerticalAlignment(CCVerticalTextAlignment_alignment,)", "contents": "setTextVerticalAlignment(${1:CCVerticalTextAlignment_alignment})" }
,
		{ "trigger": "Label_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "Label_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "Label_isFlipY()", "contents": "isFlipY()" }
,
		{ "trigger": "Label_setSizePercent(const_CCPoint_&percent,)", "contents": "setSizePercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "Label_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "Label_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "Label_addNode(CCNode*_node,)", "contents": "addNode(${1:CCNode*_node})" }
,
		{ "trigger": "Label_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "Label_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "Label_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "Label_setBright(bool_bright,)", "contents": "setBright(${1:bool_bright})" }
,
		{ "trigger": "Label_active()", "contents": "active()" }
,
		{ "trigger": "Label_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "Label_removeChild(CCNode*_child,)", "contents": "removeChild(${1:CCNode*_child})" }
,
		{ "trigger": "Label_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "Label_getTag()", "contents": "getTag()" }
,
		{ "trigger": "Label_removeAllChildren()", "contents": "removeAllChildren()" }
,
		{ "trigger": "Label_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "Label_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "Label_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "Label_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "Label_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "Label_setFocused(bool_fucosed,)", "contents": "setFocused(${1:bool_fucosed})" }
,
		{ "trigger": "Label_executeScriptEvent(int_eventName,)", "contents": "executeScriptEvent(${1:int_eventName})" }
,
		{ "trigger": "Label_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "Label_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "Label_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "Label_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "Label_setFontName(const_std::string&_name,)", "contents": "setFontName(${1:const_std::string&_name})" }
,
		{ "trigger": "Label_setTouchEnabled(bool_enabled,)", "contents": "setTouchEnabled(${1:bool_enabled})" }
,
		{ "trigger": "Label_setBrightStyle(BrightStyle_style,)", "contents": "setBrightStyle(${1:BrightStyle_style})" }
,
		{ "trigger": "Label_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "Label_setFontSize(int_size,)", "contents": "setFontSize(${1:int_size})" }
,
		{ "trigger": "Label_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "Label_setPositionType(PositionType_type,)", "contents": "setPositionType(${1:PositionType_type})" }
,
		{ "trigger": "Label_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "Label_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "Label_updateSizeAndPosition(const_CCSize&_parentSize,)", "contents": "updateSizeAndPosition(${1:const_CCSize&_parentSize})" }
,
		{ "trigger": "Label_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "Label_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "Label_setLayoutParameter(LayoutParameter*_parameter,)", "contents": "setLayoutParameter(${1:LayoutParameter*_parameter})" }
,
		{ "trigger": "Label_getFontSize()", "contents": "getFontSize()" }
,
		{ "trigger": "Label_getColor()", "contents": "getColor()" }
,
		{ "trigger": "Label_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "Label_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "Label_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "Label_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "Label_setTextHorizontalAlignment(CCTextAlignment_alignment,)", "contents": "setTextHorizontalAlignment(${1:CCTextAlignment_alignment})" }
,
		{ "trigger": "Label_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "Label_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "Label_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "Label_removeNodeByTag(int_tag,)", "contents": "removeNodeByTag(${1:int_tag})" }
,
		{ "trigger": "Label_setPositionPercent(const_CCPoint_&percent,)", "contents": "setPositionPercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "Label_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "Label_getTouchMovePos()", "contents": "getTouchMovePos()" }
,
		{ "trigger": "Label_copy()", "contents": "copy()" }
,
		{ "trigger": "Label_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "Label_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "Label_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "Label_setTextAreaSize(const_CCSize_&size,)", "contents": "setTextAreaSize(${1:const_CCSize_&size})" }
,
		{ "trigger": "Label_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "Label_setText(const_std::string&_text,)", "contents": "setText(${1:const_std::string&_text})" }
,
		{ "trigger": "Label_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "Label_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "Label_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "Label_getTouchStartPos()", "contents": "getTouchStartPos()" }
,
		{ "trigger": "Label_hitTest(const_CCPoint_&pt,)", "contents": "hitTest(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "Label_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "Label_sortAllChildren()", "contents": "sortAllChildren()" }
,
		{ "trigger": "Label_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "Label_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "Label_updateSizeAndPosition()", "contents": "updateSizeAndPosition()" }
,
		{ "trigger": "Label_isFlipX()", "contents": "isFlipX()" }
,
		{ "trigger": "Label_getParent()", "contents": "getParent()" }
,
		{ "trigger": "Label_setName(const_char*_name,)", "contents": "setName(${1:const_char*_name})" }
,
		{ "trigger": "Label_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "Label_transform()", "contents": "transform()" }
,
		{ "trigger": "Label_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "Label_isFocused()", "contents": "isFocused()" }
,
		{ "trigger": "Label_retain()", "contents": "retain()" }
,
		{ "trigger": "Label_setSoundEff(std::string_eff,)", "contents": "setSoundEff(${1:std::string_eff})" }
,
		{ "trigger": "Label_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "Label_visit()", "contents": "visit()" }
,
		{ "trigger": "Label_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "Label_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "Label_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "Label_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "Label_addNode(CCNode*_node,int_zOrder,int_tag,)", "contents": "addNode(${1:CCNode*_node},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "Label_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "Label_getActionTag()", "contents": "getActionTag()" }
,
		{ "trigger": "Label_release()", "contents": "release()" }
,
		{ "trigger": "Label_setActionTag(int_tag,)", "contents": "setActionTag(${1:int_tag})" }
,
		{ "trigger": "Label_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "Label_setFlipX(bool_flipX,)", "contents": "setFlipX(${1:bool_flipX})" }
,
		{ "trigger": "Label_checkChildInfo(int_handleState,Widget*_sender,const_CCPoint_&touchPoint,)", "contents": "checkChildInfo(${1:int_handleState},${2:Widget*_sender},${3:const_CCPoint_&touchPoint})" }
,
		{ "trigger": "Label_removeFromParent()", "contents": "removeFromParent()" }
,
		{ "trigger": "Label_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "Label_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "Label_getStringValue()", "contents": "getStringValue()" }
,
		{ "trigger": "Label_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "Label_isIgnoreContentAdaptWithSize()", "contents": "isIgnoreContentAdaptWithSize()" }
,
		{ "trigger": "Label_getLeftInParent()", "contents": "getLeftInParent()" }
,
		{ "trigger": "Label_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "Label_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "Label_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "Label_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "Label_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "Label_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "Label_getScale()", "contents": "getScale()" }
,
		{ "trigger": "Label_removeNode(CCNode*_node,)", "contents": "removeNode(${1:CCNode*_node})" }
,
		{ "trigger": "Label_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "Label_onExit()", "contents": "onExit()" }
,
		{ "trigger": "Label_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "Label_setTouchScaleChangeEnabled(bool_enabled,)", "contents": "setTouchScaleChangeEnabled(${1:bool_enabled})" }
,
		{ "trigger": "Label_getTextHorizontalAlignment()", "contents": "getTextHorizontalAlignment()" }
,
		{ "trigger": "Label_getWorldPosition()", "contents": "getWorldPosition()" }
,
		{ "trigger": "Label_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "Label_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "Label_clippingParentAreaContainPoint(const_CCPoint_&pt,)", "contents": "clippingParentAreaContainPoint(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "Label_onTouchCancelled(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchCancelled(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "Label_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "Label_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "Label_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "Label_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "Label_description()", "contents": "description()" }
,
		{ "trigger": "Label_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "Label_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "Label_getWidgetType()", "contents": "getWidgetType()" }
,
		{ "trigger": "Label_getTextVerticalAlignment()", "contents": "getTextVerticalAlignment()" }
,
		{ "trigger": "Label_getSizeType()", "contents": "getSizeType()" }
,
		{ "trigger": "Label_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "Label_onEnter()", "contents": "onEnter()" }
,
		{ "trigger": "Label_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "Label_addChild(CCNode*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "Label_create()", "contents": "Label:create()" }
,

		{ "trigger": "CCEaseSineInOut_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseSineInOut_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseSineInOut_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseSineInOut_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseSineInOut_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseSineInOut_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseSineInOut_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseSineInOut_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseSineInOut_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseSineInOut_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseSineInOut_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseSineInOut_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseSineInOut_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseSineInOut_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseSineInOut_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseSineInOut_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseSineInOut_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseSineInOut_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseSineInOut_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseSineInOut_create(CCActionInterval*_pAction,)", "contents": "CCEaseSineInOut:create(${1:CCActionInterval*_pAction})" }
,

		{ "trigger": "CCAnimationFrame_copy()", "contents": "copy()" }
,
		{ "trigger": "CCAnimationFrame_setSpriteFrame(CCSpriteFrame*_pSpFrame,)", "contents": "setSpriteFrame(${1:CCSpriteFrame*_pSpFrame})" }
,
		{ "trigger": "CCAnimationFrame_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCAnimationFrame_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCAnimationFrame_getDelayUnits()", "contents": "getDelayUnits()" }
,
		{ "trigger": "CCAnimationFrame_getUserInfo()", "contents": "getUserInfo()" }
,
		{ "trigger": "CCAnimationFrame_setDelayUnits(float_fDelayUnits,)", "contents": "setDelayUnits(${1:float_fDelayUnits})" }
,
		{ "trigger": "CCAnimationFrame_initWithSpriteFrame(CCSpriteFrame*_spriteFrame,float_delayUnits,CCDictionary*_userInfo,)", "contents": "initWithSpriteFrame(${1:CCSpriteFrame*_spriteFrame},${2:float_delayUnits},${3:CCDictionary*_userInfo})" }
,
		{ "trigger": "CCAnimationFrame_getSpriteFrame()", "contents": "getSpriteFrame()" }
,
		{ "trigger": "CCAnimationFrame_setUserInfo(CCDictionary*_pDict,)", "contents": "setUserInfo(${1:CCDictionary*_pDict})" }
,
		{ "trigger": "CCAnimationFrame_release()", "contents": "release()" }
,
		{ "trigger": "CCAnimationFrame_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCAnimationFrame_retain()", "contents": "retain()" }
,
		{ "trigger": "CCAnimationFrame_isSingleReference()", "contents": "isSingleReference()" }
,

		{ "trigger": "CCShaky3D_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCShaky3D_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCShaky3D_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCShaky3D_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCShaky3D_release()", "contents": "release()" }
,
		{ "trigger": "CCShaky3D_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCShaky3D_retain()", "contents": "retain()" }
,
		{ "trigger": "CCShaky3D_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCShaky3D_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCShaky3D_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCShaky3D_vertex(const_CCPoint&_pos,)", "contents": "vertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCShaky3D_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCShaky3D_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCShaky3D_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCShaky3D_copy()", "contents": "copy()" }
,
		{ "trigger": "CCShaky3D_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCShaky3D_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCShaky3D_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCShaky3D_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCShaky3D_setVertex(const_CCPoint&_pos,const_ccVertex3F&_vertex,)", "contents": "setVertex(${1:const_CCPoint&_pos},${2:const_ccVertex3F&_vertex})" }
,
		{ "trigger": "CCShaky3D_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCShaky3D_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCShaky3D_originalVertex(const_CCPoint&_pos,)", "contents": "originalVertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCShaky3D_create(float_duration,CCSize_gridSize,int_range,bool_shakeZ,)", "contents": "CCShaky3D:create(${1:float_duration},${2:CCSize_gridSize},${3:int_range},${4:bool_shakeZ})" }
,

		{ "trigger": "CCTransitionProgressRadialCW_create(float_t,CCScene*_scene,)", "contents": "CCTransitionProgressRadialCW:create(${1:float_t},${2:CCScene*_scene})" }
,


		{ "trigger": "CCParticleGalaxy_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleGalaxy_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleGalaxy_setStartSizeVar(float_size,)", "contents": "setStartSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleGalaxy_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleGalaxy_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleGalaxy_getRadialAccelVar()", "contents": "getRadialAccelVar()" }
,
		{ "trigger": "CCParticleGalaxy_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleGalaxy_setStartRadiusVar(float_startRadiusVar,)", "contents": "setStartRadiusVar(${1:float_startRadiusVar})" }
,
		{ "trigger": "CCParticleGalaxy_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleGalaxy_setTexture(CCTexture2D*_var,)", "contents": "setTexture(${1:CCTexture2D*_var})" }
,
		{ "trigger": "CCParticleGalaxy_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleGalaxy_isAutoRemoveOnFinish()", "contents": "isAutoRemoveOnFinish()" }
,
		{ "trigger": "CCParticleGalaxy_getTotalParticles()", "contents": "getTotalParticles()" }
,
		{ "trigger": "CCParticleGalaxy_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleGalaxy_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleGalaxy_setPositionType(tCCPositionType_type,)", "contents": "setPositionType(${1:tCCPositionType_type})" }
,
		{ "trigger": "CCParticleGalaxy_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCParticleGalaxy_setDisplayFrame(CCSpriteFrame*_spriteFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame*_spriteFrame})" }
,
		{ "trigger": "CCParticleGalaxy_getSourcePosition()", "contents": "getSourcePosition()" }
,
		{ "trigger": "CCParticleGalaxy_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleGalaxy_setBlendAdditive(bool_value,)", "contents": "setBlendAdditive(${1:bool_value})" }
,
		{ "trigger": "CCParticleGalaxy_setGravity(const_CCPoint&_g,)", "contents": "setGravity(${1:const_CCPoint&_g})" }
,
		{ "trigger": "CCParticleGalaxy_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleGalaxy_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleGalaxy_stopSystem()", "contents": "stopSystem()" }
,
		{ "trigger": "CCParticleGalaxy_setLifeVar(float_lifeVar,)", "contents": "setLifeVar(${1:float_lifeVar})" }
,
		{ "trigger": "CCParticleGalaxy_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleGalaxy_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleGalaxy_setPosVar(CCPoint_pos,)", "contents": "setPosVar(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleGalaxy_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleGalaxy_setEmissionRate(float_rate,)", "contents": "setEmissionRate(${1:float_rate})" }
,
		{ "trigger": "CCParticleGalaxy_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCParticleGalaxy_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleGalaxy_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleGalaxy_getEndColorVar()", "contents": "getEndColorVar()" }
,
		{ "trigger": "CCParticleGalaxy_getEndSize()", "contents": "getEndSize()" }
,
		{ "trigger": "CCParticleGalaxy_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleGalaxy_setEndRadiusVar(float_endRadiusVar,)", "contents": "setEndRadiusVar(${1:float_endRadiusVar})" }
,
		{ "trigger": "CCParticleGalaxy_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleGalaxy_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleGalaxy_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleGalaxy_setEndColorVar(const_ccColor4F_var,)", "contents": "setEndColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleGalaxy_getEndSpin()", "contents": "getEndSpin()" }
,
		{ "trigger": "CCParticleGalaxy_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleGalaxy_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCParticleGalaxy_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleGalaxy_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCParticleGalaxy_setDuration(float_d,)", "contents": "setDuration(${1:float_d})" }
,
		{ "trigger": "CCParticleGalaxy_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleGalaxy_setStartSpinVar(float_var,)", "contents": "setStartSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleGalaxy_getEmitterMode()", "contents": "getEmitterMode()" }
,
		{ "trigger": "CCParticleGalaxy_updateQuadWithParticle(tCCParticle*_particle,const_CCPoint&_newPosition,)", "contents": "updateQuadWithParticle(${1:tCCParticle*_particle},${2:const_CCPoint&_newPosition})" }
,
		{ "trigger": "CCParticleGalaxy_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleGalaxy_setSpeed(float_speed,)", "contents": "setSpeed(${1:float_speed})" }
,
		{ "trigger": "CCParticleGalaxy_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleGalaxy_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleGalaxy_getGravity()", "contents": "getGravity()" }
,
		{ "trigger": "CCParticleGalaxy_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleGalaxy_setEndSpinVar(float_var,)", "contents": "setEndSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleGalaxy_getAngle()", "contents": "getAngle()" }
,
		{ "trigger": "CCParticleGalaxy_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleGalaxy_setStartRadius(float_startRadius,)", "contents": "setStartRadius(${1:float_startRadius})" }
,
		{ "trigger": "CCParticleGalaxy_getAngleVar()", "contents": "getAngleVar()" }
,
		{ "trigger": "CCParticleGalaxy_setEmitterMode(int_mode,)", "contents": "setEmitterMode(${1:int_mode})" }
,
		{ "trigger": "CCParticleGalaxy_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleGalaxy_getTangentialAccel()", "contents": "getTangentialAccel()" }
,
		{ "trigger": "CCParticleGalaxy_getRotatePerSecondVar()", "contents": "getRotatePerSecondVar()" }
,
		{ "trigger": "CCParticleGalaxy_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleGalaxy_getLifeVar()", "contents": "getLifeVar()" }
,
		{ "trigger": "CCParticleGalaxy_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleGalaxy_setStartSpin(float_var,)", "contents": "setStartSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleGalaxy_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleGalaxy_getStartSize()", "contents": "getStartSize()" }
,
		{ "trigger": "CCParticleGalaxy_getEndRadius()", "contents": "getEndRadius()" }
,
		{ "trigger": "CCParticleGalaxy_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleGalaxy_addParticle()", "contents": "addParticle()" }
,
		{ "trigger": "CCParticleGalaxy_setBlendFunc(ccBlendFunc_var,)", "contents": "setBlendFunc(${1:ccBlendFunc_var})" }
,
		{ "trigger": "CCParticleGalaxy_initParticle(tCCParticle*_particle,)", "contents": "initParticle(${1:tCCParticle*_particle})" }
,
		{ "trigger": "CCParticleGalaxy_getTangentialAccelVar()", "contents": "getTangentialAccelVar()" }
,
		{ "trigger": "CCParticleGalaxy_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleGalaxy_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleGalaxy_setAngle(float_angle,)", "contents": "setAngle(${1:float_angle})" }
,
		{ "trigger": "CCParticleGalaxy_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleGalaxy_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleGalaxy_getEndRadiusVar()", "contents": "getEndRadiusVar()" }
,
		{ "trigger": "CCParticleGalaxy_getStartSpin()", "contents": "getStartSpin()" }
,
		{ "trigger": "CCParticleGalaxy_setSpeedVar(float_speed,)", "contents": "setSpeedVar(${1:float_speed})" }
,
		{ "trigger": "CCParticleGalaxy_getLife()", "contents": "getLife()" }
,
		{ "trigger": "CCParticleGalaxy_isBlendAdditive()", "contents": "isBlendAdditive()" }
,
		{ "trigger": "CCParticleGalaxy_getParticleCount()", "contents": "getParticleCount()" }
,
		{ "trigger": "CCParticleGalaxy_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleGalaxy_getEndSpinVar()", "contents": "getEndSpinVar()" }
,
		{ "trigger": "CCParticleGalaxy_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleGalaxy_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleGalaxy_setStartSize(float_size,)", "contents": "setStartSize(${1:float_size})" }
,
		{ "trigger": "CCParticleGalaxy_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleGalaxy_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleGalaxy_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleGalaxy_getStartSpinVar()", "contents": "getStartSpinVar()" }
,
		{ "trigger": "CCParticleGalaxy_setRadialAccelVar(float_t,)", "contents": "setRadialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleGalaxy_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCParticleGalaxy_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleGalaxy_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleGalaxy_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleGalaxy_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleGalaxy_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleGalaxy_setTextureWithRect(CCTexture2D_*texture,const_CCRect&_rect,)", "contents": "setTextureWithRect(${1:CCTexture2D_*texture},${2:const_CCRect&_rect})" }
,
		{ "trigger": "CCParticleGalaxy_setSourcePosition(CCPoint_pos,)", "contents": "setSourcePosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleGalaxy_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleGalaxy_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleGalaxy_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleGalaxy_getRotatePerSecond()", "contents": "getRotatePerSecond()" }
,
		{ "trigger": "CCParticleGalaxy_initWithTotalParticles(unsigned_int_number,)", "contents": "initWithTotalParticles(${1:unsigned_int_number})" }
,
		{ "trigger": "CCParticleGalaxy_setBatchNode(CCParticleBatchNode*_node,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_node})" }
,
		{ "trigger": "CCParticleGalaxy_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleGalaxy_isActive()", "contents": "isActive()" }
,
		{ "trigger": "CCParticleGalaxy_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleGalaxy_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleGalaxy_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleGalaxy_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleGalaxy_setEndSpin(float_var,)", "contents": "setEndSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleGalaxy_resetSystem()", "contents": "resetSystem()" }
,
		{ "trigger": "CCParticleGalaxy_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleGalaxy_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleGalaxy_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleGalaxy_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleGalaxy_getEndSizeVar()", "contents": "getEndSizeVar()" }
,
		{ "trigger": "CCParticleGalaxy_setStartColorVar(const_ccColor4F_var,)", "contents": "setStartColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleGalaxy_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleGalaxy_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleGalaxy_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleGalaxy_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleGalaxy_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleGalaxy_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleGalaxy_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleGalaxy_setStartColor(const_ccColor4F_var,)", "contents": "setStartColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleGalaxy_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleGalaxy_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleGalaxy_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleGalaxy_setAngleVar(float_angle,)", "contents": "setAngleVar(${1:float_angle})" }
,
		{ "trigger": "CCParticleGalaxy_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleGalaxy_setTexture(CCTexture2D*_texture,)", "contents": "setTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCParticleGalaxy_setTangentialAccelVar(float_t,)", "contents": "setTangentialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleGalaxy_setRotatePerSecond(float_degrees,)", "contents": "setRotatePerSecond(${1:float_degrees})" }
,
		{ "trigger": "CCParticleGalaxy_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleGalaxy_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleGalaxy_setTotalParticles(unsigned_int_tp,)", "contents": "setTotalParticles(${1:unsigned_int_tp})" }
,
		{ "trigger": "CCParticleGalaxy_getSpeedVar()", "contents": "getSpeedVar()" }
,
		{ "trigger": "CCParticleGalaxy_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleGalaxy_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleGalaxy_getStartSizeVar()", "contents": "getStartSizeVar()" }
,
		{ "trigger": "CCParticleGalaxy_setAutoRemoveOnFinish(bool_var,)", "contents": "setAutoRemoveOnFinish(${1:bool_var})" }
,
		{ "trigger": "CCParticleGalaxy_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleGalaxy_setTangentialAccel(float_t,)", "contents": "setTangentialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleGalaxy_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleGalaxy_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleGalaxy_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleGalaxy_setLife(float_life,)", "contents": "setLife(${1:float_life})" }
,
		{ "trigger": "CCParticleGalaxy_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleGalaxy_setEndColor(const_ccColor4F_var,)", "contents": "setEndColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleGalaxy_getRadialAccel()", "contents": "getRadialAccel()" }
,
		{ "trigger": "CCParticleGalaxy_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleGalaxy_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleGalaxy_setRotatePerSecondVar(float_degrees,)", "contents": "setRotatePerSecondVar(${1:float_degrees})" }
,
		{ "trigger": "CCParticleGalaxy_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleGalaxy_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleGalaxy_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCParticleGalaxy_getStartRadiusVar()", "contents": "getStartRadiusVar()" }
,
		{ "trigger": "CCParticleGalaxy_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleGalaxy_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleGalaxy_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleGalaxy_setBatchNode(CCParticleBatchNode*_batchNode,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_batchNode})" }
,
		{ "trigger": "CCParticleGalaxy_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleGalaxy_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCParticleGalaxy_getPosVar()", "contents": "getPosVar()" }
,
		{ "trigger": "CCParticleGalaxy_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleGalaxy_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "CCParticleGalaxy_setEndSize(float_size,)", "contents": "setEndSize(${1:float_size})" }
,
		{ "trigger": "CCParticleGalaxy_getEmissionRate()", "contents": "getEmissionRate()" }
,
		{ "trigger": "CCParticleGalaxy_setRadialAccel(float_t,)", "contents": "setRadialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleGalaxy_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleGalaxy_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleGalaxy_initWithFile(const_char*_plistFile,)", "contents": "initWithFile(${1:const_char*_plistFile})" }
,
		{ "trigger": "CCParticleGalaxy_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleGalaxy_setEndSizeVar(float_size,)", "contents": "setEndSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleGalaxy_isFull()", "contents": "isFull()" }
,
		{ "trigger": "CCParticleGalaxy_getStartRadius()", "contents": "getStartRadius()" }
,
		{ "trigger": "CCParticleGalaxy_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleGalaxy_setScale(float_s,)", "contents": "setScale(${1:float_s})" }
,
		{ "trigger": "CCParticleGalaxy_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCParticleGalaxy_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleGalaxy_getStartColorVar()", "contents": "getStartColorVar()" }
,
		{ "trigger": "CCParticleGalaxy_postStep()", "contents": "postStep()" }
,
		{ "trigger": "CCParticleGalaxy_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleGalaxy_setEndRadius(float_endRadius,)", "contents": "setEndRadius(${1:float_endRadius})" }
,
		{ "trigger": "CCParticleGalaxy_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCParticleGalaxy_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCParticleGalaxy_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleGalaxy_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleGalaxy_create()", "contents": "CCParticleGalaxy:create()" }
,

		{ "trigger": "CCControlButton_setTitleTTFSizeForState(float_size,CCControlState_state,)", "contents": "setTitleTTFSizeForState(${1:float_size},${2:CCControlState_state})" }
,
		{ "trigger": "CCControlButton_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCControlButton_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCControlButton_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCControlButton_needsLayout()", "contents": "needsLayout()" }
,
		{ "trigger": "CCControlButton_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCControlButton_getCurrentTitle()", "contents": "getCurrentTitle()" }
,
		{ "trigger": "CCControlButton_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCControlButton_setTitleDispatchTable(CCDictionary*_var,)", "contents": "setTitleDispatchTable(${1:CCDictionary*_var})" }
,
		{ "trigger": "CCControlButton_setOpacityModifyRGB(bool_bOpacityModifyRGB,)", "contents": "setOpacityModifyRGB(${1:bool_bOpacityModifyRGB})" }
,
		{ "trigger": "CCControlButton_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCControlButton_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCControlButton_init()", "contents": "init()" }
,
		{ "trigger": "CCControlButton_draw()", "contents": "draw()" }
,
		{ "trigger": "CCControlButton_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCControlButton_setMargins(int_marginH,int_marginV,)", "contents": "setMargins(${1:int_marginH},${2:int_marginV})" }
,
		{ "trigger": "CCControlButton_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCControlButton_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCControlButton_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCControlButton_ccTouchBegan(CCTouch_*pTouch,CCEvent_*pEvent,)", "contents": "ccTouchBegan(${1:CCTouch_*pTouch},${2:CCEvent_*pEvent})" }
,
		{ "trigger": "CCControlButton_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCControlButton_getTitleDispatchTable()", "contents": "getTitleDispatchTable()" }
,
		{ "trigger": "CCControlButton_setHighlighted(bool_enabled,)", "contents": "setHighlighted(${1:bool_enabled})" }
,
		{ "trigger": "CCControlButton_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCControlButton_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCControlButton_initWithBackgroundSprite(CCScale9Sprite*_sprite,)", "contents": "initWithBackgroundSprite(${1:CCScale9Sprite*_sprite})" }
,
		{ "trigger": "CCControlButton_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCControlButton_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCControlButton_visit()", "contents": "visit()" }
,
		{ "trigger": "CCControlButton_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCControlButton_isHighlighted()", "contents": "isHighlighted()" }
,
		{ "trigger": "CCControlButton_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCControlButton_registerScriptAccelerateHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptAccelerateHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCControlButton_registerWithTouchDispatcher()", "contents": "registerWithTouchDispatcher()" }
,
		{ "trigger": "CCControlButton_getCurrentTitleColor()", "contents": "getCurrentTitleColor()" }
,
		{ "trigger": "CCControlButton_getTouchMode()", "contents": "getTouchMode()" }
,
		{ "trigger": "CCControlButton_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCControlButton_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCControlButton_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCControlButton_setAccelerometerEnabled(bool_bValue,)", "contents": "setAccelerometerEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCControlButton_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCControlButton_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCControlButton_unregisterScriptTouchHandler()", "contents": "unregisterScriptTouchHandler()" }
,
		{ "trigger": "CCControlButton_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCControlButton_ccTouchEnded(CCTouch_*pTouch,CCEvent_*pEvent,)", "contents": "ccTouchEnded(${1:CCTouch_*pTouch},${2:CCEvent_*pEvent})" }
,
		{ "trigger": "CCControlButton_initWithLabelAndBackgroundSprite(CCNode*_label,CCScale9Sprite*_backgroundSprite,)", "contents": "initWithLabelAndBackgroundSprite(${1:CCNode*_label},${2:CCScale9Sprite*_backgroundSprite})" }
,
		{ "trigger": "CCControlButton_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCControlButton_setTitleLabel(CCNode*_var,)", "contents": "setTitleLabel(${1:CCNode*_var})" }
,
		{ "trigger": "CCControlButton_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCControlButton_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCControlButton_setTouchMode(ccTouchesMode_mode,)", "contents": "setTouchMode(${1:ccTouchesMode_mode})" }
,
		{ "trigger": "CCControlButton_getVerticalMargin()", "contents": "getVerticalMargin()" }
,
		{ "trigger": "CCControlButton_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCControlButton_doesAdjustBackgroundImage()", "contents": "doesAdjustBackgroundImage()" }
,
		{ "trigger": "CCControlButton_sendActionsForControlEvents(CCControlEvent_controlEvents,)", "contents": "sendActionsForControlEvents(${1:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlButton_unregisterScriptAccelerateHandler()", "contents": "unregisterScriptAccelerateHandler()" }
,
		{ "trigger": "CCControlButton_setTitleBMFontForState(const_char_*_fntFile,CCControlState_state,)", "contents": "setTitleBMFontForState(${1:const_char_*_fntFile},${2:CCControlState_state})" }
,
		{ "trigger": "CCControlButton_getTitleTTFSizeForState(CCControlState_state,)", "contents": "getTitleTTFSizeForState(${1:CCControlState_state})" }
,
		{ "trigger": "CCControlButton_getState()", "contents": "getState()" }
,
		{ "trigger": "CCControlButton_getTitleColorDispatchTable()", "contents": "getTitleColorDispatchTable()" }
,
		{ "trigger": "CCControlButton_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCControlButton_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCControlButton_ccTouchMoved(CCTouch_*pTouch,CCEvent_*pEvent,)", "contents": "ccTouchMoved(${1:CCTouch_*pTouch},${2:CCEvent_*pEvent})" }
,
		{ "trigger": "CCControlButton_registerScriptKeypadHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptKeypadHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCControlButton_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCControlButton_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCControlButton_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCControlButton_setTitleTTFForState(const_char_*_fntFile,CCControlState_state,)", "contents": "setTitleTTFForState(${1:const_char_*_fntFile},${2:CCControlState_state})" }
,
		{ "trigger": "CCControlButton_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCControlButton_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCControlButton_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCControlButton_setLabelAnchorPoint(CCPoint_var,)", "contents": "setLabelAnchorPoint(${1:CCPoint_var})" }
,
		{ "trigger": "CCControlButton_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCControlButton_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCControlButton_setKeypadEnabled(bool_bValue,)", "contents": "setKeypadEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCControlButton_isSelected()", "contents": "isSelected()" }
,
		{ "trigger": "CCControlButton_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCControlButton_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCControlButton_setTouchPriority(int_priority,)", "contents": "setTouchPriority(${1:int_priority})" }
,
		{ "trigger": "CCControlButton_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCControlButton_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCControlButton_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCControlButton_addTargetWithActionForControlEvents(CCObject*_target,SEL_CCControlHandler_action,CCControlEvent_controlEvents,)", "contents": "addTargetWithActionForControlEvents(${1:CCObject*_target},${2:SEL_CCControlHandler_action},${3:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlButton_setTitleLabelForState(CCNode*_label,CCControlState_state,)", "contents": "setTitleLabelForState(${1:CCNode*_label},${2:CCControlState_state})" }
,
		{ "trigger": "CCControlButton_setBackgroundSpriteForState(CCScale9Sprite*_sprite,CCControlState_state,)", "contents": "setBackgroundSpriteForState(${1:CCScale9Sprite*_sprite},${2:CCControlState_state})" }
,
		{ "trigger": "CCControlButton_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCControlButton_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCControlButton_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCControlButton_setSelected(bool_bSelected,)", "contents": "setSelected(${1:bool_bSelected})" }
,
		{ "trigger": "CCControlButton_setTouchEnabled(bool_bValue,)", "contents": "setTouchEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCControlButton_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCControlButton_init()", "contents": "init()" }
,
		{ "trigger": "CCControlButton_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCControlButton_getTitleBMFontForState(CCControlState_state,)", "contents": "getTitleBMFontForState(${1:CCControlState_state})" }
,
		{ "trigger": "CCControlButton_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCControlButton_getTitleLabelDispatchTable()", "contents": "getTitleLabelDispatchTable()" }
,
		{ "trigger": "CCControlButton_onExit()", "contents": "onExit()" }
,
		{ "trigger": "CCControlButton_setTitleColorForState(ccColor3B_color,CCControlState_state,)", "contents": "setTitleColorForState(${1:ccColor3B_color},${2:CCControlState_state})" }
,
		{ "trigger": "CCControlButton_getLabelAnchorPoint()", "contents": "getLabelAnchorPoint()" }
,
		{ "trigger": "CCControlButton_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCControlButton_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "CCControlButton_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCControlButton_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCControlButton_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCControlButton_setEnabled(bool_bEnabled,)", "contents": "setEnabled(${1:bool_bEnabled})" }
,
		{ "trigger": "CCControlButton_setBackgroundSpriteDispatchTable(CCDictionary*_var,)", "contents": "setBackgroundSpriteDispatchTable(${1:CCDictionary*_var})" }
,
		{ "trigger": "CCControlButton_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCControlButton_getBackgroundSprite()", "contents": "getBackgroundSprite()" }
,
		{ "trigger": "CCControlButton_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCControlButton_getTitleLabel()", "contents": "getTitleLabel()" }
,
		{ "trigger": "CCControlButton_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCControlButton_setPreferredSize(CCSize_var,)", "contents": "setPreferredSize(${1:CCSize_var})" }
,
		{ "trigger": "CCControlButton_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCControlButton_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCControlButton_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCControlButton_retain()", "contents": "retain()" }
,
		{ "trigger": "CCControlButton_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCControlButton_getHorizontalOrigin()", "contents": "getHorizontalOrigin()" }
,
		{ "trigger": "CCControlButton_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCControlButton_getZoomOnTouchDown()", "contents": "getZoomOnTouchDown()" }
,
		{ "trigger": "CCControlButton_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCControlButton_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCControlButton_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCControlButton_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCControlButton_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCControlButton_unregisterScriptKeypadHandler()", "contents": "unregisterScriptKeypadHandler()" }
,
		{ "trigger": "CCControlButton_transform()", "contents": "transform()" }
,
		{ "trigger": "CCControlButton_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCControlButton_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCControlButton_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCControlButton_removeHandleOfControlEvent(CCControlEvent_controlEvents,)", "contents": "removeHandleOfControlEvent(${1:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlButton_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCControlButton_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCControlButton_setTitleLabelDispatchTable(CCDictionary*_var,)", "contents": "setTitleLabelDispatchTable(${1:CCDictionary*_var})" }
,
		{ "trigger": "CCControlButton_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCControlButton_setOpacity(GLubyte_var,)", "contents": "setOpacity(${1:GLubyte_var})" }
,
		{ "trigger": "CCControlButton_getTouchLocation(CCTouch*_touch,)", "contents": "getTouchLocation(${1:CCTouch*_touch})" }
,
		{ "trigger": "CCControlButton_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCControlButton_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCControlButton_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCControlButton_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCControlButton_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCControlButton_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCControlButton_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCControlButton_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCControlButton_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCControlButton_removeTargetWithActionForControlEvents(CCObject*_target,SEL_CCControlHandler_action,CCControlEvent_controlEvents,)", "contents": "removeTargetWithActionForControlEvents(${1:CCObject*_target},${2:SEL_CCControlHandler_action},${3:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlButton_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCControlButton_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCControlButton_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCControlButton_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCControlButton_isPushed()", "contents": "isPushed()" }
,
		{ "trigger": "CCControlButton_setTitleColorDispatchTable(CCDictionary*_var,)", "contents": "setTitleColorDispatchTable(${1:CCDictionary*_var})" }
,
		{ "trigger": "CCControlButton_isKeypadEnabled()", "contents": "isKeypadEnabled()" }
,
		{ "trigger": "CCControlButton_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCControlButton_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCControlButton_hasVisibleParents()", "contents": "hasVisibleParents()" }
,
		{ "trigger": "CCControlButton_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCControlButton_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCControlButton_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCControlButton_ccTouchCancelled(CCTouch_*pTouch,CCEvent_*pEvent,)", "contents": "ccTouchCancelled(${1:CCTouch_*pTouch},${2:CCEvent_*pEvent})" }
,
		{ "trigger": "CCControlButton_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCControlButton_registerScriptTouchHandler(LUA_FUNCTION_nHandler,bool_bIsMultiTouches_=_false,int_nPriority_=_0,bool_bSwallowsTouches_=_false,)", "contents": "registerScriptTouchHandler(${1:LUA_FUNCTION_nHandler},${2:bool_bIsMultiTouches_=_false},${3:int_nPriority_=_0},${4:bool_bSwallowsTouches_=_false})" }
,
		{ "trigger": "CCControlButton_isTouchInside(CCTouch_*_touch,)", "contents": "isTouchInside(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCControlButton_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCControlButton_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCControlButton_getTitleColorForState(CCControlState_state,)", "contents": "getTitleColorForState(${1:CCControlState_state})" }
,
		{ "trigger": "CCControlButton_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCControlButton_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCControlButton_getPreferredSize()", "contents": "getPreferredSize()" }
,
		{ "trigger": "CCControlButton_getTitleTTFForState(CCControlState_state,)", "contents": "getTitleTTFForState(${1:CCControlState_state})" }
,
		{ "trigger": "CCControlButton_setSelected(bool_enabled,)", "contents": "setSelected(${1:bool_enabled})" }
,
		{ "trigger": "CCControlButton_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCControlButton_setAdjustBackgroundImage(bool_adjustBackgroundImage,)", "contents": "setAdjustBackgroundImage(${1:bool_adjustBackgroundImage})" }
,
		{ "trigger": "CCControlButton_getTitleForState(CCControlState_state,)", "contents": "getTitleForState(${1:CCControlState_state})" }
,
		{ "trigger": "CCControlButton_setBackgroundSpriteFrameForState(CCSpriteFrame_*_spriteFrame,CCControlState_state,)", "contents": "setBackgroundSpriteFrameForState(${1:CCSpriteFrame_*_spriteFrame},${2:CCControlState_state})" }
,
		{ "trigger": "CCControlButton_initWithTitleAndFontNameAndFontSize(std::string_title,const_char_*_fontName,float_fontSize,)", "contents": "initWithTitleAndFontNameAndFontSize(${1:std::string_title},${2:const_char_*_fontName},${3:float_fontSize})" }
,
		{ "trigger": "CCControlButton_release()", "contents": "release()" }
,
		{ "trigger": "CCControlButton_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCControlButton_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCControlButton_getBackgroundSpriteDispatchTable()", "contents": "getBackgroundSpriteDispatchTable()" }
,
		{ "trigger": "CCControlButton_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCControlButton_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCControlButton_setTitleForState(CCString*_title,CCControlState_state,)", "contents": "setTitleForState(${1:CCString*_title},${2:CCControlState_state})" }
,
		{ "trigger": "CCControlButton_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCControlButton_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCControlButton_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCControlButton_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCControlButton_setHighlighted(bool_bHighlighted,)", "contents": "setHighlighted(${1:bool_bHighlighted})" }
,
		{ "trigger": "CCControlButton_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCControlButton_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCControlButton_needsLayout()", "contents": "needsLayout()" }
,
		{ "trigger": "CCControlButton_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCControlButton_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCControlButton_setBackgroundSprite(CCScale9Sprite*_var,)", "contents": "setBackgroundSprite(${1:CCScale9Sprite*_var})" }
,
		{ "trigger": "CCControlButton_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCControlButton_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCControlButton_getTitleLabelForState(CCControlState_state,)", "contents": "getTitleLabelForState(${1:CCControlState_state})" }
,
		{ "trigger": "CCControlButton_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCControlButton_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCControlButton_getBackgroundSpriteForState(CCControlState_state,)", "contents": "getBackgroundSpriteForState(${1:CCControlState_state})" }
,
		{ "trigger": "CCControlButton_isAccelerometerEnabled()", "contents": "isAccelerometerEnabled()" }
,
		{ "trigger": "CCControlButton_setZoomOnTouchDown(bool_var,)", "contents": "setZoomOnTouchDown(${1:bool_var})" }
,
		{ "trigger": "CCControlButton_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCControlButton_getTouchPriority()", "contents": "getTouchPriority()" }
,
		{ "trigger": "CCControlButton_copy()", "contents": "copy()" }
,
		{ "trigger": "CCControlButton_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCControlButton_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCControlButton_addHandleOfControlEvent(LUA_FUNCTION_nFunID,CCControlEvent_controlEvents,)", "contents": "addHandleOfControlEvent(${1:LUA_FUNCTION_nFunID},${2:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlButton_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "CCControlButton_description()", "contents": "description()" }
,
		{ "trigger": "CCControlButton_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCControlButton_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCControlButton_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCControlButton_onEnter()", "contents": "onEnter()" }
,
		{ "trigger": "CCControlButton_create()", "contents": "CCControlButton:create()" }
,
		{ "trigger": "CCControlButton_create(CCScale9Sprite*_sprite,)", "contents": "CCControlButton:create(${1:CCScale9Sprite*_sprite})" }
,
		{ "trigger": "CCControlButton_create(CCNode*_label,CCScale9Sprite*_backgroundSprite,)", "contents": "CCControlButton:create(${1:CCNode*_label},${2:CCScale9Sprite*_backgroundSprite})" }
,
		{ "trigger": "CCControlButton_create(std::string_title,const_char_*_fontName,float_fontSize,)", "contents": "CCControlButton:create(${1:std::string_title},${2:const_char_*_fontName},${3:float_fontSize})" }
,

		{ "trigger": "CCTransitionTurnOffTiles_create(float_t,CCScene*_scene,)", "contents": "CCTransitionTurnOffTiles:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCTransitionSlideInT_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTransitionSlideInT_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTransitionSlideInT_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTransitionSlideInT_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTransitionSlideInT_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTransitionSlideInT_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTransitionSlideInT_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTransitionSlideInT_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTransitionSlideInT_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCTransitionSlideInT_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCTransitionSlideInT_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionSlideInT_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTransitionSlideInT_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTransitionSlideInT_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionSlideInT_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionSlideInT_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTransitionSlideInT_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionSlideInT_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTransitionSlideInT_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCTransitionSlideInT_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionSlideInT_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTransitionSlideInT_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionSlideInT_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTransitionSlideInT_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionSlideInT_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTransitionSlideInT_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTransitionSlideInT_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCTransitionSlideInT_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTransitionSlideInT_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTransitionSlideInT_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTransitionSlideInT_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTransitionSlideInT_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTransitionSlideInT_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTransitionSlideInT_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionSlideInT_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTransitionSlideInT_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTransitionSlideInT_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionSlideInT_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTransitionSlideInT_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTransitionSlideInT_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTransitionSlideInT_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTransitionSlideInT_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionSlideInT_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionSlideInT_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionSlideInT_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTransitionSlideInT_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTransitionSlideInT_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTransitionSlideInT_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTransitionSlideInT_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTransitionSlideInT_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTransitionSlideInT_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTransitionSlideInT_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionSlideInT_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTransitionSlideInT_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTransitionSlideInT_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTransitionSlideInT_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTransitionSlideInT_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTransitionSlideInT_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTransitionSlideInT_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTransitionSlideInT_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTransitionSlideInT_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTransitionSlideInT_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionSlideInT_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTransitionSlideInT_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTransitionSlideInT_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTransitionSlideInT_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTransitionSlideInT_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTransitionSlideInT_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTransitionSlideInT_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTransitionSlideInT_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTransitionSlideInT_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionSlideInT_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTransitionSlideInT_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTransitionSlideInT_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTransitionSlideInT_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTransitionSlideInT_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionSlideInT_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTransitionSlideInT_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTransitionSlideInT_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTransitionSlideInT_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTransitionSlideInT_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTransitionSlideInT_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionSlideInT_release()", "contents": "release()" }
,
		{ "trigger": "CCTransitionSlideInT_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionSlideInT_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionSlideInT_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionSlideInT_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTransitionSlideInT_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTransitionSlideInT_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTransitionSlideInT_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCTransitionSlideInT_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTransitionSlideInT_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTransitionSlideInT_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTransitionSlideInT_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTransitionSlideInT_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionSlideInT_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTransitionSlideInT_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTransitionSlideInT_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTransitionSlideInT_description()", "contents": "description()" }
,
		{ "trigger": "CCTransitionSlideInT_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTransitionSlideInT_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTransitionSlideInT_create(float_t,CCScene*_scene,)", "contents": "CCTransitionSlideInT:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCEaseExponentialIn_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseExponentialIn_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseExponentialIn_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseExponentialIn_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseExponentialIn_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseExponentialIn_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseExponentialIn_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseExponentialIn_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseExponentialIn_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseExponentialIn_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseExponentialIn_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseExponentialIn_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseExponentialIn_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseExponentialIn_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseExponentialIn_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseExponentialIn_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseExponentialIn_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseExponentialIn_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseExponentialIn_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseExponentialIn_create(CCActionInterval*_pAction,)", "contents": "CCEaseExponentialIn:create(${1:CCActionInterval*_pAction})" }
,

		{ "trigger": "CCTextureAtlas_setTexture(CCTexture2D*_val,)", "contents": "setTexture(${1:CCTexture2D*_val})" }
,
		{ "trigger": "CCTextureAtlas_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCTextureAtlas_drawNumberOfQuads(unsigned_int_n,unsigned_int_start,)", "contents": "drawNumberOfQuads(${1:unsigned_int_n},${2:unsigned_int_start})" }
,
		{ "trigger": "CCTextureAtlas_moveQuadsFromIndex(unsigned_int_index,unsigned_int_newIndex,)", "contents": "moveQuadsFromIndex(${1:unsigned_int_index},${2:unsigned_int_newIndex})" }
,
		{ "trigger": "CCTextureAtlas_fillWithEmptyQuadsFromIndex(unsigned_int_index,unsigned_int_amount,)", "contents": "fillWithEmptyQuadsFromIndex(${1:unsigned_int_index},${2:unsigned_int_amount})" }
,
		{ "trigger": "CCTextureAtlas_getQuads()", "contents": "getQuads()" }
,
		{ "trigger": "CCTextureAtlas_resizeCapacity(unsigned_int_n,)", "contents": "resizeCapacity(${1:unsigned_int_n})" }
,
		{ "trigger": "CCTextureAtlas_release()", "contents": "release()" }
,
		{ "trigger": "CCTextureAtlas_getCapacity()", "contents": "getCapacity()" }
,
		{ "trigger": "CCTextureAtlas_drawNumberOfQuads(unsigned_int_n,)", "contents": "drawNumberOfQuads(${1:unsigned_int_n})" }
,
		{ "trigger": "CCTextureAtlas_insertQuad(ccV3F_C4B_T2F_Quad*_quad,unsigned_int_index,)", "contents": "insertQuad(${1:ccV3F_C4B_T2F_Quad*_quad},${2:unsigned_int_index})" }
,
		{ "trigger": "CCTextureAtlas_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTextureAtlas_removeAllQuads()", "contents": "removeAllQuads()" }
,
		{ "trigger": "CCTextureAtlas_getTotalQuads()", "contents": "getTotalQuads()" }
,
		{ "trigger": "CCTextureAtlas_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTextureAtlas_removeQuadAtIndex(unsigned_int_index,)", "contents": "removeQuadAtIndex(${1:unsigned_int_index})" }
,
		{ "trigger": "CCTextureAtlas_moveQuadsFromIndex(unsigned_int_oldIndex,unsigned_int_amount,unsigned_int_newIndex,)", "contents": "moveQuadsFromIndex(${1:unsigned_int_oldIndex},${2:unsigned_int_amount},${3:unsigned_int_newIndex})" }
,
		{ "trigger": "CCTextureAtlas_increaseTotalQuadsWith(unsigned_int_amount,)", "contents": "increaseTotalQuadsWith(${1:unsigned_int_amount})" }
,
		{ "trigger": "CCTextureAtlas_drawQuads()", "contents": "drawQuads()" }
,
		{ "trigger": "CCTextureAtlas_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTextureAtlas_setQuads(ccV3F_C4B_T2F_Quad*_val,)", "contents": "setQuads(${1:ccV3F_C4B_T2F_Quad*_val})" }
,
		{ "trigger": "CCTextureAtlas_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTextureAtlas_updateQuad(ccV3F_C4B_T2F_Quad*_quad,unsigned_int_index,)", "contents": "updateQuad(${1:ccV3F_C4B_T2F_Quad*_quad},${2:unsigned_int_index})" }
,
		{ "trigger": "CCTextureAtlas_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTextureAtlas_insertQuadFromIndex(unsigned_int_fromIndex,unsigned_int_newIndex,)", "contents": "insertQuadFromIndex(${1:unsigned_int_fromIndex},${2:unsigned_int_newIndex})" }
,
		{ "trigger": "CCTextureAtlas_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTextureAtlas_create(const_char*_file_,unsigned_int_capacity,)", "contents": "CCTextureAtlas:create(${1:const_char*_file_},${2:unsigned_int_capacity})" }
,
		{ "trigger": "CCTextureAtlas_createWithTexture(CCTexture2D_*texture,unsigned_int_capacity,)", "contents": "CCTextureAtlas:createWithTexture(${1:CCTexture2D_*texture},${2:unsigned_int_capacity})" }
,

		{ "trigger": "CCTransitionSlideInR_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTransitionSlideInR_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTransitionSlideInR_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTransitionSlideInR_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTransitionSlideInR_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTransitionSlideInR_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTransitionSlideInR_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTransitionSlideInR_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTransitionSlideInR_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCTransitionSlideInR_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCTransitionSlideInR_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionSlideInR_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTransitionSlideInR_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTransitionSlideInR_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionSlideInR_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionSlideInR_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTransitionSlideInR_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionSlideInR_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTransitionSlideInR_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCTransitionSlideInR_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionSlideInR_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTransitionSlideInR_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionSlideInR_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTransitionSlideInR_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionSlideInR_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTransitionSlideInR_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTransitionSlideInR_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCTransitionSlideInR_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTransitionSlideInR_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTransitionSlideInR_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTransitionSlideInR_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTransitionSlideInR_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTransitionSlideInR_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTransitionSlideInR_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionSlideInR_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTransitionSlideInR_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTransitionSlideInR_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionSlideInR_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTransitionSlideInR_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTransitionSlideInR_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTransitionSlideInR_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTransitionSlideInR_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionSlideInR_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionSlideInR_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionSlideInR_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTransitionSlideInR_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTransitionSlideInR_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTransitionSlideInR_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTransitionSlideInR_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTransitionSlideInR_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTransitionSlideInR_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTransitionSlideInR_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionSlideInR_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTransitionSlideInR_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTransitionSlideInR_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTransitionSlideInR_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTransitionSlideInR_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTransitionSlideInR_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTransitionSlideInR_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTransitionSlideInR_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTransitionSlideInR_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTransitionSlideInR_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionSlideInR_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTransitionSlideInR_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTransitionSlideInR_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTransitionSlideInR_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTransitionSlideInR_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTransitionSlideInR_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTransitionSlideInR_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTransitionSlideInR_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTransitionSlideInR_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionSlideInR_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTransitionSlideInR_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTransitionSlideInR_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTransitionSlideInR_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTransitionSlideInR_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionSlideInR_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTransitionSlideInR_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTransitionSlideInR_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTransitionSlideInR_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTransitionSlideInR_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTransitionSlideInR_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionSlideInR_release()", "contents": "release()" }
,
		{ "trigger": "CCTransitionSlideInR_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionSlideInR_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionSlideInR_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionSlideInR_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTransitionSlideInR_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTransitionSlideInR_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTransitionSlideInR_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCTransitionSlideInR_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTransitionSlideInR_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTransitionSlideInR_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTransitionSlideInR_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTransitionSlideInR_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionSlideInR_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTransitionSlideInR_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTransitionSlideInR_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTransitionSlideInR_description()", "contents": "description()" }
,
		{ "trigger": "CCTransitionSlideInR_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTransitionSlideInR_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTransitionSlideInR_create(float_t,CCScene*_scene,)", "contents": "CCTransitionSlideInR:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCTransitionSlideInL_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTransitionSlideInL_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTransitionSlideInL_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTransitionSlideInL_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTransitionSlideInL_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTransitionSlideInL_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTransitionSlideInL_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTransitionSlideInL_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTransitionSlideInL_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCTransitionSlideInL_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCTransitionSlideInL_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionSlideInL_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTransitionSlideInL_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTransitionSlideInL_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionSlideInL_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionSlideInL_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTransitionSlideInL_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionSlideInL_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTransitionSlideInL_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCTransitionSlideInL_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionSlideInL_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTransitionSlideInL_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionSlideInL_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTransitionSlideInL_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionSlideInL_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTransitionSlideInL_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTransitionSlideInL_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCTransitionSlideInL_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTransitionSlideInL_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTransitionSlideInL_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTransitionSlideInL_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTransitionSlideInL_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTransitionSlideInL_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTransitionSlideInL_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionSlideInL_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTransitionSlideInL_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTransitionSlideInL_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionSlideInL_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTransitionSlideInL_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTransitionSlideInL_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTransitionSlideInL_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTransitionSlideInL_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionSlideInL_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionSlideInL_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionSlideInL_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTransitionSlideInL_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTransitionSlideInL_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTransitionSlideInL_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTransitionSlideInL_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTransitionSlideInL_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTransitionSlideInL_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTransitionSlideInL_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionSlideInL_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTransitionSlideInL_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTransitionSlideInL_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTransitionSlideInL_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTransitionSlideInL_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTransitionSlideInL_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTransitionSlideInL_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTransitionSlideInL_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTransitionSlideInL_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTransitionSlideInL_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionSlideInL_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTransitionSlideInL_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTransitionSlideInL_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTransitionSlideInL_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTransitionSlideInL_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTransitionSlideInL_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTransitionSlideInL_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTransitionSlideInL_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTransitionSlideInL_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionSlideInL_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTransitionSlideInL_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTransitionSlideInL_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTransitionSlideInL_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTransitionSlideInL_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionSlideInL_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTransitionSlideInL_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTransitionSlideInL_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTransitionSlideInL_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTransitionSlideInL_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTransitionSlideInL_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionSlideInL_release()", "contents": "release()" }
,
		{ "trigger": "CCTransitionSlideInL_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionSlideInL_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionSlideInL_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionSlideInL_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTransitionSlideInL_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTransitionSlideInL_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTransitionSlideInL_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCTransitionSlideInL_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTransitionSlideInL_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTransitionSlideInL_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTransitionSlideInL_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTransitionSlideInL_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionSlideInL_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTransitionSlideInL_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTransitionSlideInL_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTransitionSlideInL_description()", "contents": "description()" }
,
		{ "trigger": "CCTransitionSlideInL_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTransitionSlideInL_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTransitionSlideInL_create(float_t,CCScene*_scene,)", "contents": "CCTransitionSlideInL:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCMenuItemLabel_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCMenuItemLabel_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCMenuItemLabel_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCMenuItemLabel_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCMenuItemLabel_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCMenuItemLabel_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCMenuItemLabel_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCMenuItemLabel_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCMenuItemLabel_init()", "contents": "init()" }
,
		{ "trigger": "CCMenuItemLabel_draw()", "contents": "draw()" }
,
		{ "trigger": "CCMenuItemLabel_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCMenuItemLabel_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCMenuItemLabel_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCMenuItemLabel_setDisabledColor(const_ccColor3B_&_color,)", "contents": "setDisabledColor(${1:const_ccColor3B_&_color})" }
,
		{ "trigger": "CCMenuItemLabel_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCMenuItemLabel_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCMenuItemLabel_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCMenuItemLabel_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCMenuItemLabel_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemLabel_visit()", "contents": "visit()" }
,
		{ "trigger": "CCMenuItemLabel_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCMenuItemLabel_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItemLabel_activate()", "contents": "activate()" }
,
		{ "trigger": "CCMenuItemLabel_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItemLabel_setLabel(CCNode*_pLabel,)", "contents": "setLabel(${1:CCNode*_pLabel})" }
,
		{ "trigger": "CCMenuItemLabel_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCMenuItemLabel_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemLabel_unregisterScriptTapHandler()", "contents": "unregisterScriptTapHandler()" }
,
		{ "trigger": "CCMenuItemLabel_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCMenuItemLabel_transform()", "contents": "transform()" }
,
		{ "trigger": "CCMenuItemLabel_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCMenuItemLabel_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemLabel_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCMenuItemLabel_registerScriptTapHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptTapHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItemLabel_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCMenuItemLabel_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCMenuItemLabel_selected()", "contents": "selected()" }
,
		{ "trigger": "CCMenuItemLabel_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItemLabel_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItemLabel_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItemLabel_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCMenuItemLabel_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCMenuItemLabel_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCMenuItemLabel_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCMenuItemLabel_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCMenuItemLabel_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCMenuItemLabel_isSelected()", "contents": "isSelected()" }
,
		{ "trigger": "CCMenuItemLabel_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCMenuItemLabel_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCMenuItemLabel_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCMenuItemLabel_unselected()", "contents": "unselected()" }
,
		{ "trigger": "CCMenuItemLabel_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCMenuItemLabel_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCMenuItemLabel_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItemLabel_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCMenuItemLabel_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCMenuItemLabel_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCMenuItemLabel_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCMenuItemLabel_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItemLabel_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCMenuItemLabel_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCMenuItemLabel_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCMenuItemLabel_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCMenuItemLabel_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemLabel_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemLabel_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItemLabel_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCMenuItemLabel_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCMenuItemLabel_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCMenuItemLabel_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCMenuItemLabel_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCMenuItemLabel_retain()", "contents": "retain()" }
,
		{ "trigger": "CCMenuItemLabel_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItemLabel_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCMenuItemLabel_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCMenuItemLabel_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCMenuItemLabel_setColor(ccColor3B_color,)", "contents": "setColor(${1:ccColor3B_color})" }
,
		{ "trigger": "CCMenuItemLabel_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCMenuItemLabel_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCMenuItemLabel_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCMenuItemLabel_rect()", "contents": "rect()" }
,
		{ "trigger": "CCMenuItemLabel_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCMenuItemLabel_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCMenuItemLabel_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCMenuItemLabel_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCMenuItemLabel_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCMenuItemLabel_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCMenuItemLabel_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCMenuItemLabel_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemLabel_copy()", "contents": "copy()" }
,
		{ "trigger": "CCMenuItemLabel_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCMenuItemLabel_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCMenuItemLabel_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCMenuItemLabel_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCMenuItemLabel_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCMenuItemLabel_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCMenuItemLabel_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCMenuItemLabel_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCMenuItemLabel_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItemLabel_setString(const_char*_label,)", "contents": "setString(${1:const_char*_label})" }
,
		{ "trigger": "CCMenuItemLabel_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCMenuItemLabel_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCMenuItemLabel_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCMenuItemLabel_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCMenuItemLabel_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItemLabel_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCMenuItemLabel_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCMenuItemLabel_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCMenuItemLabel_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCMenuItemLabel_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCMenuItemLabel_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCMenuItemLabel_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItemLabel_release()", "contents": "release()" }
,
		{ "trigger": "CCMenuItemLabel_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItemLabel_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemLabel_getDisabledColor()", "contents": "getDisabledColor()" }
,
		{ "trigger": "CCMenuItemLabel_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItemLabel_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCMenuItemLabel_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCMenuItemLabel_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCMenuItemLabel_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCMenuItemLabel_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCMenuItemLabel_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCMenuItemLabel_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCMenuItemLabel_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCMenuItemLabel_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCMenuItemLabel_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCMenuItemLabel_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItemLabel_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCMenuItemLabel_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCMenuItemLabel_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCMenuItemLabel_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCMenuItemLabel_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCMenuItemLabel_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCMenuItemLabel_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCMenuItemLabel_getLabel()", "contents": "getLabel()" }
,
		{ "trigger": "CCMenuItemLabel_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "CCMenuItemLabel_description()", "contents": "description()" }
,
		{ "trigger": "CCMenuItemLabel_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCMenuItemLabel_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCMenuItemLabel_create(CCNode*_label,)", "contents": "CCMenuItemLabel:create(${1:CCNode*_label})" }
,

		{ "trigger": "CCCallFunc_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCCallFunc_copy()", "contents": "copy()" }
,
		{ "trigger": "CCCallFunc_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCCallFunc_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCCallFunc_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCCallFunc_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCCallFunc_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCCallFunc_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCCallFunc_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCCallFunc_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCCallFunc_release()", "contents": "release()" }
,
		{ "trigger": "CCCallFunc_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCCallFunc_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCCallFunc_retain()", "contents": "retain()" }
,
		{ "trigger": "CCCallFunc_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCCallFunc_create(LUA_FUNCTION_funcID,)", "contents": "CCCallFunc:create(${1:LUA_FUNCTION_funcID})" }
,


		{ "trigger": "CCBlink_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCBlink_copy()", "contents": "copy()" }
,
		{ "trigger": "CCBlink_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCBlink_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCBlink_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCBlink_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCBlink_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCBlink_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCBlink_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCBlink_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCBlink_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCBlink_retain()", "contents": "retain()" }
,
		{ "trigger": "CCBlink_release()", "contents": "release()" }
,
		{ "trigger": "CCBlink_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCBlink_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCBlink_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCBlink_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCBlink_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCBlink_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCBlink_create(float_duration,unsigned_int_uBlinks,)", "contents": "CCBlink:create(${1:float_duration},${2:unsigned_int_uBlinks})" }
,

		{ "trigger": "CCScale9Sprite_initWithFile(CCRect_capInsets,const_char*_file,)", "contents": "initWithFile(${1:CCRect_capInsets},${2:const_char*_file})" }
,
		{ "trigger": "CCScale9Sprite_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCScale9Sprite_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCScale9Sprite_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCScale9Sprite_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCScale9Sprite_getInsetRight()", "contents": "getInsetRight()" }
,
		{ "trigger": "CCScale9Sprite_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCScale9Sprite_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCScale9Sprite_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCScale9Sprite_init()", "contents": "init()" }
,
		{ "trigger": "CCScale9Sprite_draw()", "contents": "draw()" }
,
		{ "trigger": "CCScale9Sprite_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCScale9Sprite_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCScale9Sprite_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCScale9Sprite_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCScale9Sprite_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCScale9Sprite_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCScale9Sprite_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCScale9Sprite_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCScale9Sprite_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCScale9Sprite_visit()", "contents": "visit()" }
,
		{ "trigger": "CCScale9Sprite_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCScale9Sprite_resizableSpriteWithCapInsets(CCRect_capInsets,)", "contents": "resizableSpriteWithCapInsets(${1:CCRect_capInsets})" }
,
		{ "trigger": "CCScale9Sprite_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCScale9Sprite_updateWithBatchNode(CCSpriteBatchNode*_batchnode,CCRect_rect,bool_rotated,CCRect_capInsets,)", "contents": "updateWithBatchNode(${1:CCSpriteBatchNode*_batchnode},${2:CCRect_rect},${3:bool_rotated},${4:CCRect_capInsets})" }
,
		{ "trigger": "CCScale9Sprite_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCScale9Sprite_setInsetBottom(float_fBottom,)", "contents": "setInsetBottom(${1:float_fBottom})" }
,
		{ "trigger": "CCScale9Sprite_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCScale9Sprite_getInsetLeft()", "contents": "getInsetLeft()" }
,
		{ "trigger": "CCScale9Sprite_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCScale9Sprite_setCapInsets(CCRect_rt,)", "contents": "setCapInsets(${1:CCRect_rt})" }
,
		{ "trigger": "CCScale9Sprite_initWithFile(const_char*_file,)", "contents": "initWithFile(${1:const_char*_file})" }
,
		{ "trigger": "CCScale9Sprite_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCScale9Sprite_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCScale9Sprite_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCScale9Sprite_getInsetTop()", "contents": "getInsetTop()" }
,
		{ "trigger": "CCScale9Sprite_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCScale9Sprite_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCScale9Sprite_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCScale9Sprite_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCScale9Sprite_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCScale9Sprite_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCScale9Sprite_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCScale9Sprite_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCScale9Sprite_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCScale9Sprite_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCScale9Sprite_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCScale9Sprite_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCScale9Sprite_setInsetLeft(float_fLeft,)", "contents": "setInsetLeft(${1:float_fLeft})" }
,
		{ "trigger": "CCScale9Sprite_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCScale9Sprite_setSpriteFrame(CCSpriteFrame_*_spriteFrame,)", "contents": "setSpriteFrame(${1:CCSpriteFrame_*_spriteFrame})" }
,
		{ "trigger": "CCScale9Sprite_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCScale9Sprite_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCScale9Sprite_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCScale9Sprite_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCScale9Sprite_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCScale9Sprite_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCScale9Sprite_initWithSpriteFrame(CCSpriteFrame*_spriteFrame,)", "contents": "initWithSpriteFrame(${1:CCSpriteFrame*_spriteFrame})" }
,
		{ "trigger": "CCScale9Sprite_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCScale9Sprite_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCScale9Sprite_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCScale9Sprite_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCScale9Sprite_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCScale9Sprite_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCScale9Sprite_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCScale9Sprite_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCScale9Sprite_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCScale9Sprite_getOriginalSize()", "contents": "getOriginalSize()" }
,
		{ "trigger": "CCScale9Sprite_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCScale9Sprite_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCScale9Sprite_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCScale9Sprite_initWithSpriteFrameName(const_char*spriteFrameName,)", "contents": "initWithSpriteFrameName(${1:const_char*spriteFrameName})" }
,
		{ "trigger": "CCScale9Sprite_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCScale9Sprite_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCScale9Sprite_retain()", "contents": "retain()" }
,
		{ "trigger": "CCScale9Sprite_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCScale9Sprite_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCScale9Sprite_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCScale9Sprite_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCScale9Sprite_getCapInsets()", "contents": "getCapInsets()" }
,
		{ "trigger": "CCScale9Sprite_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCScale9Sprite_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCScale9Sprite_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCScale9Sprite_initWithBatchNode(CCSpriteBatchNode*_batchnode,CCRect_rect,bool_rotated,CCRect_capInsets,)", "contents": "initWithBatchNode(${1:CCSpriteBatchNode*_batchnode},${2:CCRect_rect},${3:bool_rotated},${4:CCRect_capInsets})" }
,
		{ "trigger": "CCScale9Sprite_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCScale9Sprite_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCScale9Sprite_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCScale9Sprite_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCScale9Sprite_initWithSpriteFrame(CCSpriteFrame*_spriteFrame,CCRect_capInsets,)", "contents": "initWithSpriteFrame(${1:CCSpriteFrame*_spriteFrame},${2:CCRect_capInsets})" }
,
		{ "trigger": "CCScale9Sprite_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCScale9Sprite_getInsetBottom()", "contents": "getInsetBottom()" }
,
		{ "trigger": "CCScale9Sprite_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCScale9Sprite_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCScale9Sprite_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCScale9Sprite_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCScale9Sprite_copy()", "contents": "copy()" }
,
		{ "trigger": "CCScale9Sprite_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCScale9Sprite_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCScale9Sprite_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCScale9Sprite_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCScale9Sprite_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCScale9Sprite_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCScale9Sprite_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCScale9Sprite_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCScale9Sprite_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCScale9Sprite_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCScale9Sprite_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCScale9Sprite_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCScale9Sprite_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCScale9Sprite_transform()", "contents": "transform()" }
,
		{ "trigger": "CCScale9Sprite_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCScale9Sprite_initWithFile(const_char*_file,CCRect_rect,)", "contents": "initWithFile(${1:const_char*_file},${2:CCRect_rect})" }
,
		{ "trigger": "CCScale9Sprite_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCScale9Sprite_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCScale9Sprite_visit()", "contents": "visit()" }
,
		{ "trigger": "CCScale9Sprite_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCScale9Sprite_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCScale9Sprite_getPreferredSize()", "contents": "getPreferredSize()" }
,
		{ "trigger": "CCScale9Sprite_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCScale9Sprite_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCScale9Sprite_release()", "contents": "release()" }
,
		{ "trigger": "CCScale9Sprite_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCScale9Sprite_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCScale9Sprite_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCScale9Sprite_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCScale9Sprite_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCScale9Sprite_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCScale9Sprite_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCScale9Sprite_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCScale9Sprite_initWithBatchNode(CCSpriteBatchNode*_batchnode,CCRect_rect,CCRect_capInsets,)", "contents": "initWithBatchNode(${1:CCSpriteBatchNode*_batchnode},${2:CCRect_rect},${3:CCRect_capInsets})" }
,
		{ "trigger": "CCScale9Sprite_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCScale9Sprite_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCScale9Sprite_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCScale9Sprite_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCScale9Sprite_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCScale9Sprite_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCScale9Sprite_setPreferredSize(CCSize_sz,)", "contents": "setPreferredSize(${1:CCSize_sz})" }
,
		{ "trigger": "CCScale9Sprite_setInsetRight(float_fRight,)", "contents": "setInsetRight(${1:float_fRight})" }
,
		{ "trigger": "CCScale9Sprite_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCScale9Sprite_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCScale9Sprite_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCScale9Sprite_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCScale9Sprite_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCScale9Sprite_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCScale9Sprite_initWithSpriteFrameName(const_char*spriteFrameName,CCRect_capInsets,)", "contents": "initWithSpriteFrameName(${1:const_char*spriteFrameName},${2:CCRect_capInsets})" }
,
		{ "trigger": "CCScale9Sprite_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCScale9Sprite_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCScale9Sprite_initWithFile(const_char*_file,CCRect_rect,CCRect_capInsets,)", "contents": "initWithFile(${1:const_char*_file},${2:CCRect_rect},${3:CCRect_capInsets})" }
,
		{ "trigger": "CCScale9Sprite_description()", "contents": "description()" }
,
		{ "trigger": "CCScale9Sprite_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCScale9Sprite_setInsetTop(float_fTop,)", "contents": "setInsetTop(${1:float_fTop})" }
,
		{ "trigger": "CCScale9Sprite_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCScale9Sprite_createWithSpriteFrame(CCSpriteFrame*_spriteFrame,)", "contents": "CCScale9Sprite:createWithSpriteFrame(${1:CCSpriteFrame*_spriteFrame})" }
,
		{ "trigger": "CCScale9Sprite_create(const_char*_file,CCRect_rect,)", "contents": "CCScale9Sprite:create(${1:const_char*_file},${2:CCRect_rect})" }
,
		{ "trigger": "CCScale9Sprite_createWithSpriteFrameName(const_char*spriteFrameName,)", "contents": "CCScale9Sprite:createWithSpriteFrameName(${1:const_char*spriteFrameName})" }
,
		{ "trigger": "CCScale9Sprite_create(const_char*_file,)", "contents": "CCScale9Sprite:create(${1:const_char*_file})" }
,
		{ "trigger": "CCScale9Sprite_createWithSpriteFrame(CCSpriteFrame*_spriteFrame,CCRect_capInsets,)", "contents": "CCScale9Sprite:createWithSpriteFrame(${1:CCSpriteFrame*_spriteFrame},${2:CCRect_capInsets})" }
,
		{ "trigger": "CCScale9Sprite_create(const_char*_file,CCRect_rect,CCRect_capInsets,)", "contents": "CCScale9Sprite:create(${1:const_char*_file},${2:CCRect_rect},${3:CCRect_capInsets})" }
,
		{ "trigger": "CCScale9Sprite_createWithSpriteFrameName(const_char*spriteFrameName,CCRect_capInsets,)", "contents": "CCScale9Sprite:createWithSpriteFrameName(${1:const_char*spriteFrameName},${2:CCRect_capInsets})" }
,
		{ "trigger": "CCScale9Sprite_create()", "contents": "CCScale9Sprite:create()" }
,
		{ "trigger": "CCScale9Sprite_create(CCRect_capInsets,const_char*_file,)", "contents": "CCScale9Sprite:create(${1:CCRect_capInsets},${2:const_char*_file})" }
,


		{ "trigger": "CCSkewTo_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCSkewTo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCSkewTo_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCSkewTo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCSkewTo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCSkewTo_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCSkewTo_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCSkewTo_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCSkewTo_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCSkewTo_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCSkewTo_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCSkewTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCSkewTo_release()", "contents": "release()" }
,
		{ "trigger": "CCSkewTo_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCSkewTo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCSkewTo_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCSkewTo_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCSkewTo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCSkewTo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCSkewTo_create(float_t,float_sx,float_sy,)", "contents": "CCSkewTo:create(${1:float_t},${2:float_sx},${3:float_sy})" }
,

		{ "trigger": "CCTransitionProgressHorizontal_create(float_t,CCScene*_scene,)", "contents": "CCTransitionProgressHorizontal:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCTimer_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTimer_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTimer_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTimer_update(float_dt,)", "contents": "update(${1:float_dt})" }
,
		{ "trigger": "CCTimer_setInterval(float_fInterval,)", "contents": "setInterval(${1:float_fInterval})" }
,
		{ "trigger": "CCTimer_getInterval()", "contents": "getInterval()" }
,
		{ "trigger": "CCTimer_release()", "contents": "release()" }
,
		{ "trigger": "CCTimer_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTimer_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTimer_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTimer_timerWithScriptHandler(LUA_FUNCTION_funcID,float_fSeconds,)", "contents": "CCTimer:timerWithScriptHandler(${1:LUA_FUNCTION_funcID},${2:float_fSeconds})" }
,

		{ "trigger": "Layout_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "Layout_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "Layout_getLeftInParent()", "contents": "getLeftInParent()" }
,
		{ "trigger": "Layout_setClippingEnabled(bool_enabled,)", "contents": "setClippingEnabled(${1:bool_enabled})" }
,
		{ "trigger": "Layout_setBackGroundColorOpacity(GLubyte_opacity,)", "contents": "setBackGroundColorOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "Layout_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "Layout_getVirtualRenderer()", "contents": "getVirtualRenderer()" }
,
		{ "trigger": "Layout_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "Layout_getBackGroundColorVector()", "contents": "getBackGroundColorVector()" }
,
		{ "trigger": "Layout_getNodes()", "contents": "getNodes()" }
,
		{ "trigger": "Layout_setFocused(bool_fucosed,)", "contents": "setFocused(${1:bool_fucosed})" }
,
		{ "trigger": "Layout_isBright()", "contents": "isBright()" }
,
		{ "trigger": "Layout_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "Layout_getLayoutParameter(LayoutParameterType_type,)", "contents": "getLayoutParameter(${1:LayoutParameterType_type})" }
,
		{ "trigger": "Layout_ignoreContentAdaptWithSize(bool_ignore,)", "contents": "ignoreContentAdaptWithSize(${1:bool_ignore})" }
,
		{ "trigger": "Layout_onTouchBegan(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchBegan(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "Layout_getBackGroundEndColor()", "contents": "getBackGroundEndColor()" }
,
		{ "trigger": "Layout_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "Layout_getSize()", "contents": "getSize()" }
,
		{ "trigger": "Layout_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "Layout_getLayoutSize()", "contents": "getLayoutSize()" }
,
		{ "trigger": "Layout_visit()", "contents": "visit()" }
,
		{ "trigger": "Layout_getTopInParent()", "contents": "getTopInParent()" }
,
		{ "trigger": "Layout_setBackGroundColor(const_ccColor3B_&startColor,const_ccColor3B_&endColor,)", "contents": "setBackGroundColor(${1:const_ccColor3B_&startColor},${2:const_ccColor3B_&endColor})" }
,
		{ "trigger": "Layout_requestDoLayout()", "contents": "requestDoLayout()" }
,
		{ "trigger": "Layout_disable()", "contents": "disable()" }
,
		{ "trigger": "Layout_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "Layout_didNotSelectSelf()", "contents": "didNotSelectSelf()" }
,
		{ "trigger": "Layout_setSizeType(SizeType_type,)", "contents": "setSizeType(${1:SizeType_type})" }
,
		{ "trigger": "Layout_getNodeByTag(int_tag,)", "contents": "getNodeByTag(${1:int_tag})" }
,
		{ "trigger": "Layout_setBackGroundColor(const_ccColor3B_&color,)", "contents": "setBackGroundColor(${1:const_ccColor3B_&color})" }
,
		{ "trigger": "Layout_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "Layout_getPositionPercent()", "contents": "getPositionPercent()" }
,
		{ "trigger": "Layout_getBottomInParent()", "contents": "getBottomInParent()" }
,
		{ "trigger": "Layout_setFlipY(bool_flipY,)", "contents": "setFlipY(${1:bool_flipY})" }
,
		{ "trigger": "Layout_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "Layout_setSize(const_CCSize_&size,)", "contents": "setSize(${1:const_CCSize_&size})" }
,
		{ "trigger": "Layout_clone()", "contents": "clone()" }
,
		{ "trigger": "Layout_onTouchEnded(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchEnded(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "Layout_removeChild(CCNode*_widget,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_widget},${2:bool_cleanup})" }
,
		{ "trigger": "Layout_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "Layout_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "Layout_getTouchEndPos()", "contents": "getTouchEndPos()" }
,
		{ "trigger": "Layout_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "Layout_onTouchMoved(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchMoved(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "Layout_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "Layout_isBackGroundImageScale9Enabled()", "contents": "isBackGroundImageScale9Enabled()" }
,
		{ "trigger": "Layout_setTouchEnabled(bool_enabled,)", "contents": "setTouchEnabled(${1:bool_enabled})" }
,
		{ "trigger": "Layout_setTouchEnable(bool_enabled,bool_containChildren_=_false,)", "contents": "setTouchEnable(${1:bool_enabled},${2:bool_containChildren_=_false})" }
,
		{ "trigger": "Layout_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "Layout_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "Layout_getBackGroundStartColor()", "contents": "getBackGroundStartColor()" }
,
		{ "trigger": "Layout_removeAllNodes()", "contents": "removeAllNodes()" }
,
		{ "trigger": "Layout_setBackGroundImageCapInsets(const_CCRect&_capInsets,)", "contents": "setBackGroundImageCapInsets(${1:const_CCRect&_capInsets})" }
,
		{ "trigger": "Layout_getWidgetByTag(int_tag,)", "contents": "getWidgetByTag(${1:int_tag})" }
,
		{ "trigger": "Layout_getChildByName(const_char*_name,)", "contents": "getChildByName(${1:const_char*_name})" }
,
		{ "trigger": "Layout_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "Layout_setBackGroundImageColor(const_ccColor3B&_color,)", "contents": "setBackGroundImageColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "Layout_getActionTag()", "contents": "getActionTag()" }
,
		{ "trigger": "Layout_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "Layout_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "Layout_getCustomSize()", "contents": "getCustomSize()" }
,
		{ "trigger": "Layout_setBackGroundColorType(LayoutBackGroundColorType_type,)", "contents": "setBackGroundColorType(${1:LayoutBackGroundColorType_type})" }
,
		{ "trigger": "Layout_setLayoutType(LayoutType_type,)", "contents": "setLayoutType(${1:LayoutType_type})" }
,
		{ "trigger": "Layout_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "Layout_getRightInParent()", "contents": "getRightInParent()" }
,
		{ "trigger": "Layout_getDescription()", "contents": "getDescription()" }
,
		{ "trigger": "Layout_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "Layout_getRect()", "contents": "getRect()" }
,
		{ "trigger": "Layout_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "Layout_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "Layout_draw()", "contents": "draw()" }
,
		{ "trigger": "Layout_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "Layout_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "Layout_getName()", "contents": "getName()" }
,
		{ "trigger": "Layout_setBackGroundImage(const_char*_fileName,TextureResType_texType_=_UI_TEX_TYPE_LOCAL,)", "contents": "setBackGroundImage(${1:const_char*_fileName},${2:TextureResType_texType_=_UI_TEX_TYPE_LOCAL})" }
,
		{ "trigger": "Layout_isClippingChange(bool_change,)", "contents": "isClippingChange(${1:bool_change})" }
,
		{ "trigger": "Layout_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "Layout_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "Layout_getWidgetType()", "contents": "getWidgetType()" }
,
		{ "trigger": "Layout_setSizePercent(const_CCPoint_&percent,)", "contents": "setSizePercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "Layout_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "Layout_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "Layout_addNode(CCNode*_node,)", "contents": "addNode(${1:CCNode*_node})" }
,
		{ "trigger": "Layout_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "Layout_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "Layout_setBackGroundImageOpacity(GLubyte_opacity,)", "contents": "setBackGroundImageOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "Layout_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "Layout_setBright(bool_bright,)", "contents": "setBright(${1:bool_bright})" }
,
		{ "trigger": "Layout_active()", "contents": "active()" }
,
		{ "trigger": "Layout_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "Layout_removeChild(CCNode*_child,)", "contents": "removeChild(${1:CCNode*_child})" }
,
		{ "trigger": "Layout_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "Layout_setBackGroundImageScale9Enabled(bool_enabled,)", "contents": "setBackGroundImageScale9Enabled(${1:bool_enabled})" }
,
		{ "trigger": "Layout_getTag()", "contents": "getTag()" }
,
		{ "trigger": "Layout_getClippingType()", "contents": "getClippingType()" }
,
		{ "trigger": "Layout_removeAllChildren()", "contents": "removeAllChildren()" }
,
		{ "trigger": "Layout_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "Layout_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "Layout_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "Layout_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "Layout_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "Layout_getBackGroundColor()", "contents": "getBackGroundColor()" }
,
		{ "trigger": "Layout_executeScriptEvent(int_eventName,)", "contents": "executeScriptEvent(${1:int_eventName})" }
,
		{ "trigger": "Layout_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "Layout_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "Layout_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "Layout_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "Layout_isFlipY()", "contents": "isFlipY()" }
,
		{ "trigger": "Layout_setBrightStyle(BrightStyle_style,)", "contents": "setBrightStyle(${1:BrightStyle_style})" }
,
		{ "trigger": "Layout_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "Layout_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "Layout_setPositionType(PositionType_type,)", "contents": "setPositionType(${1:PositionType_type})" }
,
		{ "trigger": "Layout_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "Layout_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "Layout_updateSizeAndPosition(const_CCSize&_parentSize,)", "contents": "updateSizeAndPosition(${1:const_CCSize&_parentSize})" }
,
		{ "trigger": "Layout_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "Layout_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "Layout_setLayoutParameter(LayoutParameter*_parameter,)", "contents": "setLayoutParameter(${1:LayoutParameter*_parameter})" }
,
		{ "trigger": "Layout_getColor()", "contents": "getColor()" }
,
		{ "trigger": "Layout_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "Layout_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "Layout_addNode(CCNode_*_node,int_zOrder,)", "contents": "addNode(${1:CCNode_*_node},${2:int_zOrder})" }
,
		{ "trigger": "Layout_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "Layout_getBackGroundColorType()", "contents": "getBackGroundColorType()" }
,
		{ "trigger": "Layout_hitTest(const_CCPoint_&pt,)", "contents": "hitTest(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "Layout_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "Layout_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "Layout_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "Layout_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "Layout_removeNodeByTag(int_tag,)", "contents": "removeNodeByTag(${1:int_tag})" }
,
		{ "trigger": "Layout_setPositionPercent(const_CCPoint_&percent,)", "contents": "setPositionPercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "Layout_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "Layout_getTouchMovePos()", "contents": "getTouchMovePos()" }
,
		{ "trigger": "Layout_copy()", "contents": "copy()" }
,
		{ "trigger": "Layout_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "Layout_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "Layout_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "Layout_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "Layout_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "Layout_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "Layout_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "Layout_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "Layout_getTouchStartPos()", "contents": "getTouchStartPos()" }
,
		{ "trigger": "Layout_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "Layout_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "Layout_clippingParentAreaContainPoint(const_CCPoint_&pt,)", "contents": "clippingParentAreaContainPoint(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "Layout_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "Layout_getBackGroundImageCapInsets()", "contents": "getBackGroundImageCapInsets()" }
,
		{ "trigger": "Layout_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "Layout_sortAllChildren()", "contents": "sortAllChildren()" }
,
		{ "trigger": "Layout_getSizePercent()", "contents": "getSizePercent()" }
,
		{ "trigger": "Layout_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "Layout_updateSizeAndPosition()", "contents": "updateSizeAndPosition()" }
,
		{ "trigger": "Layout_isFlipX()", "contents": "isFlipX()" }
,
		{ "trigger": "Layout_getParent()", "contents": "getParent()" }
,
		{ "trigger": "Layout_setName(const_char*_name,)", "contents": "setName(${1:const_char*_name})" }
,
		{ "trigger": "Layout_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "Layout_transform()", "contents": "transform()" }
,
		{ "trigger": "Layout_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "Layout_isFocused()", "contents": "isFocused()" }
,
		{ "trigger": "Layout_retain()", "contents": "retain()" }
,
		{ "trigger": "Layout_setSoundEff(std::string_eff,)", "contents": "setSoundEff(${1:std::string_eff})" }
,
		{ "trigger": "Layout_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "Layout_setBackGroundColorVector(const_CCPoint_&vector,)", "contents": "setBackGroundColorVector(${1:const_CCPoint_&vector})" }
,
		{ "trigger": "Layout_visit()", "contents": "visit()" }
,
		{ "trigger": "Layout_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "Layout_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "Layout_isClippingEnabled()", "contents": "isClippingEnabled()" }
,
		{ "trigger": "Layout_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "Layout_addNode(CCNode*_node,int_zOrder,int_tag,)", "contents": "addNode(${1:CCNode*_node},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "Layout_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "Layout_release()", "contents": "release()" }
,
		{ "trigger": "Layout_getBackGroundImageTextureSize()", "contents": "getBackGroundImageTextureSize()" }
,
		{ "trigger": "Layout_setActionTag(int_tag,)", "contents": "setActionTag(${1:int_tag})" }
,
		{ "trigger": "Layout_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "Layout_setFlipX(bool_flipX,)", "contents": "setFlipX(${1:bool_flipX})" }
,
		{ "trigger": "Layout_checkChildInfo(int_handleState,Widget*_sender,const_CCPoint_&touchPoint,)", "contents": "checkChildInfo(${1:int_handleState},${2:Widget*_sender},${3:const_CCPoint_&touchPoint})" }
,
		{ "trigger": "Layout_removeFromParent()", "contents": "removeFromParent()" }
,
		{ "trigger": "Layout_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "Layout_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "Layout_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "Layout_isIgnoreContentAdaptWithSize()", "contents": "isIgnoreContentAdaptWithSize()" }
,
		{ "trigger": "Layout_getBackGroundColorOpacity()", "contents": "getBackGroundColorOpacity()" }
,
		{ "trigger": "Layout_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "Layout_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "Layout_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "Layout_setClippingType(LayoutClippingType_type,)", "contents": "setClippingType(${1:LayoutClippingType_type})" }
,
		{ "trigger": "Layout_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "Layout_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "Layout_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "Layout_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "Layout_getScale()", "contents": "getScale()" }
,
		{ "trigger": "Layout_removeNode(CCNode*_node,)", "contents": "removeNode(${1:CCNode*_node})" }
,
		{ "trigger": "Layout_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "Layout_onExit()", "contents": "onExit()" }
,
		{ "trigger": "Layout_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "Layout_getBackGroundImageOpacity()", "contents": "getBackGroundImageOpacity()" }
,
		{ "trigger": "Layout_getBackGroundImageColor()", "contents": "getBackGroundImageColor()" }
,
		{ "trigger": "Layout_getWorldPosition()", "contents": "getWorldPosition()" }
,
		{ "trigger": "Layout_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "Layout_removeBackGroundImage()", "contents": "removeBackGroundImage()" }
,
		{ "trigger": "Layout_getLayoutType()", "contents": "getLayoutType()" }
,
		{ "trigger": "Layout_onTouchCancelled(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchCancelled(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "Layout_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "Layout_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "Layout_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "Layout_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "Layout_description()", "contents": "description()" }
,
		{ "trigger": "Layout_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "Layout_setPosition(const_CCPoint_&pos,)", "contents": "setPosition(${1:const_CCPoint_&pos})" }
,
		{ "trigger": "Layout_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "Layout_getSizeType()", "contents": "getSizeType()" }
,
		{ "trigger": "Layout_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "Layout_onEnter()", "contents": "onEnter()" }
,
		{ "trigger": "Layout_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "Layout_addChild(CCNode*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "Layout_create()", "contents": "Layout:create()" }
,

		{ "trigger": "CCProgressTimer_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCProgressTimer_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCProgressTimer_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCProgressTimer_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCProgressTimer_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCProgressTimer_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCProgressTimer_getSprite()", "contents": "getSprite()" }
,
		{ "trigger": "CCProgressTimer_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCProgressTimer_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCProgressTimer_init()", "contents": "init()" }
,
		{ "trigger": "CCProgressTimer_draw()", "contents": "draw()" }
,
		{ "trigger": "CCProgressTimer_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCProgressTimer_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCProgressTimer_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCProgressTimer_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCProgressTimer_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCProgressTimer_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCProgressTimer_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCProgressTimer_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCProgressTimer_visit()", "contents": "visit()" }
,
		{ "trigger": "CCProgressTimer_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCProgressTimer_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCProgressTimer_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCProgressTimer_getPercentage()", "contents": "getPercentage()" }
,
		{ "trigger": "CCProgressTimer_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCProgressTimer_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCProgressTimer_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCProgressTimer_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCProgressTimer_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCProgressTimer_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCProgressTimer_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCProgressTimer_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCProgressTimer_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCProgressTimer_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCProgressTimer_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCProgressTimer_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCProgressTimer_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCProgressTimer_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCProgressTimer_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCProgressTimer_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCProgressTimer_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCProgressTimer_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCProgressTimer_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCProgressTimer_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCProgressTimer_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCProgressTimer_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCProgressTimer_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCProgressTimer_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCProgressTimer_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCProgressTimer_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCProgressTimer_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCProgressTimer_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCProgressTimer_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCProgressTimer_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCProgressTimer_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCProgressTimer_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCProgressTimer_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCProgressTimer_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCProgressTimer_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCProgressTimer_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCProgressTimer_getType()", "contents": "getType()" }
,
		{ "trigger": "CCProgressTimer_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCProgressTimer_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCProgressTimer_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCProgressTimer_retain()", "contents": "retain()" }
,
		{ "trigger": "CCProgressTimer_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCProgressTimer_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCProgressTimer_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCProgressTimer_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCProgressTimer_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCProgressTimer_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCProgressTimer_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCProgressTimer_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCProgressTimer_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCProgressTimer_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCProgressTimer_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCProgressTimer_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCProgressTimer_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCProgressTimer_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCProgressTimer_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCProgressTimer_copy()", "contents": "copy()" }
,
		{ "trigger": "CCProgressTimer_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCProgressTimer_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCProgressTimer_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCProgressTimer_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCProgressTimer_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCProgressTimer_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCProgressTimer_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCProgressTimer_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCProgressTimer_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCProgressTimer_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCProgressTimer_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCProgressTimer_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCProgressTimer_transform()", "contents": "transform()" }
,
		{ "trigger": "CCProgressTimer_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCProgressTimer_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCProgressTimer_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCProgressTimer_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCProgressTimer_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCProgressTimer_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCProgressTimer_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCProgressTimer_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCProgressTimer_release()", "contents": "release()" }
,
		{ "trigger": "CCProgressTimer_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCProgressTimer_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCProgressTimer_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCProgressTimer_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCProgressTimer_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCProgressTimer_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCProgressTimer_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCProgressTimer_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCProgressTimer_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCProgressTimer_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCProgressTimer_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCProgressTimer_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCProgressTimer_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCProgressTimer_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCProgressTimer_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCProgressTimer_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCProgressTimer_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCProgressTimer_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCProgressTimer_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCProgressTimer_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCProgressTimer_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCProgressTimer_description()", "contents": "description()" }
,
		{ "trigger": "CCProgressTimer_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCProgressTimer_autorelease()", "contents": "autorelease()" }
,

		{ "trigger": "CCEaseBounceInOut_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseBounceInOut_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseBounceInOut_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseBounceInOut_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseBounceInOut_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseBounceInOut_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseBounceInOut_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseBounceInOut_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseBounceInOut_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseBounceInOut_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseBounceInOut_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseBounceInOut_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseBounceInOut_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseBounceInOut_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseBounceInOut_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseBounceInOut_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseBounceInOut_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseBounceInOut_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseBounceInOut_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseBounceInOut_create(CCActionInterval*_pAction,)", "contents": "CCEaseBounceInOut:create(${1:CCActionInterval*_pAction})" }
,

		{ "trigger": "CCTransitionFadeDown_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTransitionFadeDown_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTransitionFadeDown_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTransitionFadeDown_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTransitionFadeDown_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTransitionFadeDown_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTransitionFadeDown_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTransitionFadeDown_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTransitionFadeDown_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCTransitionFadeDown_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCTransitionFadeDown_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionFadeDown_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTransitionFadeDown_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTransitionFadeDown_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionFadeDown_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionFadeDown_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTransitionFadeDown_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFadeDown_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTransitionFadeDown_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCTransitionFadeDown_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFadeDown_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTransitionFadeDown_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionFadeDown_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTransitionFadeDown_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionFadeDown_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTransitionFadeDown_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTransitionFadeDown_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCTransitionFadeDown_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTransitionFadeDown_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTransitionFadeDown_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTransitionFadeDown_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTransitionFadeDown_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTransitionFadeDown_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTransitionFadeDown_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionFadeDown_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTransitionFadeDown_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTransitionFadeDown_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionFadeDown_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTransitionFadeDown_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTransitionFadeDown_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTransitionFadeDown_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTransitionFadeDown_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionFadeDown_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFadeDown_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionFadeDown_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTransitionFadeDown_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTransitionFadeDown_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTransitionFadeDown_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTransitionFadeDown_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTransitionFadeDown_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTransitionFadeDown_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTransitionFadeDown_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionFadeDown_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTransitionFadeDown_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTransitionFadeDown_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTransitionFadeDown_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTransitionFadeDown_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTransitionFadeDown_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTransitionFadeDown_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTransitionFadeDown_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTransitionFadeDown_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTransitionFadeDown_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionFadeDown_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTransitionFadeDown_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTransitionFadeDown_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTransitionFadeDown_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTransitionFadeDown_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTransitionFadeDown_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTransitionFadeDown_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTransitionFadeDown_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTransitionFadeDown_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionFadeDown_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTransitionFadeDown_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTransitionFadeDown_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTransitionFadeDown_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTransitionFadeDown_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionFadeDown_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTransitionFadeDown_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTransitionFadeDown_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTransitionFadeDown_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTransitionFadeDown_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTransitionFadeDown_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionFadeDown_release()", "contents": "release()" }
,
		{ "trigger": "CCTransitionFadeDown_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionFadeDown_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFadeDown_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionFadeDown_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTransitionFadeDown_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTransitionFadeDown_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTransitionFadeDown_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCTransitionFadeDown_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTransitionFadeDown_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTransitionFadeDown_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTransitionFadeDown_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTransitionFadeDown_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionFadeDown_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTransitionFadeDown_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTransitionFadeDown_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTransitionFadeDown_description()", "contents": "description()" }
,
		{ "trigger": "CCTransitionFadeDown_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTransitionFadeDown_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTransitionFadeDown_create(float_t,CCScene*_scene,)", "contents": "CCTransitionFadeDown:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCEGLViewProtocol_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCEGLViewProtocol_getVisibleOrigin()", "contents": "getVisibleOrigin()" }
,
		{ "trigger": "CCEGLViewProtocol_setFrameSize(float_width,float_height,)", "contents": "setFrameSize(${1:float_width},${2:float_height})" }
,
		{ "trigger": "CCEGLViewProtocol_setDesignResolutionSize(float_width,float_height,ResolutionPolicy_resolutionPolicy,)", "contents": "setDesignResolutionSize(${1:float_width},${2:float_height},${3:ResolutionPolicy_resolutionPolicy})" }
,
		{ "trigger": "CCEGLViewProtocol_getDesignResolutionSize()", "contents": "getDesignResolutionSize()" }
,
		{ "trigger": "CCEGLViewProtocol_getViewPortRect()", "contents": "getViewPortRect()" }
,
		{ "trigger": "CCEGLViewProtocol_getFrameSize()", "contents": "getFrameSize()" }
,
		{ "trigger": "CCEGLViewProtocol_setScissorInPoints(float_x_,float_y_,float_w_,float_h,)", "contents": "setScissorInPoints(${1:float_x_},${2:float_y_},${3:float_w_},${4:float_h})" }
,
		{ "trigger": "CCEGLViewProtocol_setViewPortInPoints(float_x_,float_y_,float_w_,float_h,)", "contents": "setViewPortInPoints(${1:float_x_},${2:float_y_},${3:float_w_},${4:float_h})" }
,
		{ "trigger": "CCEGLViewProtocol_setTouchDelegate(EGLTouchDelegate_*_pDelegate,)", "contents": "setTouchDelegate(${1:EGLTouchDelegate_*_pDelegate})" }
,
		{ "trigger": "CCEGLViewProtocol_getVisibleSize()", "contents": "getVisibleSize()" }
,
		{ "trigger": "CCEGLViewProtocol_getScaleX()", "contents": "getScaleX()" }
,

		{ "trigger": "CCString_uintValue()", "contents": "uintValue()" }
,
		{ "trigger": "CCString_copy()", "contents": "copy()" }
,
		{ "trigger": "CCString_doubleValue()", "contents": "doubleValue()" }
,
		{ "trigger": "CCString_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCString_boolValue()", "contents": "boolValue()" }
,
		{ "trigger": "CCString_getCString()", "contents": "getCString()" }
,
		{ "trigger": "CCString_floatValue()", "contents": "floatValue()" }
,
		{ "trigger": "CCString_length()", "contents": "length()" }
,
		{ "trigger": "CCString_release()", "contents": "release()" }
,
		{ "trigger": "CCString_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCString_compare(const_char*_str,)", "contents": "compare(${1:const_char*_str})" }
,
		{ "trigger": "CCString_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCString_intValue()", "contents": "intValue()" }
,
		{ "trigger": "CCString_retain()", "contents": "retain()" }
,
		{ "trigger": "CCString_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCString_create(const_char*_pStr,)", "contents": "CCString:create(${1:const_char*_pStr})" }
,
		{ "trigger": "CCString_createWithContentsOfFile(const_char*_pszFileName,)", "contents": "CCString:createWithContentsOfFile(${1:const_char*_pszFileName})" }
,
		{ "trigger": "CCString_createWithData(unsigned_char*_pData,unsigned_long_nLen,)", "contents": "CCString:createWithData(${1:unsigned_char*_pData},${2:unsigned_long_nLen})" }
,

		{ "trigger": "CCRenderTexture_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCRenderTexture_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCRenderTexture_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCRenderTexture_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCRenderTexture_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCRenderTexture_draw()", "contents": "draw()" }
,
		{ "trigger": "CCRenderTexture_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCRenderTexture_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCRenderTexture_setSprite(CCSprite*_psprite,)", "contents": "setSprite(${1:CCSprite*_psprite})" }
,
		{ "trigger": "CCRenderTexture_clearDepth(float_depthValue,)", "contents": "clearDepth(${1:float_depthValue})" }
,
		{ "trigger": "CCRenderTexture_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCRenderTexture_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCRenderTexture_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCRenderTexture_visit()", "contents": "visit()" }
,
		{ "trigger": "CCRenderTexture_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCRenderTexture_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCRenderTexture_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCRenderTexture_beginWithClear(float_r,float_g,float_b,float_a,float_depthValue,)", "contents": "beginWithClear(${1:float_r},${2:float_g},${3:float_b},${4:float_a},${5:float_depthValue})" }
,
		{ "trigger": "CCRenderTexture_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCRenderTexture_clear(float_r,float_g,float_b,float_a,)", "contents": "clear(${1:float_r},${2:float_g},${3:float_b},${4:float_a})" }
,
		{ "trigger": "CCRenderTexture_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCRenderTexture_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCRenderTexture_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCRenderTexture_beginWithClear(float_r,float_g,float_b,float_a,float_depthValue,int_stencilValue,)", "contents": "beginWithClear(${1:float_r},${2:float_g},${3:float_b},${4:float_a},${5:float_depthValue},${6:int_stencilValue})" }
,
		{ "trigger": "CCRenderTexture_transform()", "contents": "transform()" }
,
		{ "trigger": "CCRenderTexture_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCRenderTexture_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCRenderTexture_clearStencil(int_stencilValue,)", "contents": "clearStencil(${1:int_stencilValue})" }
,
		{ "trigger": "CCRenderTexture_getSprite()", "contents": "getSprite()" }
,
		{ "trigger": "CCRenderTexture_saveToFile(const_char_*szFilePath,)", "contents": "saveToFile(${1:const_char_*szFilePath})" }
,
		{ "trigger": "CCRenderTexture_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCRenderTexture_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCRenderTexture_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCRenderTexture_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCRenderTexture_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCRenderTexture_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCRenderTexture_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCRenderTexture_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCRenderTexture_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCRenderTexture_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCRenderTexture_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCRenderTexture_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCRenderTexture_beginWithClear(float_r,float_g,float_b,float_a,)", "contents": "beginWithClear(${1:float_r},${2:float_g},${3:float_b},${4:float_a})" }
,
		{ "trigger": "CCRenderTexture_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCRenderTexture_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCRenderTexture_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCRenderTexture_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCRenderTexture_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCRenderTexture_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCRenderTexture_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCRenderTexture_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCRenderTexture_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCRenderTexture_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCRenderTexture_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCRenderTexture_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCRenderTexture_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCRenderTexture_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCRenderTexture_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCRenderTexture_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCRenderTexture_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCRenderTexture_retain()", "contents": "retain()" }
,
		{ "trigger": "CCRenderTexture_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCRenderTexture_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCRenderTexture_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCRenderTexture_begin()", "contents": "begin()" }
,
		{ "trigger": "CCRenderTexture_saveToFile(const_char_*name,tCCImageFormat_format,)", "contents": "saveToFile(${1:const_char_*name},${2:tCCImageFormat_format})" }
,
		{ "trigger": "CCRenderTexture_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCRenderTexture_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCRenderTexture_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCRenderTexture_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCRenderTexture_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCRenderTexture_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCRenderTexture_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCRenderTexture_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCRenderTexture_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCRenderTexture_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCRenderTexture_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCRenderTexture_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCRenderTexture_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCRenderTexture_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCRenderTexture_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCRenderTexture_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCRenderTexture_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCRenderTexture_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCRenderTexture_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCRenderTexture_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCRenderTexture_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCRenderTexture_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCRenderTexture_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCRenderTexture_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCRenderTexture_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCRenderTexture_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCRenderTexture_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCRenderTexture_release()", "contents": "release()" }
,
		{ "trigger": "CCRenderTexture_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCRenderTexture_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCRenderTexture_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCRenderTexture_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCRenderTexture_newCCImage()", "contents": "newCCImage()" }
,
		{ "trigger": "CCRenderTexture_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCRenderTexture_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCRenderTexture_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCRenderTexture_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCRenderTexture_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCRenderTexture_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCRenderTexture_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCRenderTexture_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCRenderTexture_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCRenderTexture_copy()", "contents": "copy()" }
,
		{ "trigger": "CCRenderTexture_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCRenderTexture_description()", "contents": "description()" }
,
		{ "trigger": "CCRenderTexture_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCRenderTexture_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCRenderTexture_create(int_w_,int_h,CCTexture2DPixelFormat_eFormat,GLuint_uDepthStencilFormat,)", "contents": "CCRenderTexture:create(${1:int_w_},${2:int_h},${3:CCTexture2DPixelFormat_eFormat},${4:GLuint_uDepthStencilFormat})" }
,
		{ "trigger": "CCRenderTexture_create(int_w,int_h,CCTexture2DPixelFormat_eFormat,)", "contents": "CCRenderTexture:create(${1:int_w},${2:int_h},${3:CCTexture2DPixelFormat_eFormat})" }
,
		{ "trigger": "CCRenderTexture_create(int_w,int_h,)", "contents": "CCRenderTexture:create(${1:int_w},${2:int_h})" }
,

		{ "trigger": "CCTransitionSplitRows_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTransitionSplitRows_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTransitionSplitRows_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTransitionSplitRows_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTransitionSplitRows_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTransitionSplitRows_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTransitionSplitRows_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTransitionSplitRows_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTransitionSplitRows_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCTransitionSplitRows_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCTransitionSplitRows_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionSplitRows_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTransitionSplitRows_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTransitionSplitRows_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionSplitRows_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionSplitRows_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTransitionSplitRows_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionSplitRows_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTransitionSplitRows_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCTransitionSplitRows_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionSplitRows_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTransitionSplitRows_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionSplitRows_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTransitionSplitRows_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionSplitRows_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTransitionSplitRows_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTransitionSplitRows_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCTransitionSplitRows_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTransitionSplitRows_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTransitionSplitRows_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTransitionSplitRows_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTransitionSplitRows_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTransitionSplitRows_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTransitionSplitRows_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionSplitRows_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTransitionSplitRows_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTransitionSplitRows_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionSplitRows_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTransitionSplitRows_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTransitionSplitRows_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTransitionSplitRows_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTransitionSplitRows_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionSplitRows_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionSplitRows_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionSplitRows_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTransitionSplitRows_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTransitionSplitRows_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTransitionSplitRows_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTransitionSplitRows_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTransitionSplitRows_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTransitionSplitRows_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTransitionSplitRows_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionSplitRows_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTransitionSplitRows_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTransitionSplitRows_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTransitionSplitRows_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTransitionSplitRows_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTransitionSplitRows_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTransitionSplitRows_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTransitionSplitRows_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTransitionSplitRows_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTransitionSplitRows_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionSplitRows_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTransitionSplitRows_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTransitionSplitRows_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTransitionSplitRows_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTransitionSplitRows_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTransitionSplitRows_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTransitionSplitRows_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTransitionSplitRows_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTransitionSplitRows_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionSplitRows_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTransitionSplitRows_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTransitionSplitRows_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTransitionSplitRows_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTransitionSplitRows_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionSplitRows_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTransitionSplitRows_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTransitionSplitRows_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTransitionSplitRows_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTransitionSplitRows_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTransitionSplitRows_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionSplitRows_release()", "contents": "release()" }
,
		{ "trigger": "CCTransitionSplitRows_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionSplitRows_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionSplitRows_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionSplitRows_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTransitionSplitRows_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTransitionSplitRows_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTransitionSplitRows_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCTransitionSplitRows_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTransitionSplitRows_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTransitionSplitRows_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTransitionSplitRows_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTransitionSplitRows_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionSplitRows_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTransitionSplitRows_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTransitionSplitRows_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTransitionSplitRows_description()", "contents": "description()" }
,
		{ "trigger": "CCTransitionSplitRows_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTransitionSplitRows_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTransitionSplitRows_create(float_t,CCScene*_scene,)", "contents": "CCTransitionSplitRows:create(${1:float_t},${2:CCScene*_scene})" }
,


		{ "trigger": "CCApplication_getTargetPlatform()", "contents": "getTargetPlatform()" }
,
		{ "trigger": "CCApplication_getCurrentLanguage()", "contents": "getCurrentLanguage()" }
,
		{ "trigger": "CCApplication_sharedApplication()", "contents": "CCApplication:sharedApplication()" }
,

		{ "trigger": "SceneReader_getNodeByTag(int_nTag,)", "contents": "getNodeByTag(${1:int_nTag})" }
,
		{ "trigger": "SceneReader_purge()", "contents": "purge()" }
,
		{ "trigger": "SceneReader_sceneReaderVersion()", "contents": "sceneReaderVersion()" }
,
		{ "trigger": "SceneReader_createNodeWithSceneFile(const_char_*pszFileName,AttachComponentType_eAttachComponent_=_ATTACH_EMPTY_NODE,)", "contents": "createNodeWithSceneFile(${1:const_char_*pszFileName},${2:AttachComponentType_eAttachComponent_=_ATTACH_EMPTY_NODE})" }
,
		{ "trigger": "SceneReader_sharedSceneReader()", "contents": "SceneReader:sharedSceneReader()" }
,

		{ "trigger": "CCFadeTo_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCFadeTo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCFadeTo_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCFadeTo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCFadeTo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCFadeTo_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCFadeTo_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCFadeTo_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCFadeTo_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCFadeTo_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCFadeTo_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCFadeTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCFadeTo_release()", "contents": "release()" }
,
		{ "trigger": "CCFadeTo_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCFadeTo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCFadeTo_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCFadeTo_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCFadeTo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCFadeTo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCFadeTo_create(float_duration,GLubyte_opacity,)", "contents": "CCFadeTo:create(${1:float_duration},${2:GLubyte_opacity})" }
,

		{ "trigger": "CCEaseBackInOut_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseBackInOut_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseBackInOut_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseBackInOut_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseBackInOut_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseBackInOut_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseBackInOut_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseBackInOut_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseBackInOut_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseBackInOut_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseBackInOut_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseBackInOut_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseBackInOut_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseBackInOut_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseBackInOut_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseBackInOut_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseBackInOut_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseBackInOut_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseBackInOut_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseBackInOut_create(CCActionInterval*_pAction,)", "contents": "CCEaseBackInOut:create(${1:CCActionInterval*_pAction})" }
,

		{ "trigger": "CCEaseBounce_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseBounce_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseBounce_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseBounce_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseBounce_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseBounce_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseBounce_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseBounce_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseBounce_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseBounce_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseBounce_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseBounce_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseBounce_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseBounce_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseBounce_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseBounce_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseBounce_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseBounce_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseBounce_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseBounce_create(CCActionInterval*_pAction,)", "contents": "CCEaseBounce:create(${1:CCActionInterval*_pAction})" }
,

		{ "trigger": "LoadingBar_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "LoadingBar_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "LoadingBar_getBottomInParent()", "contents": "getBottomInParent()" }
,
		{ "trigger": "LoadingBar_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "LoadingBar_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "LoadingBar_getVirtualRenderer()", "contents": "getVirtualRenderer()" }
,
		{ "trigger": "LoadingBar_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "LoadingBar_executeScriptEvent(int_eventName,)", "contents": "executeScriptEvent(${1:int_eventName})" }
,
		{ "trigger": "LoadingBar_draw()", "contents": "draw()" }
,
		{ "trigger": "LoadingBar_setPercent(int_percent,)", "contents": "setPercent(${1:int_percent})" }
,
		{ "trigger": "LoadingBar_isBright()", "contents": "isBright()" }
,
		{ "trigger": "LoadingBar_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "LoadingBar_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "LoadingBar_ignoreContentAdaptWithSize(bool_ignore,)", "contents": "ignoreContentAdaptWithSize(${1:bool_ignore})" }
,
		{ "trigger": "LoadingBar_onTouchBegan(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchBegan(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "LoadingBar_loadTexture(const_char*_texture,TextureResType_texType_=_UI_TEX_TYPE_LOCAL,)", "contents": "loadTexture(${1:const_char*_texture},${2:TextureResType_texType_=_UI_TEX_TYPE_LOCAL})" }
,
		{ "trigger": "LoadingBar_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "LoadingBar_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "LoadingBar_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "LoadingBar_getLayoutSize()", "contents": "getLayoutSize()" }
,
		{ "trigger": "LoadingBar_visit()", "contents": "visit()" }
,
		{ "trigger": "LoadingBar_getTopInParent()", "contents": "getTopInParent()" }
,
		{ "trigger": "LoadingBar_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "LoadingBar_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "LoadingBar_didNotSelectSelf()", "contents": "didNotSelectSelf()" }
,
		{ "trigger": "LoadingBar_setSizeType(SizeType_type,)", "contents": "setSizeType(${1:SizeType_type})" }
,
		{ "trigger": "LoadingBar_getNodeByTag(int_tag,)", "contents": "getNodeByTag(${1:int_tag})" }
,
		{ "trigger": "LoadingBar_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "LoadingBar_getPositionPercent()", "contents": "getPositionPercent()" }
,
		{ "trigger": "LoadingBar_setPosition(const_CCPoint_&pos,)", "contents": "setPosition(${1:const_CCPoint_&pos})" }
,
		{ "trigger": "LoadingBar_setFlipY(bool_flipY,)", "contents": "setFlipY(${1:bool_flipY})" }
,
		{ "trigger": "LoadingBar_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "LoadingBar_setSize(const_CCSize_&size,)", "contents": "setSize(${1:const_CCSize_&size})" }
,
		{ "trigger": "LoadingBar_clone()", "contents": "clone()" }
,
		{ "trigger": "LoadingBar_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "LoadingBar_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "LoadingBar_setDirection(LoadingBarType_dir,)", "contents": "setDirection(${1:LoadingBarType_dir})" }
,
		{ "trigger": "LoadingBar_onTouchEnded(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchEnded(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "LoadingBar_onTouchMoved(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchMoved(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "LoadingBar_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "LoadingBar_setFlipX(bool_flipX,)", "contents": "setFlipX(${1:bool_flipX})" }
,
		{ "trigger": "LoadingBar_setTouchEnabled(bool_enabled,)", "contents": "setTouchEnabled(${1:bool_enabled})" }
,
		{ "trigger": "LoadingBar_setCapInsets(const_CCRect_&capInsets,)", "contents": "setCapInsets(${1:const_CCRect_&capInsets})" }
,
		{ "trigger": "LoadingBar_setTouchEnable(bool_enabled,bool_containChildren_=_false,)", "contents": "setTouchEnable(${1:bool_enabled},${2:bool_containChildren_=_false})" }
,
		{ "trigger": "LoadingBar_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "LoadingBar_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "LoadingBar_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "LoadingBar_removeAllNodes()", "contents": "removeAllNodes()" }
,
		{ "trigger": "LoadingBar_getLayoutParameter(LayoutParameterType_type,)", "contents": "getLayoutParameter(${1:LayoutParameterType_type})" }
,
		{ "trigger": "LoadingBar_getPercent()", "contents": "getPercent()" }
,
		{ "trigger": "LoadingBar_getChildByName(const_char*_name,)", "contents": "getChildByName(${1:const_char*_name})" }
,
		{ "trigger": "LoadingBar_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "LoadingBar_getTouchEndPos()", "contents": "getTouchEndPos()" }
,
		{ "trigger": "LoadingBar_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "LoadingBar_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "LoadingBar_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "LoadingBar_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "LoadingBar_getRightInParent()", "contents": "getRightInParent()" }
,
		{ "trigger": "LoadingBar_getDescription()", "contents": "getDescription()" }
,
		{ "trigger": "LoadingBar_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "LoadingBar_getRect()", "contents": "getRect()" }
,
		{ "trigger": "LoadingBar_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "LoadingBar_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "LoadingBar_isFlipX()", "contents": "isFlipX()" }
,
		{ "trigger": "LoadingBar_disable()", "contents": "disable()" }
,
		{ "trigger": "LoadingBar_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "LoadingBar_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "LoadingBar_getName()", "contents": "getName()" }
,
		{ "trigger": "LoadingBar_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "LoadingBar_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "LoadingBar_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "LoadingBar_getWidgetType()", "contents": "getWidgetType()" }
,
		{ "trigger": "LoadingBar_getNodes()", "contents": "getNodes()" }
,
		{ "trigger": "LoadingBar_setSizePercent(const_CCPoint_&percent,)", "contents": "setSizePercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "LoadingBar_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "LoadingBar_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "LoadingBar_addNode(CCNode*_node,)", "contents": "addNode(${1:CCNode*_node})" }
,
		{ "trigger": "LoadingBar_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "LoadingBar_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "LoadingBar_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "LoadingBar_setBright(bool_bright,)", "contents": "setBright(${1:bool_bright})" }
,
		{ "trigger": "LoadingBar_active()", "contents": "active()" }
,
		{ "trigger": "LoadingBar_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "LoadingBar_removeChild(CCNode*_child,)", "contents": "removeChild(${1:CCNode*_child})" }
,
		{ "trigger": "LoadingBar_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "LoadingBar_getTag()", "contents": "getTag()" }
,
		{ "trigger": "LoadingBar_setScale9Enabled(bool_enabled,)", "contents": "setScale9Enabled(${1:bool_enabled})" }
,
		{ "trigger": "LoadingBar_removeAllChildren()", "contents": "removeAllChildren()" }
,
		{ "trigger": "LoadingBar_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "LoadingBar_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "LoadingBar_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "LoadingBar_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "LoadingBar_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "LoadingBar_setFocused(bool_fucosed,)", "contents": "setFocused(${1:bool_fucosed})" }
,
		{ "trigger": "LoadingBar_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "LoadingBar_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "LoadingBar_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "LoadingBar_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "LoadingBar_isFlipY()", "contents": "isFlipY()" }
,
		{ "trigger": "LoadingBar_setBrightStyle(BrightStyle_style,)", "contents": "setBrightStyle(${1:BrightStyle_style})" }
,
		{ "trigger": "LoadingBar_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "LoadingBar_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "LoadingBar_retain()", "contents": "retain()" }
,
		{ "trigger": "LoadingBar_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "LoadingBar_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "LoadingBar_updateSizeAndPosition(const_CCSize&_parentSize,)", "contents": "updateSizeAndPosition(${1:const_CCSize&_parentSize})" }
,
		{ "trigger": "LoadingBar_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "LoadingBar_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "LoadingBar_setLayoutParameter(LayoutParameter*_parameter,)", "contents": "setLayoutParameter(${1:LayoutParameter*_parameter})" }
,
		{ "trigger": "LoadingBar_getColor()", "contents": "getColor()" }
,
		{ "trigger": "LoadingBar_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "LoadingBar_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "LoadingBar_addNode(CCNode_*_node,int_zOrder,)", "contents": "addNode(${1:CCNode_*_node},${2:int_zOrder})" }
,
		{ "trigger": "LoadingBar_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "LoadingBar_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "LoadingBar_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "LoadingBar_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "LoadingBar_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "LoadingBar_removeNodeByTag(int_tag,)", "contents": "removeNodeByTag(${1:int_tag})" }
,
		{ "trigger": "LoadingBar_setPositionPercent(const_CCPoint_&percent,)", "contents": "setPositionPercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "LoadingBar_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "LoadingBar_getSize()", "contents": "getSize()" }
,
		{ "trigger": "LoadingBar_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "LoadingBar_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "LoadingBar_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "LoadingBar_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "LoadingBar_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "LoadingBar_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "LoadingBar_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "LoadingBar_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "LoadingBar_getTouchMovePos()", "contents": "getTouchMovePos()" }
,
		{ "trigger": "LoadingBar_getTouchStartPos()", "contents": "getTouchStartPos()" }
,
		{ "trigger": "LoadingBar_hitTest(const_CCPoint_&pt,)", "contents": "hitTest(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "LoadingBar_clippingParentAreaContainPoint(const_CCPoint_&pt,)", "contents": "clippingParentAreaContainPoint(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "LoadingBar_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "LoadingBar_sortAllChildren()", "contents": "sortAllChildren()" }
,
		{ "trigger": "LoadingBar_getSizePercent()", "contents": "getSizePercent()" }
,
		{ "trigger": "LoadingBar_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "LoadingBar_updateSizeAndPosition()", "contents": "updateSizeAndPosition()" }
,
		{ "trigger": "LoadingBar_getWidgetByTag(int_tag,)", "contents": "getWidgetByTag(${1:int_tag})" }
,
		{ "trigger": "LoadingBar_getParent()", "contents": "getParent()" }
,
		{ "trigger": "LoadingBar_setName(const_char*_name,)", "contents": "setName(${1:const_char*_name})" }
,
		{ "trigger": "LoadingBar_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "LoadingBar_transform()", "contents": "transform()" }
,
		{ "trigger": "LoadingBar_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "LoadingBar_isFocused()", "contents": "isFocused()" }
,
		{ "trigger": "LoadingBar_setSoundEff(std::string_eff,)", "contents": "setSoundEff(${1:std::string_eff})" }
,
		{ "trigger": "LoadingBar_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "LoadingBar_visit()", "contents": "visit()" }
,
		{ "trigger": "LoadingBar_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "LoadingBar_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "LoadingBar_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "LoadingBar_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "LoadingBar_addNode(CCNode*_node,int_zOrder,int_tag,)", "contents": "addNode(${1:CCNode*_node},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "LoadingBar_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "LoadingBar_getActionTag()", "contents": "getActionTag()" }
,
		{ "trigger": "LoadingBar_release()", "contents": "release()" }
,
		{ "trigger": "LoadingBar_setActionTag(int_tag,)", "contents": "setActionTag(${1:int_tag})" }
,
		{ "trigger": "LoadingBar_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "LoadingBar_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "LoadingBar_checkChildInfo(int_handleState,Widget*_sender,const_CCPoint_&touchPoint,)", "contents": "checkChildInfo(${1:int_handleState},${2:Widget*_sender},${3:const_CCPoint_&touchPoint})" }
,
		{ "trigger": "LoadingBar_removeFromParent()", "contents": "removeFromParent()" }
,
		{ "trigger": "LoadingBar_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "LoadingBar_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "LoadingBar_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "LoadingBar_getDirection()", "contents": "getDirection()" }
,
		{ "trigger": "LoadingBar_isIgnoreContentAdaptWithSize()", "contents": "isIgnoreContentAdaptWithSize()" }
,
		{ "trigger": "LoadingBar_getLeftInParent()", "contents": "getLeftInParent()" }
,
		{ "trigger": "LoadingBar_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "LoadingBar_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "LoadingBar_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "LoadingBar_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "LoadingBar_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "LoadingBar_getScale()", "contents": "getScale()" }
,
		{ "trigger": "LoadingBar_removeNode(CCNode*_node,)", "contents": "removeNode(${1:CCNode*_node})" }
,
		{ "trigger": "LoadingBar_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "LoadingBar_onExit()", "contents": "onExit()" }
,
		{ "trigger": "LoadingBar_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "LoadingBar_getWorldPosition()", "contents": "getWorldPosition()" }
,
		{ "trigger": "LoadingBar_copy()", "contents": "copy()" }
,
		{ "trigger": "LoadingBar_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "LoadingBar_setPositionType(PositionType_type,)", "contents": "setPositionType(${1:PositionType_type})" }
,
		{ "trigger": "LoadingBar_onTouchCancelled(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchCancelled(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "LoadingBar_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "LoadingBar_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "LoadingBar_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "LoadingBar_description()", "contents": "description()" }
,
		{ "trigger": "LoadingBar_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "LoadingBar_getSizeType()", "contents": "getSizeType()" }
,
		{ "trigger": "LoadingBar_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "LoadingBar_onEnter()", "contents": "onEnter()" }
,
		{ "trigger": "LoadingBar_getCustomSize()", "contents": "getCustomSize()" }
,
		{ "trigger": "LoadingBar_addChild(CCNode*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "LoadingBar_create()", "contents": "LoadingBar:create()" }
,

		{ "trigger": "CCEaseExponentialOut_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseExponentialOut_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseExponentialOut_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseExponentialOut_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseExponentialOut_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseExponentialOut_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseExponentialOut_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseExponentialOut_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseExponentialOut_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseExponentialOut_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseExponentialOut_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseExponentialOut_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseExponentialOut_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseExponentialOut_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseExponentialOut_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseExponentialOut_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseExponentialOut_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseExponentialOut_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseExponentialOut_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseExponentialOut_create(CCActionInterval*_pAction,)", "contents": "CCEaseExponentialOut:create(${1:CCActionInterval*_pAction})" }
,



		{ "trigger": "CCFlipX3D_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCFlipX3D_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCFlipX3D_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCFlipX3D_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCFlipX3D_release()", "contents": "release()" }
,
		{ "trigger": "CCFlipX3D_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCFlipX3D_retain()", "contents": "retain()" }
,
		{ "trigger": "CCFlipX3D_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCFlipX3D_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCFlipX3D_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCFlipX3D_vertex(const_CCPoint&_pos,)", "contents": "vertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCFlipX3D_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCFlipX3D_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCFlipX3D_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCFlipX3D_copy()", "contents": "copy()" }
,
		{ "trigger": "CCFlipX3D_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCFlipX3D_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCFlipX3D_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCFlipX3D_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCFlipX3D_setVertex(const_CCPoint&_pos,const_ccVertex3F&_vertex,)", "contents": "setVertex(${1:const_CCPoint&_pos},${2:const_ccVertex3F&_vertex})" }
,
		{ "trigger": "CCFlipX3D_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCFlipX3D_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCFlipX3D_originalVertex(const_CCPoint&_pos,)", "contents": "originalVertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCFlipX3D_create(float_duration,)", "contents": "CCFlipX3D:create(${1:float_duration})" }
,

		{ "trigger": "MGNNetAgent_connect(const_char*_ip,unsigned_short_port,)", "contents": "connect(${1:const_char*_ip},${2:unsigned_short_port})" }
,
		{ "trigger": "MGNNetAgent_httpSocketCallBack(CCNode*_c,void*_data,)", "contents": "httpSocketCallBack(${1:CCNode*_c},${2:void*_data})" }
,
		{ "trigger": "MGNNetAgent_send(unsigned_int_msgId,const_char*_buf,int_len,int_flags_=_0,)", "contents": "send(${1:unsigned_int_msgId},${2:const_char*_buf},${3:int_len},${4:int_flags_=_0})" }
,
		{ "trigger": "MGNNetAgent_close()", "contents": "close()" }
,
		{ "trigger": "MGNNetAgent_unRegisterLoginScriptEvent()", "contents": "unRegisterLoginScriptEvent()" }
,
		{ "trigger": "MGNNetAgent_unRegisterSocketScriptEvent()", "contents": "unRegisterSocketScriptEvent()" }
,
		{ "trigger": "MGNNetAgent_sendHttpMsg(std::string_http,)", "contents": "sendHttpMsg(${1:std::string_http})" }
,
		{ "trigger": "MGNNetAgent_recv(int_id,const_char*_data,int_len,)", "contents": "recv(${1:int_id},${2:const_char*_data},${3:int_len})" }
,
		{ "trigger": "MGNNetAgent_registerSocketScriptEvent(LUA_FUNCTION_nHandler,)", "contents": "registerSocketScriptEvent(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "MGNNetAgent_executeLoginScriptEvent(bool_bSucceed,char*_data,)", "contents": "executeLoginScriptEvent(${1:bool_bSucceed},${2:char*_data})" }
,
		{ "trigger": "MGNNetAgent_registerLoginScriptEvent(LUA_FUNCTION_nHandler,std::string_http,)", "contents": "registerLoginScriptEvent(${1:LUA_FUNCTION_nHandler},${2:std::string_http})" }
,
		{ "trigger": "MGNNetAgent_getInstance()", "contents": "MGNNetAgent:getInstance()" }
,

		{ "trigger": "CCEaseBounceIn_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseBounceIn_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseBounceIn_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseBounceIn_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseBounceIn_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseBounceIn_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseBounceIn_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseBounceIn_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseBounceIn_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseBounceIn_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseBounceIn_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseBounceIn_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseBounceIn_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseBounceIn_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseBounceIn_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseBounceIn_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseBounceIn_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseBounceIn_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseBounceIn_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseBounceIn_create(CCActionInterval*_pAction,)", "contents": "CCEaseBounceIn:create(${1:CCActionInterval*_pAction})" }
,

		{ "trigger": "CCTransitionZoomFlipX_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTransitionZoomFlipX_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTransitionZoomFlipX_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTransitionZoomFlipX_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTransitionZoomFlipX_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTransitionZoomFlipX_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTransitionZoomFlipX_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionZoomFlipX_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTransitionZoomFlipX_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTransitionZoomFlipX_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionZoomFlipX_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionZoomFlipX_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTransitionZoomFlipX_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionZoomFlipX_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCTransitionZoomFlipX_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionZoomFlipX_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTransitionZoomFlipX_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionZoomFlipX_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTransitionZoomFlipX_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTransitionZoomFlipX_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTransitionZoomFlipX_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTransitionZoomFlipX_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTransitionZoomFlipX_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionZoomFlipX_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTransitionZoomFlipX_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTransitionZoomFlipX_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTransitionZoomFlipX_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionZoomFlipX_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionZoomFlipX_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTransitionZoomFlipX_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTransitionZoomFlipX_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTransitionZoomFlipX_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTransitionZoomFlipX_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTransitionZoomFlipX_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionZoomFlipX_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTransitionZoomFlipX_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTransitionZoomFlipX_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTransitionZoomFlipX_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTransitionZoomFlipX_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTransitionZoomFlipX_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTransitionZoomFlipX_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionZoomFlipX_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTransitionZoomFlipX_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTransitionZoomFlipX_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTransitionZoomFlipX_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTransitionZoomFlipX_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTransitionZoomFlipX_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTransitionZoomFlipX_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTransitionZoomFlipX_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTransitionZoomFlipX_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTransitionZoomFlipX_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTransitionZoomFlipX_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTransitionZoomFlipX_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionZoomFlipX_release()", "contents": "release()" }
,
		{ "trigger": "CCTransitionZoomFlipX_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionZoomFlipX_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionZoomFlipX_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTransitionZoomFlipX_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTransitionZoomFlipX_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTransitionZoomFlipX_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCTransitionZoomFlipX_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTransitionZoomFlipX_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTransitionZoomFlipX_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTransitionZoomFlipX_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTransitionZoomFlipX_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTransitionZoomFlipX_description()", "contents": "description()" }
,
		{ "trigger": "CCTransitionZoomFlipX_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTransitionZoomFlipX_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTransitionZoomFlipX_create(float_t,CCScene*_s,tOrientation_o_=_kCCTransitionOrientationRightOver,)", "contents": "CCTransitionZoomFlipX:create(${1:float_t},${2:CCScene*_s},${3:tOrientation_o_=_kCCTransitionOrientationRightOver})" }
,

		{ "trigger": "CCTransitionProgressRadialCCW_create(float_t,CCScene*_scene,)", "contents": "CCTransitionProgressRadialCCW:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCTwirl_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCTwirl_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTwirl_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTwirl_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCTwirl_release()", "contents": "release()" }
,
		{ "trigger": "CCTwirl_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCTwirl_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCTwirl_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTwirl_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCTwirl_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCTwirl_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCTwirl_vertex(const_CCPoint&_pos,)", "contents": "vertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCTwirl_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTwirl_setAmplitude(float_fAmplitude,)", "contents": "setAmplitude(${1:float_fAmplitude})" }
,
		{ "trigger": "CCTwirl_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTwirl_getAmplitude()", "contents": "getAmplitude()" }
,
		{ "trigger": "CCTwirl_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTwirl_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCTwirl_setAmplitudeRate(float_fAmplitudeRate,)", "contents": "setAmplitudeRate(${1:float_fAmplitudeRate})" }
,
		{ "trigger": "CCTwirl_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTwirl_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTwirl_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCTwirl_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCTwirl_setVertex(const_CCPoint&_pos,const_ccVertex3F&_vertex,)", "contents": "setVertex(${1:const_CCPoint&_pos},${2:const_ccVertex3F&_vertex})" }
,
		{ "trigger": "CCTwirl_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCTwirl_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCTwirl_originalVertex(const_CCPoint&_pos,)", "contents": "originalVertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCTwirl_create(float_duration,CCSize_gridSize,CCPoint_position,unsigned_int_twirls,float_amplitude,)", "contents": "CCTwirl:create(${1:float_duration},${2:CCSize_gridSize},${3:CCPoint_position},${4:unsigned_int_twirls},${5:float_amplitude})" }
,

		{ "trigger": "CCRepeat_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCRepeat_copy()", "contents": "copy()" }
,
		{ "trigger": "CCRepeat_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCRepeat_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCRepeat_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCRepeat_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCRepeat_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCRepeat_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCRepeat_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCRepeat_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCRepeat_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCRepeat_retain()", "contents": "retain()" }
,
		{ "trigger": "CCRepeat_release()", "contents": "release()" }
,
		{ "trigger": "CCRepeat_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCRepeat_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCRepeat_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCRepeat_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCRepeat_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCRepeat_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCRepeat_create(CCFiniteTimeAction_*pAction,unsigned_int_times,)", "contents": "CCRepeat:create(${1:CCFiniteTimeAction_*pAction},${2:unsigned_int_times})" }
,

		{ "trigger": "RichElementCustomNode_copy()", "contents": "copy()" }
,
		{ "trigger": "RichElementCustomNode_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "RichElementCustomNode_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "RichElementCustomNode_init(int_tag,const_ccColor3B&_color,GLubyte_opacity,CCNode*_customNode,)", "contents": "init(${1:int_tag},${2:const_ccColor3B&_color},${3:GLubyte_opacity},${4:CCNode*_customNode})" }
,
		{ "trigger": "RichElementCustomNode_release()", "contents": "release()" }
,
		{ "trigger": "RichElementCustomNode_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "RichElementCustomNode_retain()", "contents": "retain()" }
,
		{ "trigger": "RichElementCustomNode_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "RichElementCustomNode_create(int_tag,const_ccColor3B&_color,GLubyte_opacity,CCNode*_customNode,)", "contents": "RichElementCustomNode:create(${1:int_tag},${2:const_ccColor3B&_color},${3:GLubyte_opacity},${4:CCNode*_customNode})" }
,

		{ "trigger": "SimpleAudioEngine_resumeEffect(unsigned_int_nSoundId,)", "contents": "resumeEffect(${1:unsigned_int_nSoundId})" }
,
		{ "trigger": "SimpleAudioEngine_playBackgroundMusic(const_char*_pszFilePath,bool_bLoop_=_false,)", "contents": "playBackgroundMusic(${1:const_char*_pszFilePath},${2:bool_bLoop_=_false})" }
,
		{ "trigger": "SimpleAudioEngine_pauseEffect(unsigned_int_nSoundId,)", "contents": "pauseEffect(${1:unsigned_int_nSoundId})" }
,
		{ "trigger": "SimpleAudioEngine_resumeAllEffects()", "contents": "resumeAllEffects()" }
,
		{ "trigger": "SimpleAudioEngine_isBackgroundMusicPlaying()", "contents": "isBackgroundMusicPlaying()" }
,
		{ "trigger": "SimpleAudioEngine_resumeBackgroundMusic()", "contents": "resumeBackgroundMusic()" }
,
		{ "trigger": "SimpleAudioEngine_preloadBackgroundMusic(const_char*_pszFilePath,)", "contents": "preloadBackgroundMusic(${1:const_char*_pszFilePath})" }
,
		{ "trigger": "SimpleAudioEngine_stopBackgroundMusic(bool_bReleaseData_=_false,)", "contents": "stopBackgroundMusic(${1:bool_bReleaseData_=_false})" }
,
		{ "trigger": "SimpleAudioEngine_stopEffect(unsigned_int_nSoundId,)", "contents": "stopEffect(${1:unsigned_int_nSoundId})" }
,
		{ "trigger": "SimpleAudioEngine_getBackgroundMusicVolume()", "contents": "getBackgroundMusicVolume()" }
,
		{ "trigger": "SimpleAudioEngine_willPlayBackgroundMusic()", "contents": "willPlayBackgroundMusic()" }
,
		{ "trigger": "SimpleAudioEngine_rewindBackgroundMusic()", "contents": "rewindBackgroundMusic()" }
,
		{ "trigger": "SimpleAudioEngine_stopAllEffects()", "contents": "stopAllEffects()" }
,
		{ "trigger": "SimpleAudioEngine_setOpenState(bool_state,)", "contents": "setOpenState(${1:bool_state})" }
,
		{ "trigger": "SimpleAudioEngine_unloadEffect(const_char*_pszFilePath,)", "contents": "unloadEffect(${1:const_char*_pszFilePath})" }
,
		{ "trigger": "SimpleAudioEngine_pauseBackgroundMusic()", "contents": "pauseBackgroundMusic()" }
,
		{ "trigger": "SimpleAudioEngine_setEffectsVolume(float_volume,)", "contents": "setEffectsVolume(${1:float_volume})" }
,
		{ "trigger": "SimpleAudioEngine_setBackgroundMusicVolume(float_volume,)", "contents": "setBackgroundMusicVolume(${1:float_volume})" }
,
		{ "trigger": "SimpleAudioEngine_pauseAllEffects()", "contents": "pauseAllEffects()" }
,
		{ "trigger": "SimpleAudioEngine_preloadEffect(const_char*_pszFilePath,)", "contents": "preloadEffect(${1:const_char*_pszFilePath})" }
,
		{ "trigger": "SimpleAudioEngine_playEffect(const_char*_pszFilePath,bool_bLoop_=_false,)", "contents": "playEffect(${1:const_char*_pszFilePath},${2:bool_bLoop_=_false})" }
,
		{ "trigger": "SimpleAudioEngine_getEffectsVolume()", "contents": "getEffectsVolume()" }
,
		{ "trigger": "SimpleAudioEngine_sharedEngine()", "contents": "SimpleAudioEngine:sharedEngine()" }
,

		{ "trigger": "CCBezierTo_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCBezierTo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCBezierTo_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCBezierTo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCBezierTo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCBezierTo_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCBezierTo_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCBezierTo_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCBezierTo_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCBezierTo_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCBezierTo_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCBezierTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCBezierTo_release()", "contents": "release()" }
,
		{ "trigger": "CCBezierTo_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCBezierTo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCBezierTo_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCBezierTo_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCBezierTo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCBezierTo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCBezierTo_create(float_t,ccBezierConfig_c,)", "contents": "CCBezierTo:create(${1:float_t},${2:ccBezierConfig_c})" }
,

		{ "trigger": "LabelBMFont_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "LabelBMFont_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "LabelBMFont_getBottomInParent()", "contents": "getBottomInParent()" }
,
		{ "trigger": "LabelBMFont_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "LabelBMFont_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "LabelBMFont_getVirtualRenderer()", "contents": "getVirtualRenderer()" }
,
		{ "trigger": "LabelBMFont_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "LabelBMFont_executeScriptEvent(int_eventName,)", "contents": "executeScriptEvent(${1:int_eventName})" }
,
		{ "trigger": "LabelBMFont_draw()", "contents": "draw()" }
,
		{ "trigger": "LabelBMFont_getNodes()", "contents": "getNodes()" }
,
		{ "trigger": "LabelBMFont_isBright()", "contents": "isBright()" }
,
		{ "trigger": "LabelBMFont_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "LabelBMFont_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "LabelBMFont_ignoreContentAdaptWithSize(bool_ignore,)", "contents": "ignoreContentAdaptWithSize(${1:bool_ignore})" }
,
		{ "trigger": "LabelBMFont_onTouchBegan(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchBegan(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "LabelBMFont_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "LabelBMFont_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "LabelBMFont_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "LabelBMFont_getLayoutSize()", "contents": "getLayoutSize()" }
,
		{ "trigger": "LabelBMFont_setFntFile(const_char*_fileName,)", "contents": "setFntFile(${1:const_char*_fileName})" }
,
		{ "trigger": "LabelBMFont_visit()", "contents": "visit()" }
,
		{ "trigger": "LabelBMFont_getTopInParent()", "contents": "getTopInParent()" }
,
		{ "trigger": "LabelBMFont_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "LabelBMFont_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "LabelBMFont_didNotSelectSelf()", "contents": "didNotSelectSelf()" }
,
		{ "trigger": "LabelBMFont_setSizeType(SizeType_type,)", "contents": "setSizeType(${1:SizeType_type})" }
,
		{ "trigger": "LabelBMFont_getNodeByTag(int_tag,)", "contents": "getNodeByTag(${1:int_tag})" }
,
		{ "trigger": "LabelBMFont_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "LabelBMFont_getPositionPercent()", "contents": "getPositionPercent()" }
,
		{ "trigger": "LabelBMFont_setPosition(const_CCPoint_&pos,)", "contents": "setPosition(${1:const_CCPoint_&pos})" }
,
		{ "trigger": "LabelBMFont_setFlipY(bool_flipY,)", "contents": "setFlipY(${1:bool_flipY})" }
,
		{ "trigger": "LabelBMFont_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "LabelBMFont_setSize(const_CCSize_&size,)", "contents": "setSize(${1:const_CCSize_&size})" }
,
		{ "trigger": "LabelBMFont_clone()", "contents": "clone()" }
,
		{ "trigger": "LabelBMFont_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "LabelBMFont_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "LabelBMFont_getTouchEndPos()", "contents": "getTouchEndPos()" }
,
		{ "trigger": "LabelBMFont_onTouchEnded(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchEnded(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "LabelBMFont_onTouchMoved(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchMoved(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "LabelBMFont_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "LabelBMFont_setFlipX(bool_flipX,)", "contents": "setFlipX(${1:bool_flipX})" }
,
		{ "trigger": "LabelBMFont_setTouchEnabled(bool_enabled,)", "contents": "setTouchEnabled(${1:bool_enabled})" }
,
		{ "trigger": "LabelBMFont_setTouchEnable(bool_enabled,bool_containChildren_=_false,)", "contents": "setTouchEnable(${1:bool_enabled},${2:bool_containChildren_=_false})" }
,
		{ "trigger": "LabelBMFont_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "LabelBMFont_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "LabelBMFont_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "LabelBMFont_removeAllNodes()", "contents": "removeAllNodes()" }
,
		{ "trigger": "LabelBMFont_getLayoutParameter(LayoutParameterType_type,)", "contents": "getLayoutParameter(${1:LayoutParameterType_type})" }
,
		{ "trigger": "LabelBMFont_getChildByName(const_char*_name,)", "contents": "getChildByName(${1:const_char*_name})" }
,
		{ "trigger": "LabelBMFont_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "LabelBMFont_setAnchorPoint(const_CCPoint_&pt,)", "contents": "setAnchorPoint(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "LabelBMFont_setText(const_char*_value,)", "contents": "setText(${1:const_char*_value})" }
,
		{ "trigger": "LabelBMFont_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "LabelBMFont_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "LabelBMFont_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "LabelBMFont_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "LabelBMFont_getRightInParent()", "contents": "getRightInParent()" }
,
		{ "trigger": "LabelBMFont_getDescription()", "contents": "getDescription()" }
,
		{ "trigger": "LabelBMFont_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "LabelBMFont_getRect()", "contents": "getRect()" }
,
		{ "trigger": "LabelBMFont_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "LabelBMFont_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "LabelBMFont_isFlipX()", "contents": "isFlipX()" }
,
		{ "trigger": "LabelBMFont_disable()", "contents": "disable()" }
,
		{ "trigger": "LabelBMFont_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "LabelBMFont_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "LabelBMFont_getName()", "contents": "getName()" }
,
		{ "trigger": "LabelBMFont_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "LabelBMFont_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "LabelBMFont_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "LabelBMFont_getWidgetType()", "contents": "getWidgetType()" }
,
		{ "trigger": "LabelBMFont_setSizePercent(const_CCPoint_&percent,)", "contents": "setSizePercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "LabelBMFont_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "LabelBMFont_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "LabelBMFont_addNode(CCNode*_node,)", "contents": "addNode(${1:CCNode*_node})" }
,
		{ "trigger": "LabelBMFont_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "LabelBMFont_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "LabelBMFont_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "LabelBMFont_setBright(bool_bright,)", "contents": "setBright(${1:bool_bright})" }
,
		{ "trigger": "LabelBMFont_active()", "contents": "active()" }
,
		{ "trigger": "LabelBMFont_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "LabelBMFont_removeChild(CCNode*_child,)", "contents": "removeChild(${1:CCNode*_child})" }
,
		{ "trigger": "LabelBMFont_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "LabelBMFont_getTag()", "contents": "getTag()" }
,
		{ "trigger": "LabelBMFont_removeAllChildren()", "contents": "removeAllChildren()" }
,
		{ "trigger": "LabelBMFont_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "LabelBMFont_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "LabelBMFont_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "LabelBMFont_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "LabelBMFont_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "LabelBMFont_setFocused(bool_fucosed,)", "contents": "setFocused(${1:bool_fucosed})" }
,
		{ "trigger": "LabelBMFont_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "LabelBMFont_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "LabelBMFont_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "LabelBMFont_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "LabelBMFont_isFlipY()", "contents": "isFlipY()" }
,
		{ "trigger": "LabelBMFont_setBrightStyle(BrightStyle_style,)", "contents": "setBrightStyle(${1:BrightStyle_style})" }
,
		{ "trigger": "LabelBMFont_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "LabelBMFont_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "LabelBMFont_retain()", "contents": "retain()" }
,
		{ "trigger": "LabelBMFont_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "LabelBMFont_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "LabelBMFont_updateSizeAndPosition(const_CCSize&_parentSize,)", "contents": "updateSizeAndPosition(${1:const_CCSize&_parentSize})" }
,
		{ "trigger": "LabelBMFont_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "LabelBMFont_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "LabelBMFont_setLayoutParameter(LayoutParameter*_parameter,)", "contents": "setLayoutParameter(${1:LayoutParameter*_parameter})" }
,
		{ "trigger": "LabelBMFont_getColor()", "contents": "getColor()" }
,
		{ "trigger": "LabelBMFont_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "LabelBMFont_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "LabelBMFont_addNode(CCNode_*_node,int_zOrder,)", "contents": "addNode(${1:CCNode_*_node},${2:int_zOrder})" }
,
		{ "trigger": "LabelBMFont_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "LabelBMFont_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "LabelBMFont_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "LabelBMFont_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "LabelBMFont_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "LabelBMFont_removeNodeByTag(int_tag,)", "contents": "removeNodeByTag(${1:int_tag})" }
,
		{ "trigger": "LabelBMFont_setPositionPercent(const_CCPoint_&percent,)", "contents": "setPositionPercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "LabelBMFont_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "LabelBMFont_getSize()", "contents": "getSize()" }
,
		{ "trigger": "LabelBMFont_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "LabelBMFont_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "LabelBMFont_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "LabelBMFont_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "LabelBMFont_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "LabelBMFont_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "LabelBMFont_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "LabelBMFont_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "LabelBMFont_getTouchMovePos()", "contents": "getTouchMovePos()" }
,
		{ "trigger": "LabelBMFont_getTouchStartPos()", "contents": "getTouchStartPos()" }
,
		{ "trigger": "LabelBMFont_hitTest(const_CCPoint_&pt,)", "contents": "hitTest(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "LabelBMFont_clippingParentAreaContainPoint(const_CCPoint_&pt,)", "contents": "clippingParentAreaContainPoint(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "LabelBMFont_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "LabelBMFont_sortAllChildren()", "contents": "sortAllChildren()" }
,
		{ "trigger": "LabelBMFont_getSizePercent()", "contents": "getSizePercent()" }
,
		{ "trigger": "LabelBMFont_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "LabelBMFont_updateSizeAndPosition()", "contents": "updateSizeAndPosition()" }
,
		{ "trigger": "LabelBMFont_getWidgetByTag(int_tag,)", "contents": "getWidgetByTag(${1:int_tag})" }
,
		{ "trigger": "LabelBMFont_getParent()", "contents": "getParent()" }
,
		{ "trigger": "LabelBMFont_setName(const_char*_name,)", "contents": "setName(${1:const_char*_name})" }
,
		{ "trigger": "LabelBMFont_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "LabelBMFont_transform()", "contents": "transform()" }
,
		{ "trigger": "LabelBMFont_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "LabelBMFont_isFocused()", "contents": "isFocused()" }
,
		{ "trigger": "LabelBMFont_setSoundEff(std::string_eff,)", "contents": "setSoundEff(${1:std::string_eff})" }
,
		{ "trigger": "LabelBMFont_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "LabelBMFont_visit()", "contents": "visit()" }
,
		{ "trigger": "LabelBMFont_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "LabelBMFont_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "LabelBMFont_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "LabelBMFont_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "LabelBMFont_addNode(CCNode*_node,int_zOrder,int_tag,)", "contents": "addNode(${1:CCNode*_node},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "LabelBMFont_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "LabelBMFont_getActionTag()", "contents": "getActionTag()" }
,
		{ "trigger": "LabelBMFont_release()", "contents": "release()" }
,
		{ "trigger": "LabelBMFont_setActionTag(int_tag,)", "contents": "setActionTag(${1:int_tag})" }
,
		{ "trigger": "LabelBMFont_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "LabelBMFont_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "LabelBMFont_checkChildInfo(int_handleState,Widget*_sender,const_CCPoint_&touchPoint,)", "contents": "checkChildInfo(${1:int_handleState},${2:Widget*_sender},${3:const_CCPoint_&touchPoint})" }
,
		{ "trigger": "LabelBMFont_removeFromParent()", "contents": "removeFromParent()" }
,
		{ "trigger": "LabelBMFont_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "LabelBMFont_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "LabelBMFont_getStringValue()", "contents": "getStringValue()" }
,
		{ "trigger": "LabelBMFont_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "LabelBMFont_isIgnoreContentAdaptWithSize()", "contents": "isIgnoreContentAdaptWithSize()" }
,
		{ "trigger": "LabelBMFont_getLeftInParent()", "contents": "getLeftInParent()" }
,
		{ "trigger": "LabelBMFont_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "LabelBMFont_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "LabelBMFont_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "LabelBMFont_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "LabelBMFont_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "LabelBMFont_getScale()", "contents": "getScale()" }
,
		{ "trigger": "LabelBMFont_removeNode(CCNode*_node,)", "contents": "removeNode(${1:CCNode*_node})" }
,
		{ "trigger": "LabelBMFont_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "LabelBMFont_onExit()", "contents": "onExit()" }
,
		{ "trigger": "LabelBMFont_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "LabelBMFont_getWorldPosition()", "contents": "getWorldPosition()" }
,
		{ "trigger": "LabelBMFont_copy()", "contents": "copy()" }
,
		{ "trigger": "LabelBMFont_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "LabelBMFont_setPositionType(PositionType_type,)", "contents": "setPositionType(${1:PositionType_type})" }
,
		{ "trigger": "LabelBMFont_onTouchCancelled(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchCancelled(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "LabelBMFont_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "LabelBMFont_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "LabelBMFont_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "LabelBMFont_description()", "contents": "description()" }
,
		{ "trigger": "LabelBMFont_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "LabelBMFont_getSizeType()", "contents": "getSizeType()" }
,
		{ "trigger": "LabelBMFont_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "LabelBMFont_onEnter()", "contents": "onEnter()" }
,
		{ "trigger": "LabelBMFont_getCustomSize()", "contents": "getCustomSize()" }
,
		{ "trigger": "LabelBMFont_addChild(CCNode*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "LabelBMFont_create()", "contents": "LabelBMFont:create()" }
,

		{ "trigger": "Slider_loadProgressBarTexture(const_char*_fileName,TextureResType_texType_=_UI_TEX_TYPE_LOCAL,)", "contents": "loadProgressBarTexture(${1:const_char*_fileName},${2:TextureResType_texType_=_UI_TEX_TYPE_LOCAL})" }
,
		{ "trigger": "Slider_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "Slider_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "Slider_getBottomInParent()", "contents": "getBottomInParent()" }
,
		{ "trigger": "Slider_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "Slider_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "Slider_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "Slider_getVirtualRenderer()", "contents": "getVirtualRenderer()" }
,
		{ "trigger": "Slider_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "Slider_draw()", "contents": "draw()" }
,
		{ "trigger": "Slider_setPercent(int_percent,)", "contents": "setPercent(${1:int_percent})" }
,
		{ "trigger": "Slider_setScale9Enabled(bool_able,)", "contents": "setScale9Enabled(${1:bool_able})" }
,
		{ "trigger": "Slider_isBright()", "contents": "isBright()" }
,
		{ "trigger": "Slider_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "Slider_getLayoutParameter(LayoutParameterType_type,)", "contents": "getLayoutParameter(${1:LayoutParameterType_type})" }
,
		{ "trigger": "Slider_ignoreContentAdaptWithSize(bool_ignore,)", "contents": "ignoreContentAdaptWithSize(${1:bool_ignore})" }
,
		{ "trigger": "Slider_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "Slider_loadSlidBallTextureDisabled(const_char*_disabled,TextureResType_texType_=_UI_TEX_TYPE_LOCAL,)", "contents": "loadSlidBallTextureDisabled(${1:const_char*_disabled},${2:TextureResType_texType_=_UI_TEX_TYPE_LOCAL})" }
,
		{ "trigger": "Slider_getSize()", "contents": "getSize()" }
,
		{ "trigger": "Slider_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "Slider_getLayoutSize()", "contents": "getLayoutSize()" }
,
		{ "trigger": "Slider_visit()", "contents": "visit()" }
,
		{ "trigger": "Slider_getCapInsetBarRenderer()", "contents": "getCapInsetBarRenderer()" }
,
		{ "trigger": "Slider_getTopInParent()", "contents": "getTopInParent()" }
,
		{ "trigger": "Slider_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "Slider_disable()", "contents": "disable()" }
,
		{ "trigger": "Slider_didNotSelectSelf()", "contents": "didNotSelectSelf()" }
,
		{ "trigger": "Slider_setSizeType(SizeType_type,)", "contents": "setSizeType(${1:SizeType_type})" }
,
		{ "trigger": "Slider_getNodeByTag(int_tag,)", "contents": "getNodeByTag(${1:int_tag})" }
,
		{ "trigger": "Slider_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "Slider_getPositionPercent()", "contents": "getPositionPercent()" }
,
		{ "trigger": "Slider_setPosition(const_CCPoint_&pos,)", "contents": "setPosition(${1:const_CCPoint_&pos})" }
,
		{ "trigger": "Slider_setFlipY(bool_flipY,)", "contents": "setFlipY(${1:bool_flipY})" }
,
		{ "trigger": "Slider_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "Slider_setSize(const_CCSize_&size,)", "contents": "setSize(${1:const_CCSize_&size})" }
,
		{ "trigger": "Slider_clone()", "contents": "clone()" }
,
		{ "trigger": "Slider_onTouchEnded(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchEnded(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "Slider_loadBarTexture(const_char*_fileName,TextureResType_texType_=_UI_TEX_TYPE_LOCAL,)", "contents": "loadBarTexture(${1:const_char*_fileName},${2:TextureResType_texType_=_UI_TEX_TYPE_LOCAL})" }
,
		{ "trigger": "Slider_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "Slider_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "Slider_getTouchEndPos()", "contents": "getTouchEndPos()" }
,
		{ "trigger": "Slider_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "Slider_onTouchMoved(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchMoved(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "Slider_loadSlidBallTexturePressed(const_char*_pressed,TextureResType_texType_=_UI_TEX_TYPE_LOCAL,)", "contents": "loadSlidBallTexturePressed(${1:const_char*_pressed},${2:TextureResType_texType_=_UI_TEX_TYPE_LOCAL})" }
,
		{ "trigger": "Slider_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "Slider_setTouchEnabled(bool_enabled,)", "contents": "setTouchEnabled(${1:bool_enabled})" }
,
		{ "trigger": "Slider_setCapInsets(const_CCRect_&capInsets,)", "contents": "setCapInsets(${1:const_CCRect_&capInsets})" }
,
		{ "trigger": "Slider_setTouchEnable(bool_enabled,bool_containChildren_=_false,)", "contents": "setTouchEnable(${1:bool_enabled},${2:bool_containChildren_=_false})" }
,
		{ "trigger": "Slider_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "Slider_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "Slider_setCapInsetProgressBarRebderer(const_CCRect_&capInsets,)", "contents": "setCapInsetProgressBarRebderer(${1:const_CCRect_&capInsets})" }
,
		{ "trigger": "Slider_addNode(CCNode_*_node,int_zOrder,)", "contents": "addNode(${1:CCNode_*_node},${2:int_zOrder})" }
,
		{ "trigger": "Slider_removeAllNodes()", "contents": "removeAllNodes()" }
,
		{ "trigger": "Slider_getWidgetByTag(int_tag,)", "contents": "getWidgetByTag(${1:int_tag})" }
,
		{ "trigger": "Slider_getPercent()", "contents": "getPercent()" }
,
		{ "trigger": "Slider_getChildByName(const_char*_name,)", "contents": "getChildByName(${1:const_char*_name})" }
,
		{ "trigger": "Slider_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "Slider_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "Slider_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "Slider_getCustomSize()", "contents": "getCustomSize()" }
,
		{ "trigger": "Slider_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "Slider_getRightInParent()", "contents": "getRightInParent()" }
,
		{ "trigger": "Slider_getDescription()", "contents": "getDescription()" }
,
		{ "trigger": "Slider_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "Slider_getRect()", "contents": "getRect()" }
,
		{ "trigger": "Slider_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "Slider_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "Slider_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "Slider_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "Slider_getName()", "contents": "getName()" }
,
		{ "trigger": "Slider_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "Slider_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "Slider_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "Slider_getWidgetType()", "contents": "getWidgetType()" }
,
		{ "trigger": "Slider_getNodes()", "contents": "getNodes()" }
,
		{ "trigger": "Slider_setSizePercent(const_CCPoint_&percent,)", "contents": "setSizePercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "Slider_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "Slider_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "Slider_addNode(CCNode*_node,)", "contents": "addNode(${1:CCNode*_node})" }
,
		{ "trigger": "Slider_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "Slider_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "Slider_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "Slider_setBright(bool_bright,)", "contents": "setBright(${1:bool_bright})" }
,
		{ "trigger": "Slider_active()", "contents": "active()" }
,
		{ "trigger": "Slider_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "Slider_removeChild(CCNode*_child,)", "contents": "removeChild(${1:CCNode*_child})" }
,
		{ "trigger": "Slider_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "Slider_getTag()", "contents": "getTag()" }
,
		{ "trigger": "Slider_removeAllChildren()", "contents": "removeAllChildren()" }
,
		{ "trigger": "Slider_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "Slider_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "Slider_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "Slider_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "Slider_loadSlidBallTextureNormal(const_char*_normal,TextureResType_texType_=_UI_TEX_TYPE_LOCAL,)", "contents": "loadSlidBallTextureNormal(${1:const_char*_normal},${2:TextureResType_texType_=_UI_TEX_TYPE_LOCAL})" }
,
		{ "trigger": "Slider_getCapInsetProgressBarRebderer()", "contents": "getCapInsetProgressBarRebderer()" }
,
		{ "trigger": "Slider_setFocused(bool_fucosed,)", "contents": "setFocused(${1:bool_fucosed})" }
,
		{ "trigger": "Slider_executeScriptEvent(int_eventName,)", "contents": "executeScriptEvent(${1:int_eventName})" }
,
		{ "trigger": "Slider_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "Slider_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "Slider_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "Slider_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "Slider_isFlipY()", "contents": "isFlipY()" }
,
		{ "trigger": "Slider_setBrightStyle(BrightStyle_style,)", "contents": "setBrightStyle(${1:BrightStyle_style})" }
,
		{ "trigger": "Slider_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "Slider_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "Slider_setPositionType(PositionType_type,)", "contents": "setPositionType(${1:PositionType_type})" }
,
		{ "trigger": "Slider_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "Slider_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "Slider_updateSizeAndPosition(const_CCSize&_parentSize,)", "contents": "updateSizeAndPosition(${1:const_CCSize&_parentSize})" }
,
		{ "trigger": "Slider_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "Slider_isScale9Enabled()", "contents": "isScale9Enabled()" }
,
		{ "trigger": "Slider_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "Slider_setLayoutParameter(LayoutParameter*_parameter,)", "contents": "setLayoutParameter(${1:LayoutParameter*_parameter})" }
,
		{ "trigger": "Slider_getColor()", "contents": "getColor()" }
,
		{ "trigger": "Slider_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "Slider_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "Slider_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "Slider_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "Slider_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "Slider_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "Slider_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "Slider_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "Slider_removeNodeByTag(int_tag,)", "contents": "removeNodeByTag(${1:int_tag})" }
,
		{ "trigger": "Slider_setPositionPercent(const_CCPoint_&percent,)", "contents": "setPositionPercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "Slider_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "Slider_getTouchMovePos()", "contents": "getTouchMovePos()" }
,
		{ "trigger": "Slider_copy()", "contents": "copy()" }
,
		{ "trigger": "Slider_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "Slider_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "Slider_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "Slider_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "Slider_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "Slider_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "Slider_setCapInsetsBarRenderer(const_CCRect_&capInsets,)", "contents": "setCapInsetsBarRenderer(${1:const_CCRect_&capInsets})" }
,
		{ "trigger": "Slider_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "Slider_onTouchBegan(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchBegan(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "Slider_getTouchStartPos()", "contents": "getTouchStartPos()" }
,
		{ "trigger": "Slider_hitTest(const_CCPoint_&pt,)", "contents": "hitTest(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "Slider_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "Slider_sortAllChildren()", "contents": "sortAllChildren()" }
,
		{ "trigger": "Slider_getSizePercent()", "contents": "getSizePercent()" }
,
		{ "trigger": "Slider_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "Slider_updateSizeAndPosition()", "contents": "updateSizeAndPosition()" }
,
		{ "trigger": "Slider_isFlipX()", "contents": "isFlipX()" }
,
		{ "trigger": "Slider_getParent()", "contents": "getParent()" }
,
		{ "trigger": "Slider_setName(const_char*_name,)", "contents": "setName(${1:const_char*_name})" }
,
		{ "trigger": "Slider_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "Slider_transform()", "contents": "transform()" }
,
		{ "trigger": "Slider_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "Slider_isFocused()", "contents": "isFocused()" }
,
		{ "trigger": "Slider_retain()", "contents": "retain()" }
,
		{ "trigger": "Slider_setSoundEff(std::string_eff,)", "contents": "setSoundEff(${1:std::string_eff})" }
,
		{ "trigger": "Slider_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "Slider_visit()", "contents": "visit()" }
,
		{ "trigger": "Slider_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "Slider_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "Slider_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "Slider_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "Slider_addNode(CCNode*_node,int_zOrder,int_tag,)", "contents": "addNode(${1:CCNode*_node},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "Slider_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "Slider_getActionTag()", "contents": "getActionTag()" }
,
		{ "trigger": "Slider_release()", "contents": "release()" }
,
		{ "trigger": "Slider_setActionTag(int_tag,)", "contents": "setActionTag(${1:int_tag})" }
,
		{ "trigger": "Slider_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "Slider_setFlipX(bool_flipX,)", "contents": "setFlipX(${1:bool_flipX})" }
,
		{ "trigger": "Slider_loadSlidBallTextures(const_char*_normal,const_char*_pressed,const_char*_disabled,TextureResType_texType_=_UI_TEX_TYPE_LOCAL,)", "contents": "loadSlidBallTextures(${1:const_char*_normal},${2:const_char*_pressed},${3:const_char*_disabled},${4:TextureResType_texType_=_UI_TEX_TYPE_LOCAL})" }
,
		{ "trigger": "Slider_checkChildInfo(int_handleState,Widget*_sender,const_CCPoint_&touchPoint,)", "contents": "checkChildInfo(${1:int_handleState},${2:Widget*_sender},${3:const_CCPoint_&touchPoint})" }
,
		{ "trigger": "Slider_removeFromParent()", "contents": "removeFromParent()" }
,
		{ "trigger": "Slider_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "Slider_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "Slider_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "Slider_isIgnoreContentAdaptWithSize()", "contents": "isIgnoreContentAdaptWithSize()" }
,
		{ "trigger": "Slider_getLeftInParent()", "contents": "getLeftInParent()" }
,
		{ "trigger": "Slider_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "Slider_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "Slider_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "Slider_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "Slider_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "Slider_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "Slider_getScale()", "contents": "getScale()" }
,
		{ "trigger": "Slider_removeNode(CCNode*_node,)", "contents": "removeNode(${1:CCNode*_node})" }
,
		{ "trigger": "Slider_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "Slider_onExit()", "contents": "onExit()" }
,
		{ "trigger": "Slider_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "Slider_getWorldPosition()", "contents": "getWorldPosition()" }
,
		{ "trigger": "Slider_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "Slider_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "Slider_clippingParentAreaContainPoint(const_CCPoint_&pt,)", "contents": "clippingParentAreaContainPoint(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "Slider_onTouchCancelled(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchCancelled(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "Slider_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "Slider_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "Slider_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "Slider_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "Slider_description()", "contents": "description()" }
,
		{ "trigger": "Slider_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "Slider_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "Slider_getSizeType()", "contents": "getSizeType()" }
,
		{ "trigger": "Slider_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "Slider_onEnter()", "contents": "onEnter()" }
,
		{ "trigger": "Slider_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "Slider_addChild(CCNode*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "Slider_create()", "contents": "Slider:create()" }
,

		{ "trigger": "CCFlipY3D_create(float_duration,)", "contents": "CCFlipY3D:create(${1:float_duration})" }
,

		{ "trigger": "CCActionEase_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCActionEase_copy()", "contents": "copy()" }
,
		{ "trigger": "CCActionEase_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCActionEase_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCActionEase_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCActionEase_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCActionEase_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCActionEase_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCActionEase_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCActionEase_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCActionEase_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCActionEase_retain()", "contents": "retain()" }
,
		{ "trigger": "CCActionEase_release()", "contents": "release()" }
,
		{ "trigger": "CCActionEase_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCActionEase_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCActionEase_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCActionEase_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCActionEase_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCActionEase_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCActionEase_create(CCActionInterval_*pAction,)", "contents": "CCActionEase:create(${1:CCActionInterval_*pAction})" }
,

		{ "trigger": "CCTransitionZoomFlipAngular_create(float_t,CCScene*_s,tOrientation_o_=_kCCTransitionOrientationRightOver,)", "contents": "CCTransitionZoomFlipAngular:create(${1:float_t},${2:CCScene*_s},${3:tOrientation_o_=_kCCTransitionOrientationRightOver})" }
,



		{ "trigger": "CCComRender_copy()", "contents": "copy()" }
,
		{ "trigger": "CCComRender_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCComRender_setOwner(CCNode_*pOwner,)", "contents": "setOwner(${1:CCNode_*pOwner})" }
,
		{ "trigger": "CCComRender_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCComRender_setEnabled(bool_b,)", "contents": "setEnabled(${1:bool_b})" }
,
		{ "trigger": "CCComRender_setNode(CCNode_*pNode,)", "contents": "setNode(${1:CCNode_*pNode})" }
,
		{ "trigger": "CCComRender_serialize(void*_r,)", "contents": "serialize(${1:void*_r})" }
,
		{ "trigger": "CCComRender_setName(const_char_*pName,)", "contents": "setName(${1:const_char_*pName})" }
,
		{ "trigger": "CCComRender_update(float_delta,)", "contents": "update(${1:float_delta})" }
,
		{ "trigger": "CCComRender_getName()", "contents": "getName()" }
,
		{ "trigger": "CCComRender_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCComRender_getOwner()", "contents": "getOwner()" }
,
		{ "trigger": "CCComRender_release()", "contents": "release()" }
,
		{ "trigger": "CCComRender_getNode()", "contents": "getNode()" }
,
		{ "trigger": "CCComRender_init()", "contents": "init()" }
,
		{ "trigger": "CCComRender_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCComRender_retain()", "contents": "retain()" }
,
		{ "trigger": "CCComRender_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCComRender_create(CCNode_*pNode,const_char_*comName,)", "contents": "CCComRender:create(${1:CCNode_*pNode},${2:const_char_*comName})" }
,

		{ "trigger": "CCDeccelAmplitude_setRate(float_fRate,)", "contents": "setRate(${1:float_fRate})" }
,
		{ "trigger": "CCDeccelAmplitude_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCDeccelAmplitude_copy()", "contents": "copy()" }
,
		{ "trigger": "CCDeccelAmplitude_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCDeccelAmplitude_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCDeccelAmplitude_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCDeccelAmplitude_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCDeccelAmplitude_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCDeccelAmplitude_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCDeccelAmplitude_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCDeccelAmplitude_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCDeccelAmplitude_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCDeccelAmplitude_retain()", "contents": "retain()" }
,
		{ "trigger": "CCDeccelAmplitude_getRate()", "contents": "getRate()" }
,
		{ "trigger": "CCDeccelAmplitude_release()", "contents": "release()" }
,
		{ "trigger": "CCDeccelAmplitude_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCDeccelAmplitude_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCDeccelAmplitude_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCDeccelAmplitude_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCDeccelAmplitude_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCDeccelAmplitude_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCDeccelAmplitude_create(CCAction_*pAction,float_duration,)", "contents": "CCDeccelAmplitude:create(${1:CCAction_*pAction},${2:float_duration})" }
,

		{ "trigger": "CCControlPotentiometer_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCControlPotentiometer_ccTouchBegan(CCTouch_*pTouch,CCEvent_*pEvent,)", "contents": "ccTouchBegan(${1:CCTouch_*pTouch},${2:CCEvent_*pEvent})" }
,
		{ "trigger": "CCControlPotentiometer_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCControlPotentiometer_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCControlPotentiometer_potentiometerEnded(CCPoint_location,)", "contents": "potentiometerEnded(${1:CCPoint_location})" }
,
		{ "trigger": "CCControlPotentiometer_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCControlPotentiometer_getThumbSprite()", "contents": "getThumbSprite()" }
,
		{ "trigger": "CCControlPotentiometer_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCControlPotentiometer_setOpacityModifyRGB(bool_bOpacityModifyRGB,)", "contents": "setOpacityModifyRGB(${1:bool_bOpacityModifyRGB})" }
,
		{ "trigger": "CCControlPotentiometer_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCControlPotentiometer_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCControlPotentiometer_init()", "contents": "init()" }
,
		{ "trigger": "CCControlPotentiometer_draw()", "contents": "draw()" }
,
		{ "trigger": "CCControlPotentiometer_getPreviousLocation()", "contents": "getPreviousLocation()" }
,
		{ "trigger": "CCControlPotentiometer_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCControlPotentiometer_removeHandleOfControlEvent(CCControlEvent_controlEvents,)", "contents": "removeHandleOfControlEvent(${1:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlPotentiometer_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCControlPotentiometer_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCControlPotentiometer_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCControlPotentiometer_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCControlPotentiometer_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCControlPotentiometer_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCControlPotentiometer_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCControlPotentiometer_visit()", "contents": "visit()" }
,
		{ "trigger": "CCControlPotentiometer_setThumbSprite(CCSprite*_var,)", "contents": "setThumbSprite(${1:CCSprite*_var})" }
,
		{ "trigger": "CCControlPotentiometer_isHighlighted()", "contents": "isHighlighted()" }
,
		{ "trigger": "CCControlPotentiometer_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCControlPotentiometer_registerScriptAccelerateHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptAccelerateHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCControlPotentiometer_registerWithTouchDispatcher()", "contents": "registerWithTouchDispatcher()" }
,
		{ "trigger": "CCControlPotentiometer_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCControlPotentiometer_getTouchMode()", "contents": "getTouchMode()" }
,
		{ "trigger": "CCControlPotentiometer_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCControlPotentiometer_setAccelerometerEnabled(bool_bValue,)", "contents": "setAccelerometerEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCControlPotentiometer_distanceBetweenPointAndPoint(CCPoint_point1,CCPoint_point2,)", "contents": "distanceBetweenPointAndPoint(${1:CCPoint_point1},${2:CCPoint_point2})" }
,
		{ "trigger": "CCControlPotentiometer_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCControlPotentiometer_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCControlPotentiometer_unregisterScriptTouchHandler()", "contents": "unregisterScriptTouchHandler()" }
,
		{ "trigger": "CCControlPotentiometer_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCControlPotentiometer_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCControlPotentiometer_ccTouchEnded(CCTouch_*pTouch,CCEvent_*pEvent,)", "contents": "ccTouchEnded(${1:CCTouch_*pTouch},${2:CCEvent_*pEvent})" }
,
		{ "trigger": "CCControlPotentiometer_setMaximumValue(float_maximumValue,)", "contents": "setMaximumValue(${1:float_maximumValue})" }
,
		{ "trigger": "CCControlPotentiometer_transform()", "contents": "transform()" }
,
		{ "trigger": "CCControlPotentiometer_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCControlPotentiometer_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCControlPotentiometer_initWithTrackSprite_ProgressTimer_ThumbSprite(CCSprite*_trackSprite,CCProgressTimer*_progressTimer,CCSprite*_thumbSprite,)", "contents": "initWithTrackSprite_ProgressTimer_ThumbSprite(${1:CCSprite*_trackSprite},${2:CCProgressTimer*_progressTimer},${3:CCSprite*_thumbSprite})" }
,
		{ "trigger": "CCControlPotentiometer_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCControlPotentiometer_potentiometerMoved(CCPoint_location,)", "contents": "potentiometerMoved(${1:CCPoint_location})" }
,
		{ "trigger": "CCControlPotentiometer_sendActionsForControlEvents(CCControlEvent_controlEvents,)", "contents": "sendActionsForControlEvents(${1:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlPotentiometer_unregisterScriptAccelerateHandler()", "contents": "unregisterScriptAccelerateHandler()" }
,
		{ "trigger": "CCControlPotentiometer_removeTargetWithActionForControlEvents(CCObject*_target,SEL_CCControlHandler_action,CCControlEvent_controlEvents,)", "contents": "removeTargetWithActionForControlEvents(${1:CCObject*_target},${2:SEL_CCControlHandler_action},${3:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlPotentiometer_getState()", "contents": "getState()" }
,
		{ "trigger": "CCControlPotentiometer_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCControlPotentiometer_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCControlPotentiometer_ccTouchMoved(CCTouch_*pTouch,CCEvent_*pEvent,)", "contents": "ccTouchMoved(${1:CCTouch_*pTouch},${2:CCEvent_*pEvent})" }
,
		{ "trigger": "CCControlPotentiometer_registerScriptKeypadHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptKeypadHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCControlPotentiometer_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCControlPotentiometer_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCControlPotentiometer_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCControlPotentiometer_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCControlPotentiometer_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCControlPotentiometer_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCControlPotentiometer_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCControlPotentiometer_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCControlPotentiometer_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCControlPotentiometer_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCControlPotentiometer_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCControlPotentiometer_setKeypadEnabled(bool_bValue,)", "contents": "setKeypadEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCControlPotentiometer_isSelected()", "contents": "isSelected()" }
,
		{ "trigger": "CCControlPotentiometer_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCControlPotentiometer_setTouchPriority(int_priority,)", "contents": "setTouchPriority(${1:int_priority})" }
,
		{ "trigger": "CCControlPotentiometer_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCControlPotentiometer_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCControlPotentiometer_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCControlPotentiometer_potentiometerBegan(CCPoint_location,)", "contents": "potentiometerBegan(${1:CCPoint_location})" }
,
		{ "trigger": "CCControlPotentiometer_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCControlPotentiometer_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCControlPotentiometer_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCControlPotentiometer_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCControlPotentiometer_setSelected(bool_bSelected,)", "contents": "setSelected(${1:bool_bSelected})" }
,
		{ "trigger": "CCControlPotentiometer_setTouchEnabled(bool_bValue,)", "contents": "setTouchEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCControlPotentiometer_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCControlPotentiometer_init()", "contents": "init()" }
,
		{ "trigger": "CCControlPotentiometer_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCControlPotentiometer_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCControlPotentiometer_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCControlPotentiometer_getProgressTimer()", "contents": "getProgressTimer()" }
,
		{ "trigger": "CCControlPotentiometer_onExit()", "contents": "onExit()" }
,
		{ "trigger": "CCControlPotentiometer_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCControlPotentiometer_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCControlPotentiometer_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCControlPotentiometer_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "CCControlPotentiometer_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCControlPotentiometer_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCControlPotentiometer_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCControlPotentiometer_setEnabled(bool_bEnabled,)", "contents": "setEnabled(${1:bool_bEnabled})" }
,
		{ "trigger": "CCControlPotentiometer_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCControlPotentiometer_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCControlPotentiometer_getMinimumValue()", "contents": "getMinimumValue()" }
,
		{ "trigger": "CCControlPotentiometer_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCControlPotentiometer_setValue(float_value,)", "contents": "setValue(${1:float_value})" }
,
		{ "trigger": "CCControlPotentiometer_retain()", "contents": "retain()" }
,
		{ "trigger": "CCControlPotentiometer_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCControlPotentiometer_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCControlPotentiometer_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCControlPotentiometer_setMinimumValue(float_minimumValue,)", "contents": "setMinimumValue(${1:float_minimumValue})" }
,
		{ "trigger": "CCControlPotentiometer_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCControlPotentiometer_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCControlPotentiometer_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCControlPotentiometer_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCControlPotentiometer_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCControlPotentiometer_unregisterScriptKeypadHandler()", "contents": "unregisterScriptKeypadHandler()" }
,
		{ "trigger": "CCControlPotentiometer_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCControlPotentiometer_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCControlPotentiometer_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCControlPotentiometer_setProgressTimer(CCProgressTimer*_var,)", "contents": "setProgressTimer(${1:CCProgressTimer*_var})" }
,
		{ "trigger": "CCControlPotentiometer_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCControlPotentiometer_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCControlPotentiometer_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCControlPotentiometer_getTouchLocation(CCTouch*_touch,)", "contents": "getTouchLocation(${1:CCTouch*_touch})" }
,
		{ "trigger": "CCControlPotentiometer_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCControlPotentiometer_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCControlPotentiometer_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCControlPotentiometer_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCControlPotentiometer_isAccelerometerEnabled()", "contents": "isAccelerometerEnabled()" }
,
		{ "trigger": "CCControlPotentiometer_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCControlPotentiometer_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCControlPotentiometer_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCControlPotentiometer_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCControlPotentiometer_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCControlPotentiometer_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCControlPotentiometer_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCControlPotentiometer_isKeypadEnabled()", "contents": "isKeypadEnabled()" }
,
		{ "trigger": "CCControlPotentiometer_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCControlPotentiometer_hasVisibleParents()", "contents": "hasVisibleParents()" }
,
		{ "trigger": "CCControlPotentiometer_setPreviousLocation(CCPoint_var,)", "contents": "setPreviousLocation(${1:CCPoint_var})" }
,
		{ "trigger": "CCControlPotentiometer_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCControlPotentiometer_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCControlPotentiometer_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCControlPotentiometer_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCControlPotentiometer_registerScriptTouchHandler(LUA_FUNCTION_nHandler,bool_bIsMultiTouches_=_false,int_nPriority_=_0,bool_bSwallowsTouches_=_false,)", "contents": "registerScriptTouchHandler(${1:LUA_FUNCTION_nHandler},${2:bool_bIsMultiTouches_=_false},${3:int_nPriority_=_0},${4:bool_bSwallowsTouches_=_false})" }
,
		{ "trigger": "CCControlPotentiometer_isTouchInside(CCTouch_*_touch,)", "contents": "isTouchInside(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCControlPotentiometer_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCControlPotentiometer_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCControlPotentiometer_addTargetWithActionForControlEvents(CCObject*_target,SEL_CCControlHandler_action,CCControlEvent_controlEvents,)", "contents": "addTargetWithActionForControlEvents(${1:CCObject*_target},${2:SEL_CCControlHandler_action},${3:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlPotentiometer_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCControlPotentiometer_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCControlPotentiometer_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCControlPotentiometer_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCControlPotentiometer_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCControlPotentiometer_release()", "contents": "release()" }
,
		{ "trigger": "CCControlPotentiometer_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCControlPotentiometer_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCControlPotentiometer_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCControlPotentiometer_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCControlPotentiometer_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCControlPotentiometer_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCControlPotentiometer_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCControlPotentiometer_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCControlPotentiometer_setHighlighted(bool_bHighlighted,)", "contents": "setHighlighted(${1:bool_bHighlighted})" }
,
		{ "trigger": "CCControlPotentiometer_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCControlPotentiometer_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCControlPotentiometer_needsLayout()", "contents": "needsLayout()" }
,
		{ "trigger": "CCControlPotentiometer_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCControlPotentiometer_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCControlPotentiometer_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCControlPotentiometer_getValue()", "contents": "getValue()" }
,
		{ "trigger": "CCControlPotentiometer_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCControlPotentiometer_getMaximumValue()", "contents": "getMaximumValue()" }
,
		{ "trigger": "CCControlPotentiometer_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCControlPotentiometer_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCControlPotentiometer_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCControlPotentiometer_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCControlPotentiometer_getTouchPriority()", "contents": "getTouchPriority()" }
,
		{ "trigger": "CCControlPotentiometer_copy()", "contents": "copy()" }
,
		{ "trigger": "CCControlPotentiometer_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCControlPotentiometer_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCControlPotentiometer_addHandleOfControlEvent(LUA_FUNCTION_nFunID,CCControlEvent_controlEvents,)", "contents": "addHandleOfControlEvent(${1:LUA_FUNCTION_nFunID},${2:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlPotentiometer_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "CCControlPotentiometer_description()", "contents": "description()" }
,
		{ "trigger": "CCControlPotentiometer_setTouchMode(ccTouchesMode_mode,)", "contents": "setTouchMode(${1:ccTouchesMode_mode})" }
,
		{ "trigger": "CCControlPotentiometer_angleInDegreesBetweenLineFromPoint_toPoint_toLineFromPoint_toPoint(CCPoint_beginLineA,CCPoint_endLineA,CCPoint_beginLineB,CCPoint_endLineB,)", "contents": "angleInDegreesBetweenLineFromPoint_toPoint_toLineFromPoint_toPoint(${1:CCPoint_beginLineA},${2:CCPoint_endLineA},${3:CCPoint_beginLineB},${4:CCPoint_endLineB})" }
,
		{ "trigger": "CCControlPotentiometer_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCControlPotentiometer_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCControlPotentiometer_onEnter()", "contents": "onEnter()" }
,
		{ "trigger": "CCControlPotentiometer_create(const_char*_backgroundFile,const_char*_progressFile,const_char*_thumbFile,)", "contents": "CCControlPotentiometer:create(${1:const_char*_backgroundFile},${2:const_char*_progressFile},${3:const_char*_thumbFile})" }
,

		{ "trigger": "CCEaseBounceOut_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseBounceOut_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseBounceOut_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseBounceOut_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseBounceOut_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseBounceOut_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseBounceOut_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseBounceOut_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseBounceOut_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseBounceOut_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseBounceOut_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseBounceOut_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseBounceOut_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseBounceOut_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseBounceOut_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseBounceOut_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseBounceOut_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseBounceOut_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseBounceOut_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseBounceOut_create(CCActionInterval*_pAction,)", "contents": "CCEaseBounceOut:create(${1:CCActionInterval*_pAction})" }
,

		{ "trigger": "CCWaves3D_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCWaves3D_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCWaves3D_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCWaves3D_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCWaves3D_release()", "contents": "release()" }
,
		{ "trigger": "CCWaves3D_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCWaves3D_retain()", "contents": "retain()" }
,
		{ "trigger": "CCWaves3D_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCWaves3D_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCWaves3D_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCWaves3D_vertex(const_CCPoint&_pos,)", "contents": "vertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCWaves3D_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCWaves3D_setAmplitude(float_fAmplitude,)", "contents": "setAmplitude(${1:float_fAmplitude})" }
,
		{ "trigger": "CCWaves3D_copy()", "contents": "copy()" }
,
		{ "trigger": "CCWaves3D_getAmplitude()", "contents": "getAmplitude()" }
,
		{ "trigger": "CCWaves3D_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCWaves3D_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCWaves3D_setAmplitudeRate(float_fAmplitudeRate,)", "contents": "setAmplitudeRate(${1:float_fAmplitudeRate})" }
,
		{ "trigger": "CCWaves3D_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCWaves3D_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCWaves3D_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCWaves3D_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCWaves3D_setVertex(const_CCPoint&_pos,const_ccVertex3F&_vertex,)", "contents": "setVertex(${1:const_CCPoint&_pos},${2:const_ccVertex3F&_vertex})" }
,
		{ "trigger": "CCWaves3D_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCWaves3D_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCWaves3D_originalVertex(const_CCPoint&_pos,)", "contents": "originalVertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCWaves3D_create(float_duration,CCSize_gridSize,unsigned_int_waves,float_amplitude,)", "contents": "CCWaves3D:create(${1:float_duration},${2:CCSize_gridSize},${3:unsigned_int_waves},${4:float_amplitude})" }
,

		{ "trigger": "RichElement_copy()", "contents": "copy()" }
,
		{ "trigger": "RichElement_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "RichElement_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "RichElement_release()", "contents": "release()" }
,
		{ "trigger": "RichElement_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "RichElement_retain()", "contents": "retain()" }
,
		{ "trigger": "RichElement_isSingleReference()", "contents": "isSingleReference()" }
,

		{ "trigger": "CCTransitionZoomFlipY_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTransitionZoomFlipY_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTransitionZoomFlipY_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTransitionZoomFlipY_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTransitionZoomFlipY_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTransitionZoomFlipY_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTransitionZoomFlipY_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionZoomFlipY_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTransitionZoomFlipY_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTransitionZoomFlipY_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionZoomFlipY_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionZoomFlipY_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTransitionZoomFlipY_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionZoomFlipY_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCTransitionZoomFlipY_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionZoomFlipY_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTransitionZoomFlipY_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionZoomFlipY_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTransitionZoomFlipY_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTransitionZoomFlipY_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTransitionZoomFlipY_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTransitionZoomFlipY_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTransitionZoomFlipY_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionZoomFlipY_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTransitionZoomFlipY_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTransitionZoomFlipY_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTransitionZoomFlipY_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionZoomFlipY_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionZoomFlipY_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTransitionZoomFlipY_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTransitionZoomFlipY_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTransitionZoomFlipY_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTransitionZoomFlipY_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTransitionZoomFlipY_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionZoomFlipY_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTransitionZoomFlipY_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTransitionZoomFlipY_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTransitionZoomFlipY_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTransitionZoomFlipY_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTransitionZoomFlipY_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTransitionZoomFlipY_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionZoomFlipY_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTransitionZoomFlipY_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTransitionZoomFlipY_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTransitionZoomFlipY_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTransitionZoomFlipY_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTransitionZoomFlipY_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTransitionZoomFlipY_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTransitionZoomFlipY_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTransitionZoomFlipY_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTransitionZoomFlipY_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTransitionZoomFlipY_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTransitionZoomFlipY_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionZoomFlipY_release()", "contents": "release()" }
,
		{ "trigger": "CCTransitionZoomFlipY_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionZoomFlipY_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionZoomFlipY_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTransitionZoomFlipY_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTransitionZoomFlipY_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTransitionZoomFlipY_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCTransitionZoomFlipY_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTransitionZoomFlipY_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTransitionZoomFlipY_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTransitionZoomFlipY_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTransitionZoomFlipY_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTransitionZoomFlipY_description()", "contents": "description()" }
,
		{ "trigger": "CCTransitionZoomFlipY_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTransitionZoomFlipY_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTransitionZoomFlipY_create(float_t,CCScene*_s,tOrientation_o_=_kCCTransitionOrientationUpOver,)", "contents": "CCTransitionZoomFlipY:create(${1:float_t},${2:CCScene*_s},${3:tOrientation_o_=_kCCTransitionOrientationUpOver})" }
,

		{ "trigger": "CCUserDefault_setIntegerForKey(const_char*_pKey,int_value,)", "contents": "setIntegerForKey(${1:const_char*_pKey},${2:int_value})" }
,
		{ "trigger": "CCUserDefault_getDoubleForKey(const_char*_pKey,)", "contents": "getDoubleForKey(${1:const_char*_pKey})" }
,
		{ "trigger": "CCUserDefault_getStringForKey(const_char*_pKey,)", "contents": "getStringForKey(${1:const_char*_pKey})" }
,
		{ "trigger": "CCUserDefault_getXMLFilePath()", "contents": "getXMLFilePath()" }
,
		{ "trigger": "CCUserDefault_setFloatForKey(const_char*_pKey,float_value,)", "contents": "setFloatForKey(${1:const_char*_pKey},${2:float_value})" }
,
		{ "trigger": "CCUserDefault_setStringForKey(const_char*_pKey,std::string_value,)", "contents": "setStringForKey(${1:const_char*_pKey},${2:std::string_value})" }
,
		{ "trigger": "CCUserDefault_flush()", "contents": "flush()" }
,
		{ "trigger": "CCUserDefault_getIntegerForKey(const_char*_pKey,)", "contents": "getIntegerForKey(${1:const_char*_pKey})" }
,
		{ "trigger": "CCUserDefault_getFloatForKey(const_char*_pKey,)", "contents": "getFloatForKey(${1:const_char*_pKey})" }
,
		{ "trigger": "CCUserDefault_getBoolForKey(const_char*_pKey,)", "contents": "getBoolForKey(${1:const_char*_pKey})" }
,
		{ "trigger": "CCUserDefault_setBoolForKey(const_char*_pKey,bool_value,)", "contents": "setBoolForKey(${1:const_char*_pKey},${2:bool_value})" }
,
		{ "trigger": "CCUserDefault_setDoubleForKey(const_char*_pKey,double_value,)", "contents": "setDoubleForKey(${1:const_char*_pKey},${2:double_value})" }
,
		{ "trigger": "CCUserDefault_purgeSharedUserDefault()", "contents": "CCUserDefault:purgeSharedUserDefault()" }
,
		{ "trigger": "CCUserDefault_sharedUserDefault()", "contents": "CCUserDefault:sharedUserDefault()" }
,

		{ "trigger": "CCTween_play(CCMovementBoneData_*movementBoneData,int_durationTo,int_durationTween,int_loop,int_tweenEasing,)", "contents": "play(${1:CCMovementBoneData_*movementBoneData},${2:int_durationTo},${3:int_durationTween},${4:int_loop},${5:int_tweenEasing})" }
,
		{ "trigger": "CCTween_init(CCBone_*bone,)", "contents": "init(${1:CCBone_*bone})" }
,
		{ "trigger": "CCTween_gotoAndPause(int_frameIndex,)", "contents": "gotoAndPause(${1:int_frameIndex})" }
,
		{ "trigger": "CCTween_setAnimation(CCArmatureAnimation_*animation,)", "contents": "setAnimation(${1:CCArmatureAnimation_*animation})" }
,
		{ "trigger": "CCTween_gotoAndPlay(int_frameIndex,)", "contents": "gotoAndPlay(${1:int_frameIndex})" }
,
		{ "trigger": "CCTween_getAnimation()", "contents": "getAnimation()" }
,
		{ "trigger": "CCTween_create(CCBone_*bone,)", "contents": "CCTween:create(${1:CCBone_*bone})" }
,

		{ "trigger": "CCEaseBackOut_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseBackOut_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseBackOut_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseBackOut_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseBackOut_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseBackOut_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseBackOut_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseBackOut_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseBackOut_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseBackOut_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseBackOut_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseBackOut_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseBackOut_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseBackOut_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseBackOut_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseBackOut_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseBackOut_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseBackOut_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseBackOut_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseBackOut_create(CCActionInterval*_pAction,)", "contents": "CCEaseBackOut:create(${1:CCActionInterval*_pAction})" }
,

		{ "trigger": "CCDisplayManager_getDisplayRenderNodeType()", "contents": "getDisplayRenderNodeType()" }
,
		{ "trigger": "CCDisplayManager_init(CCBone_*bone,)", "contents": "init(${1:CCBone_*bone})" }
,
		{ "trigger": "CCDisplayManager_removeDisplay(int_index,)", "contents": "removeDisplay(${1:int_index})" }
,
		{ "trigger": "CCDisplayManager_getCurrentDisplayIndex()", "contents": "getCurrentDisplayIndex()" }
,
		{ "trigger": "CCDisplayManager_setVisible(bool_visible,)", "contents": "setVisible(${1:bool_visible})" }
,
		{ "trigger": "CCDisplayManager_release()", "contents": "release()" }
,
		{ "trigger": "CCDisplayManager_getDecorativeDisplayList()", "contents": "getDecorativeDisplayList()" }
,
		{ "trigger": "CCDisplayManager_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCDisplayManager_retain()", "contents": "retain()" }
,
		{ "trigger": "CCDisplayManager_addDisplay(CCDisplayData_*displayData,int_index,)", "contents": "addDisplay(${1:CCDisplayData_*displayData},${2:int_index})" }
,
		{ "trigger": "CCDisplayManager_changeDisplayWithIndex(int_index,bool_force,)", "contents": "changeDisplayWithIndex(${1:int_index},${2:bool_force})" }
,
		{ "trigger": "CCDisplayManager_getDisplayRenderNode()", "contents": "getDisplayRenderNode()" }
,
		{ "trigger": "CCDisplayManager_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCDisplayManager_addDisplay(CCNode_*display,int_index,)", "contents": "addDisplay(${1:CCNode_*display},${2:int_index})" }
,
		{ "trigger": "CCDisplayManager_containPoint(CCPoint_&_point,)", "contents": "containPoint(${1:CCPoint_&_point})" }
,
		{ "trigger": "CCDisplayManager_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCDisplayManager_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCDisplayManager_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCDisplayManager_getBoundingBox()", "contents": "getBoundingBox()" }
,
		{ "trigger": "CCDisplayManager_copy()", "contents": "copy()" }
,
		{ "trigger": "CCDisplayManager_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCDisplayManager_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCDisplayManager_containPoint(float_x,float_y,)", "contents": "containPoint(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCDisplayManager_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCDisplayManager_create(CCBone_*bone,)", "contents": "CCDisplayManager:create(${1:CCBone_*bone})" }
,

		{ "trigger": "CCLayer_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCLayer_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCLayer_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCLayer_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCLayer_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCLayer_draw()", "contents": "draw()" }
,
		{ "trigger": "CCLayer_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCLayer_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCLayer_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCLayer_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCLayer_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLayer_visit()", "contents": "visit()" }
,
		{ "trigger": "CCLayer_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCLayer_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCLayer_registerScriptAccelerateHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptAccelerateHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCLayer_getTouchMode()", "contents": "getTouchMode()" }
,
		{ "trigger": "CCLayer_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLayer_setAccelerometerEnabled(bool_bValue,)", "contents": "setAccelerometerEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCLayer_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCLayer_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCLayer_unregisterScriptTouchHandler()", "contents": "unregisterScriptTouchHandler()" }
,
		{ "trigger": "CCLayer_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCLayer_transform()", "contents": "transform()" }
,
		{ "trigger": "CCLayer_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCLayer_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLayer_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCLayer_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCLayer_registerScriptKeypadHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptKeypadHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCLayer_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLayer_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCLayer_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLayer_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCLayer_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCLayer_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCLayer_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCLayer_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCLayer_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCLayer_setKeypadEnabled(bool_bValue,)", "contents": "setKeypadEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCLayer_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCLayer_setTouchPriority(int_priority,)", "contents": "setTouchPriority(${1:int_priority})" }
,
		{ "trigger": "CCLayer_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCLayer_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCLayer_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLayer_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCLayer_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCLayer_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLayer_setTouchEnabled(bool_bValue,)", "contents": "setTouchEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCLayer_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCLayer_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCLayer_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCLayer_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCLayer_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLayer_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "CCLayer_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLayer_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLayer_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCLayer_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCLayer_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCLayer_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCLayer_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCLayer_retain()", "contents": "retain()" }
,
		{ "trigger": "CCLayer_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLayer_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCLayer_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCLayer_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCLayer_unregisterScriptKeypadHandler()", "contents": "unregisterScriptKeypadHandler()" }
,
		{ "trigger": "CCLayer_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCLayer_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCLayer_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCLayer_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCLayer_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCLayer_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCLayer_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCLayer_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCLayer_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCLayer_isAccelerometerEnabled()", "contents": "isAccelerometerEnabled()" }
,
		{ "trigger": "CCLayer_getTouchPriority()", "contents": "getTouchPriority()" }
,
		{ "trigger": "CCLayer_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCLayer_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCLayer_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCLayer_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCLayer_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCLayer_isKeypadEnabled()", "contents": "isKeypadEnabled()" }
,
		{ "trigger": "CCLayer_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCLayer_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCLayer_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCLayer_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCLayer_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCLayer_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLayer_registerScriptTouchHandler(LUA_FUNCTION_nHandler,bool_bIsMultiTouches_=_false,int_nPriority_=_0,bool_bSwallowsTouches_=_false,)", "contents": "registerScriptTouchHandler(${1:LUA_FUNCTION_nHandler},${2:bool_bIsMultiTouches_=_false},${3:int_nPriority_=_0},${4:bool_bSwallowsTouches_=_false})" }
,
		{ "trigger": "CCLayer_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCLayer_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCLayer_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCLayer_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCLayer_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCLayer_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLayer_release()", "contents": "release()" }
,
		{ "trigger": "CCLayer_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLayer_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCLayer_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLayer_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCLayer_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCLayer_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCLayer_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCLayer_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCLayer_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCLayer_unregisterScriptAccelerateHandler()", "contents": "unregisterScriptAccelerateHandler()" }
,
		{ "trigger": "CCLayer_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCLayer_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLayer_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCLayer_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCLayer_copy()", "contents": "copy()" }
,
		{ "trigger": "CCLayer_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCLayer_description()", "contents": "description()" }
,
		{ "trigger": "CCLayer_setTouchMode(ccTouchesMode_mode,)", "contents": "setTouchMode(${1:ccTouchesMode_mode})" }
,
		{ "trigger": "CCLayer_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCLayer_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCLayer_create()", "contents": "CCLayer:create()" }
,

		{ "trigger": "CCControlSlider_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCControlSlider_setMaximumValue(float_val,)", "contents": "setMaximumValue(${1:float_val})" }
,
		{ "trigger": "CCControlSlider_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCControlSlider_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCControlSlider_setBackgroundSprite(CCSprite*_val,)", "contents": "setBackgroundSprite(${1:CCSprite*_val})" }
,
		{ "trigger": "CCControlSlider_getThumbSprite()", "contents": "getThumbSprite()" }
,
		{ "trigger": "CCControlSlider_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCControlSlider_setOpacityModifyRGB(bool_bOpacityModifyRGB,)", "contents": "setOpacityModifyRGB(${1:bool_bOpacityModifyRGB})" }
,
		{ "trigger": "CCControlSlider_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCControlSlider_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCControlSlider_init()", "contents": "init()" }
,
		{ "trigger": "CCControlSlider_draw()", "contents": "draw()" }
,
		{ "trigger": "CCControlSlider_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCControlSlider_removeHandleOfControlEvent(CCControlEvent_controlEvents,)", "contents": "removeHandleOfControlEvent(${1:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlSlider_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCControlSlider_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCControlSlider_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCControlSlider_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCControlSlider_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCControlSlider_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCControlSlider_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCControlSlider_visit()", "contents": "visit()" }
,
		{ "trigger": "CCControlSlider_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCControlSlider_isHighlighted()", "contents": "isHighlighted()" }
,
		{ "trigger": "CCControlSlider_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCControlSlider_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCControlSlider_registerScriptAccelerateHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptAccelerateHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCControlSlider_registerWithTouchDispatcher()", "contents": "registerWithTouchDispatcher()" }
,
		{ "trigger": "CCControlSlider_setThumbSprite(CCSprite*_val,)", "contents": "setThumbSprite(${1:CCSprite*_val})" }
,
		{ "trigger": "CCControlSlider_setMinimumValue(float_val,)", "contents": "setMinimumValue(${1:float_val})" }
,
		{ "trigger": "CCControlSlider_getTouchMode()", "contents": "getTouchMode()" }
,
		{ "trigger": "CCControlSlider_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCControlSlider_setAccelerometerEnabled(bool_bValue,)", "contents": "setAccelerometerEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCControlSlider_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCControlSlider_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCControlSlider_unregisterScriptTouchHandler()", "contents": "unregisterScriptTouchHandler()" }
,
		{ "trigger": "CCControlSlider_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCControlSlider_transform()", "contents": "transform()" }
,
		{ "trigger": "CCControlSlider_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCControlSlider_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCControlSlider_getMinimumValue()", "contents": "getMinimumValue()" }
,
		{ "trigger": "CCControlSlider_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCControlSlider_sendActionsForControlEvents(CCControlEvent_controlEvents,)", "contents": "sendActionsForControlEvents(${1:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlSlider_unregisterScriptAccelerateHandler()", "contents": "unregisterScriptAccelerateHandler()" }
,
		{ "trigger": "CCControlSlider_removeTargetWithActionForControlEvents(CCObject*_target,SEL_CCControlHandler_action,CCControlEvent_controlEvents,)", "contents": "removeTargetWithActionForControlEvents(${1:CCObject*_target},${2:SEL_CCControlHandler_action},${3:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlSlider_getState()", "contents": "getState()" }
,
		{ "trigger": "CCControlSlider_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCControlSlider_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCControlSlider_registerScriptKeypadHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptKeypadHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCControlSlider_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCControlSlider_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCControlSlider_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCControlSlider_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCControlSlider_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCControlSlider_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCControlSlider_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCControlSlider_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCControlSlider_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCControlSlider_setKeypadEnabled(bool_bValue,)", "contents": "setKeypadEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCControlSlider_isSelected()", "contents": "isSelected()" }
,
		{ "trigger": "CCControlSlider_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCControlSlider_setTouchPriority(int_priority,)", "contents": "setTouchPriority(${1:int_priority})" }
,
		{ "trigger": "CCControlSlider_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCControlSlider_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCControlSlider_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCControlSlider_addTargetWithActionForControlEvents(CCObject*_target,SEL_CCControlHandler_action,CCControlEvent_controlEvents,)", "contents": "addTargetWithActionForControlEvents(${1:CCObject*_target},${2:SEL_CCControlHandler_action},${3:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlSlider_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCControlSlider_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCControlSlider_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCControlSlider_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCControlSlider_setSelected(bool_bSelected,)", "contents": "setSelected(${1:bool_bSelected})" }
,
		{ "trigger": "CCControlSlider_setProgressSprite(CCSprite*_val,)", "contents": "setProgressSprite(${1:CCSprite*_val})" }
,
		{ "trigger": "CCControlSlider_setTouchEnabled(bool_bValue,)", "contents": "setTouchEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCControlSlider_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCControlSlider_init()", "contents": "init()" }
,
		{ "trigger": "CCControlSlider_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCControlSlider_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCControlSlider_getMinimumAllowedValue()", "contents": "getMinimumAllowedValue()" }
,
		{ "trigger": "CCControlSlider_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCControlSlider_onExit()", "contents": "onExit()" }
,
		{ "trigger": "CCControlSlider_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCControlSlider_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCControlSlider_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCControlSlider_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "CCControlSlider_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCControlSlider_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCControlSlider_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCControlSlider_setEnabled(bool_bEnabled,)", "contents": "setEnabled(${1:bool_bEnabled})" }
,
		{ "trigger": "CCControlSlider_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCControlSlider_getBackgroundSprite()", "contents": "getBackgroundSprite()" }
,
		{ "trigger": "CCControlSlider_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCControlSlider_setMinimumAllowedValue(float_val,)", "contents": "setMinimumAllowedValue(${1:float_val})" }
,
		{ "trigger": "CCControlSlider_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCControlSlider_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCControlSlider_retain()", "contents": "retain()" }
,
		{ "trigger": "CCControlSlider_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCControlSlider_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCControlSlider_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCControlSlider_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCControlSlider_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCControlSlider_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCControlSlider_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCControlSlider_initWithSprites(CCSprite_*_backgroundSprite,CCSprite*_progressSprite,CCSprite*_thumbSprite,)", "contents": "initWithSprites(${1:CCSprite_*_backgroundSprite},${2:CCSprite*_progressSprite},${3:CCSprite*_thumbSprite})" }
,
		{ "trigger": "CCControlSlider_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCControlSlider_unregisterScriptKeypadHandler()", "contents": "unregisterScriptKeypadHandler()" }
,
		{ "trigger": "CCControlSlider_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCControlSlider_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCControlSlider_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCControlSlider_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCControlSlider_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCControlSlider_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCControlSlider_getTouchLocation(CCTouch*_touch,)", "contents": "getTouchLocation(${1:CCTouch*_touch})" }
,
		{ "trigger": "CCControlSlider_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCControlSlider_locationFromTouch(CCTouch*_touch,)", "contents": "locationFromTouch(${1:CCTouch*_touch})" }
,
		{ "trigger": "CCControlSlider_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCControlSlider_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCControlSlider_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCControlSlider_isAccelerometerEnabled()", "contents": "isAccelerometerEnabled()" }
,
		{ "trigger": "CCControlSlider_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCControlSlider_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCControlSlider_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCControlSlider_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCControlSlider_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCControlSlider_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCControlSlider_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCControlSlider_isKeypadEnabled()", "contents": "isKeypadEnabled()" }
,
		{ "trigger": "CCControlSlider_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCControlSlider_hasVisibleParents()", "contents": "hasVisibleParents()" }
,
		{ "trigger": "CCControlSlider_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCControlSlider_getMaximumAllowedValue()", "contents": "getMaximumAllowedValue()" }
,
		{ "trigger": "CCControlSlider_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCControlSlider_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCControlSlider_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCControlSlider_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCControlSlider_registerScriptTouchHandler(LUA_FUNCTION_nHandler,bool_bIsMultiTouches_=_false,int_nPriority_=_0,bool_bSwallowsTouches_=_false,)", "contents": "registerScriptTouchHandler(${1:LUA_FUNCTION_nHandler},${2:bool_bIsMultiTouches_=_false},${3:int_nPriority_=_0},${4:bool_bSwallowsTouches_=_false})" }
,
		{ "trigger": "CCControlSlider_setMaximumAllowedValue(float_val,)", "contents": "setMaximumAllowedValue(${1:float_val})" }
,
		{ "trigger": "CCControlSlider_isTouchInside(CCTouch_*_touch,)", "contents": "isTouchInside(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCControlSlider_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCControlSlider_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCControlSlider_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCControlSlider_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCControlSlider_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCControlSlider_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCControlSlider_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCControlSlider_getProgressSprite()", "contents": "getProgressSprite()" }
,
		{ "trigger": "CCControlSlider_release()", "contents": "release()" }
,
		{ "trigger": "CCControlSlider_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCControlSlider_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCControlSlider_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCControlSlider_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCControlSlider_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCControlSlider_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCControlSlider_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCControlSlider_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCControlSlider_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCControlSlider_setHighlighted(bool_bHighlighted,)", "contents": "setHighlighted(${1:bool_bHighlighted})" }
,
		{ "trigger": "CCControlSlider_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCControlSlider_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCControlSlider_needsLayout()", "contents": "needsLayout()" }
,
		{ "trigger": "CCControlSlider_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCControlSlider_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCControlSlider_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCControlSlider_getValue()", "contents": "getValue()" }
,
		{ "trigger": "CCControlSlider_setValue(float_val,)", "contents": "setValue(${1:float_val})" }
,
		{ "trigger": "CCControlSlider_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCControlSlider_getMaximumValue()", "contents": "getMaximumValue()" }
,
		{ "trigger": "CCControlSlider_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCControlSlider_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCControlSlider_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCControlSlider_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCControlSlider_getTouchPriority()", "contents": "getTouchPriority()" }
,
		{ "trigger": "CCControlSlider_copy()", "contents": "copy()" }
,
		{ "trigger": "CCControlSlider_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCControlSlider_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCControlSlider_addHandleOfControlEvent(LUA_FUNCTION_nFunID,CCControlEvent_controlEvents,)", "contents": "addHandleOfControlEvent(${1:LUA_FUNCTION_nFunID},${2:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCControlSlider_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "CCControlSlider_description()", "contents": "description()" }
,
		{ "trigger": "CCControlSlider_setTouchMode(ccTouchesMode_mode,)", "contents": "setTouchMode(${1:ccTouchesMode_mode})" }
,
		{ "trigger": "CCControlSlider_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCControlSlider_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCControlSlider_onEnter()", "contents": "onEnter()" }
,
		{ "trigger": "CCControlSlider_create(const_char*_bgFile,const_char*_progressFile,const_char*_thumbFile,)", "contents": "CCControlSlider:create(${1:const_char*_bgFile},${2:const_char*_progressFile},${3:const_char*_thumbFile})" }
,
		{ "trigger": "CCControlSlider_create(CCSprite_*_backgroundSprite,CCSprite*_pogressSprite,CCSprite*_thumbSprite,)", "contents": "CCControlSlider:create(${1:CCSprite_*_backgroundSprite},${2:CCSprite*_pogressSprite},${3:CCSprite*_thumbSprite})" }
,

		{ "trigger": "Button_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "Button_getCapInsetPressedRenderer()", "contents": "getCapInsetPressedRenderer()" }
,
		{ "trigger": "Button_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "Button_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "Button_getBottomInParent()", "contents": "getBottomInParent()" }
,
		{ "trigger": "Button_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "Button_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "Button_getCapInsetNormalRenderer()", "contents": "getCapInsetNormalRenderer()" }
,
		{ "trigger": "Button_loadTexturePressed(const_char*_selected,TextureResType_texType_=_UI_TEX_TYPE_LOCAL,)", "contents": "loadTexturePressed(${1:const_char*_selected},${2:TextureResType_texType_=_UI_TEX_TYPE_LOCAL})" }
,
		{ "trigger": "Button_setTitleColor(const_ccColor3B&_color,)", "contents": "setTitleColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "Button_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "Button_executeScriptEvent(int_eventName,)", "contents": "executeScriptEvent(${1:int_eventName})" }
,
		{ "trigger": "Button_draw()", "contents": "draw()" }
,
		{ "trigger": "Button_getNodes()", "contents": "getNodes()" }
,
		{ "trigger": "Button_loadTextureNormal(const_char*_normal,TextureResType_texType_=_UI_TEX_TYPE_LOCAL,)", "contents": "loadTextureNormal(${1:const_char*_normal},${2:TextureResType_texType_=_UI_TEX_TYPE_LOCAL})" }
,
		{ "trigger": "Button_setScale9Enabled(bool_able,)", "contents": "setScale9Enabled(${1:bool_able})" }
,
		{ "trigger": "Button_isBright()", "contents": "isBright()" }
,
		{ "trigger": "Button_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "Button_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "Button_ignoreContentAdaptWithSize(bool_ignore,)", "contents": "ignoreContentAdaptWithSize(${1:bool_ignore})" }
,
		{ "trigger": "Button_onTouchBegan(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchBegan(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "Button_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "Button_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "Button_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "Button_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "Button_visit()", "contents": "visit()" }
,
		{ "trigger": "Button_getTopInParent()", "contents": "getTopInParent()" }
,
		{ "trigger": "Button_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "Button_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "Button_getTitleFontSize()", "contents": "getTitleFontSize()" }
,
		{ "trigger": "Button_didNotSelectSelf()", "contents": "didNotSelectSelf()" }
,
		{ "trigger": "Button_setSizeType(SizeType_type,)", "contents": "setSizeType(${1:SizeType_type})" }
,
		{ "trigger": "Button_getNodeByTag(int_tag,)", "contents": "getNodeByTag(${1:int_tag})" }
,
		{ "trigger": "Button_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "Button_getPositionPercent()", "contents": "getPositionPercent()" }
,
		{ "trigger": "Button_setPosition(const_CCPoint_&pos,)", "contents": "setPosition(${1:const_CCPoint_&pos})" }
,
		{ "trigger": "Button_setFlipY(bool_flipY,)", "contents": "setFlipY(${1:bool_flipY})" }
,
		{ "trigger": "Button_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "Button_setSize(const_CCSize_&size,)", "contents": "setSize(${1:const_CCSize_&size})" }
,
		{ "trigger": "Button_clone()", "contents": "clone()" }
,
		{ "trigger": "Button_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "Button_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "Button_getTouchEndPos()", "contents": "getTouchEndPos()" }
,
		{ "trigger": "Button_onTouchEnded(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchEnded(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "Button_onTouchMoved(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchMoved(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "Button_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "Button_setFlipX(bool_flipX,)", "contents": "setFlipX(${1:bool_flipX})" }
,
		{ "trigger": "Button_setTouchEnabled(bool_enabled,)", "contents": "setTouchEnabled(${1:bool_enabled})" }
,
		{ "trigger": "Button_setCapInsets(const_CCRect_&capInsets,)", "contents": "setCapInsets(${1:const_CCRect_&capInsets})" }
,
		{ "trigger": "Button_setTouchEnable(bool_enabled,bool_containChildren_=_false,)", "contents": "setTouchEnable(${1:bool_enabled},${2:bool_containChildren_=_false})" }
,
		{ "trigger": "Button_transform()", "contents": "transform()" }
,
		{ "trigger": "Button_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "Button_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "Button_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "Button_removeAllNodes()", "contents": "removeAllNodes()" }
,
		{ "trigger": "Button_getLayoutParameter(LayoutParameterType_type,)", "contents": "getLayoutParameter(${1:LayoutParameterType_type})" }
,
		{ "trigger": "Button_getChildByName(const_char*_name,)", "contents": "getChildByName(${1:const_char*_name})" }
,
		{ "trigger": "Button_getVirtualRenderer()", "contents": "getVirtualRenderer()" }
,
		{ "trigger": "Button_setAnchorPoint(const_CCPoint_&pt,)", "contents": "setAnchorPoint(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "Button_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "Button_getLayoutSize()", "contents": "getLayoutSize()" }
,
		{ "trigger": "Button_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "Button_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "Button_setCapInsetsPressedRenderer(const_CCRect_&capInsets,)", "contents": "setCapInsetsPressedRenderer(${1:const_CCRect_&capInsets})" }
,
		{ "trigger": "Button_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "Button_getRightInParent()", "contents": "getRightInParent()" }
,
		{ "trigger": "Button_getDescription()", "contents": "getDescription()" }
,
		{ "trigger": "Button_retain()", "contents": "retain()" }
,
		{ "trigger": "Button_getRect()", "contents": "getRect()" }
,
		{ "trigger": "Button_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "Button_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "Button_isFlipX()", "contents": "isFlipX()" }
,
		{ "trigger": "Button_disable()", "contents": "disable()" }
,
		{ "trigger": "Button_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "Button_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "Button_getName()", "contents": "getName()" }
,
		{ "trigger": "Button_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "Button_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "Button_updateSizeAndPosition(const_CCSize&_parentSize,)", "contents": "updateSizeAndPosition(${1:const_CCSize&_parentSize})" }
,
		{ "trigger": "Button_addNode(CCNode_*_node,int_zOrder,)", "contents": "addNode(${1:CCNode_*_node},${2:int_zOrder})" }
,
		{ "trigger": "Button_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "Button_getWidgetType()", "contents": "getWidgetType()" }
,
		{ "trigger": "Button_setSizePercent(const_CCPoint_&percent,)", "contents": "setSizePercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "Button_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "Button_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "Button_addNode(CCNode*_node,)", "contents": "addNode(${1:CCNode*_node})" }
,
		{ "trigger": "Button_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "Button_getTouchMovePos()", "contents": "getTouchMovePos()" }
,
		{ "trigger": "Button_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "Button_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "Button_setBright(bool_bright,)", "contents": "setBright(${1:bool_bright})" }
,
		{ "trigger": "Button_active()", "contents": "active()" }
,
		{ "trigger": "Button_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "Button_removeChild(CCNode*_child,)", "contents": "removeChild(${1:CCNode*_child})" }
,
		{ "trigger": "Button_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "Button_getTag()", "contents": "getTag()" }
,
		{ "trigger": "Button_removeAllChildren()", "contents": "removeAllChildren()" }
,
		{ "trigger": "Button_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "Button_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "Button_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "Button_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "Button_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "Button_setFocused(bool_fucosed,)", "contents": "setFocused(${1:bool_fucosed})" }
,
		{ "trigger": "Button_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "Button_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "Button_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "Button_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "Button_isFlipY()", "contents": "isFlipY()" }
,
		{ "trigger": "Button_setBrightStyle(BrightStyle_style,)", "contents": "setBrightStyle(${1:BrightStyle_style})" }
,
		{ "trigger": "Button_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "Button_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "Button_loadTextureDisabled(const_char*_disabled,TextureResType_texType_=_UI_TEX_TYPE_LOCAL,)", "contents": "loadTextureDisabled(${1:const_char*_disabled},${2:TextureResType_texType_=_UI_TEX_TYPE_LOCAL})" }
,
		{ "trigger": "Button_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "Button_setTitleFontName(const_char*_fontName,)", "contents": "setTitleFontName(${1:const_char*_fontName})" }
,
		{ "trigger": "Button_setTitleText(const_std::string&_text,)", "contents": "setTitleText(${1:const_std::string&_text})" }
,
		{ "trigger": "Button_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "Button_isScale9Enabled()", "contents": "isScale9Enabled()" }
,
		{ "trigger": "Button_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "Button_setCapInsetsDisabledRenderer(const_CCRect_&capInsets,)", "contents": "setCapInsetsDisabledRenderer(${1:const_CCRect_&capInsets})" }
,
		{ "trigger": "Button_setLayoutParameter(LayoutParameter*_parameter,)", "contents": "setLayoutParameter(${1:LayoutParameter*_parameter})" }
,
		{ "trigger": "Button_setTitleFontSize(float_size,)", "contents": "setTitleFontSize(${1:float_size})" }
,
		{ "trigger": "Button_getColor()", "contents": "getColor()" }
,
		{ "trigger": "Button_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "Button_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "Button_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "Button_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "Button_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "Button_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "Button_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "Button_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "Button_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "Button_loadTextures(const_char*_normal,const_char*_selected,const_char*_disabled,TextureResType_texType_=_UI_TEX_TYPE_LOCAL,)", "contents": "loadTextures(${1:const_char*_normal},${2:const_char*_selected},${3:const_char*_disabled},${4:TextureResType_texType_=_UI_TEX_TYPE_LOCAL})" }
,
		{ "trigger": "Button_setPositionPercent(const_CCPoint_&percent,)", "contents": "setPositionPercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "Button_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "Button_getSize()", "contents": "getSize()" }
,
		{ "trigger": "Button_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "Button_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "Button_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "Button_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "Button_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "Button_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "Button_setText(const_std::string&_text,)", "contents": "setText(${1:const_std::string&_text})" }
,
		{ "trigger": "Button_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "Button_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "Button_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "Button_getTouchStartPos()", "contents": "getTouchStartPos()" }
,
		{ "trigger": "Button_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "Button_hitTest(const_CCPoint_&pt,)", "contents": "hitTest(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "Button_clippingParentAreaContainPoint(const_CCPoint_&pt,)", "contents": "clippingParentAreaContainPoint(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "Button_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "Button_sortAllChildren()", "contents": "sortAllChildren()" }
,
		{ "trigger": "Button_getSizePercent()", "contents": "getSizePercent()" }
,
		{ "trigger": "Button_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "Button_updateSizeAndPosition()", "contents": "updateSizeAndPosition()" }
,
		{ "trigger": "Button_getWidgetByTag(int_tag,)", "contents": "getWidgetByTag(${1:int_tag})" }
,
		{ "trigger": "Button_getParent()", "contents": "getParent()" }
,
		{ "trigger": "Button_setName(const_char*_name,)", "contents": "setName(${1:const_char*_name})" }
,
		{ "trigger": "Button_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "Button_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "Button_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "Button_isFocused()", "contents": "isFocused()" }
,
		{ "trigger": "Button_setSoundEff(std::string_eff,)", "contents": "setSoundEff(${1:std::string_eff})" }
,
		{ "trigger": "Button_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "Button_visit()", "contents": "visit()" }
,
		{ "trigger": "Button_getTitleColor()", "contents": "getTitleColor()" }
,
		{ "trigger": "Button_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "Button_getTitleFontName()", "contents": "getTitleFontName()" }
,
		{ "trigger": "Button_setCapInsetsNormalRenderer(const_CCRect_&capInsets,)", "contents": "setCapInsetsNormalRenderer(${1:const_CCRect_&capInsets})" }
,
		{ "trigger": "Button_addNode(CCNode*_node,int_zOrder,int_tag,)", "contents": "addNode(${1:CCNode*_node},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "Button_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "Button_getActionTag()", "contents": "getActionTag()" }
,
		{ "trigger": "Button_release()", "contents": "release()" }
,
		{ "trigger": "Button_setActionTag(int_tag,)", "contents": "setActionTag(${1:int_tag})" }
,
		{ "trigger": "Button_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "Button_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "Button_checkChildInfo(int_handleState,Widget*_sender,const_CCPoint_&touchPoint,)", "contents": "checkChildInfo(${1:int_handleState},${2:Widget*_sender},${3:const_CCPoint_&touchPoint})" }
,
		{ "trigger": "Button_removeFromParent()", "contents": "removeFromParent()" }
,
		{ "trigger": "Button_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "Button_removeNodeByTag(int_tag,)", "contents": "removeNodeByTag(${1:int_tag})" }
,
		{ "trigger": "Button_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "Button_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "Button_isIgnoreContentAdaptWithSize()", "contents": "isIgnoreContentAdaptWithSize()" }
,
		{ "trigger": "Button_getLeftInParent()", "contents": "getLeftInParent()" }
,
		{ "trigger": "Button_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "Button_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "Button_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "Button_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "Button_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "Button_getScale()", "contents": "getScale()" }
,
		{ "trigger": "Button_removeNode(CCNode*_node,)", "contents": "removeNode(${1:CCNode*_node})" }
,
		{ "trigger": "Button_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "Button_onExit()", "contents": "onExit()" }
,
		{ "trigger": "Button_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "Button_getTitleText()", "contents": "getTitleText()" }
,
		{ "trigger": "Button_getWorldPosition()", "contents": "getWorldPosition()" }
,
		{ "trigger": "Button_copy()", "contents": "copy()" }
,
		{ "trigger": "Button_setPressedActionEnabled(bool_enabled,)", "contents": "setPressedActionEnabled(${1:bool_enabled})" }
,
		{ "trigger": "Button_setPositionType(PositionType_type,)", "contents": "setPositionType(${1:PositionType_type})" }
,
		{ "trigger": "Button_onTouchCancelled(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchCancelled(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "Button_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "Button_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "Button_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "Button_description()", "contents": "description()" }
,
		{ "trigger": "Button_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "Button_getCapInsetDisabledRenderer()", "contents": "getCapInsetDisabledRenderer()" }
,
		{ "trigger": "Button_getSizeType()", "contents": "getSizeType()" }
,
		{ "trigger": "Button_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "Button_onEnter()", "contents": "onEnter()" }
,
		{ "trigger": "Button_getCustomSize()", "contents": "getCustomSize()" }
,
		{ "trigger": "Button_addChild(CCNode*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "Button_create()", "contents": "Button:create()" }
,

		{ "trigger": "CCWavesTiles3D_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCWavesTiles3D_originalTile(CCPoint_pos,)", "contents": "originalTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCWavesTiles3D_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCWavesTiles3D_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCWavesTiles3D_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCWavesTiles3D_release()", "contents": "release()" }
,
		{ "trigger": "CCWavesTiles3D_setTile(CCPoint_pos,ccQuad3_coords,)", "contents": "setTile(${1:CCPoint_pos},${2:ccQuad3_coords})" }
,
		{ "trigger": "CCWavesTiles3D_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCWavesTiles3D_retain()", "contents": "retain()" }
,
		{ "trigger": "CCWavesTiles3D_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCWavesTiles3D_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCWavesTiles3D_tile(CCPoint_pos,)", "contents": "tile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCWavesTiles3D_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCWavesTiles3D_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCWavesTiles3D_setAmplitude(float_fAmplitude,)", "contents": "setAmplitude(${1:float_fAmplitude})" }
,
		{ "trigger": "CCWavesTiles3D_copy()", "contents": "copy()" }
,
		{ "trigger": "CCWavesTiles3D_getAmplitude()", "contents": "getAmplitude()" }
,
		{ "trigger": "CCWavesTiles3D_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCWavesTiles3D_setAmplitudeRate(float_fAmplitudeRate,)", "contents": "setAmplitudeRate(${1:float_fAmplitudeRate})" }
,
		{ "trigger": "CCWavesTiles3D_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCWavesTiles3D_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCWavesTiles3D_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCWavesTiles3D_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCWavesTiles3D_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCWavesTiles3D_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCWavesTiles3D_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCWavesTiles3D_create(float_duration,CCSize_gridSize,unsigned_int_waves,float_amplitude,)", "contents": "CCWavesTiles3D:create(${1:float_duration},${2:CCSize_gridSize},${3:unsigned_int_waves},${4:float_amplitude})" }
,

		{ "trigger": "CCEaseExponentialInOut_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseExponentialInOut_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseExponentialInOut_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseExponentialInOut_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseExponentialInOut_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseExponentialInOut_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseExponentialInOut_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseExponentialInOut_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseExponentialInOut_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseExponentialInOut_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseExponentialInOut_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseExponentialInOut_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseExponentialInOut_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseExponentialInOut_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseExponentialInOut_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseExponentialInOut_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseExponentialInOut_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseExponentialInOut_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseExponentialInOut_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseExponentialInOut_create(CCActionInterval*_pAction,)", "contents": "CCEaseExponentialInOut:create(${1:CCActionInterval*_pAction})" }
,

		{ "trigger": "RichElementImage_copy()", "contents": "copy()" }
,
		{ "trigger": "RichElementImage_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "RichElementImage_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "RichElementImage_init(int_tag,const_ccColor3B&_color,GLubyte_opacity,const_char*_filePath,)", "contents": "init(${1:int_tag},${2:const_ccColor3B&_color},${3:GLubyte_opacity},${4:const_char*_filePath})" }
,
		{ "trigger": "RichElementImage_release()", "contents": "release()" }
,
		{ "trigger": "RichElementImage_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "RichElementImage_retain()", "contents": "retain()" }
,
		{ "trigger": "RichElementImage_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "RichElementImage_create(int_tag,const_ccColor3B&_color,GLubyte_opacity,const_char*_filePath,)", "contents": "RichElementImage:create(${1:int_tag},${2:const_ccColor3B&_color},${3:GLubyte_opacity},${4:const_char*_filePath})" }
,

		{ "trigger": "CCTurnOffTiles_turnOffTile(CCPoint_pos,)", "contents": "turnOffTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTurnOffTiles_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCTurnOffTiles_originalTile(CCPoint_pos,)", "contents": "originalTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTurnOffTiles_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTurnOffTiles_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTurnOffTiles_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCTurnOffTiles_release()", "contents": "release()" }
,
		{ "trigger": "CCTurnOffTiles_setTile(CCPoint_pos,ccQuad3_coords,)", "contents": "setTile(${1:CCPoint_pos},${2:ccQuad3_coords})" }
,
		{ "trigger": "CCTurnOffTiles_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCTurnOffTiles_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTurnOffTiles_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCTurnOffTiles_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCTurnOffTiles_tile(CCPoint_pos,)", "contents": "tile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTurnOffTiles_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCTurnOffTiles_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTurnOffTiles_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCTurnOffTiles_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTurnOffTiles_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTurnOffTiles_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTurnOffTiles_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCTurnOffTiles_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCTurnOffTiles_shuffle(unsigned_int_*pArray,int_nLen,)", "contents": "shuffle(${1:unsigned_int_*pArray},${2:int_nLen})" }
,
		{ "trigger": "CCTurnOffTiles_turnOnTile(CCPoint_pos,)", "contents": "turnOnTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTurnOffTiles_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTurnOffTiles_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCTurnOffTiles_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCTurnOffTiles_create(float_duration,CCSize_gridSize,unsigned_int_seed,)", "contents": "CCTurnOffTiles:create(${1:float_duration},${2:CCSize_gridSize},${3:unsigned_int_seed})" }
,
		{ "trigger": "CCTurnOffTiles_create(float_duration,CCSize_gridSize,)", "contents": "CCTurnOffTiles:create(${1:float_duration},${2:CCSize_gridSize})" }
,

		{ "trigger": "MGNAssetsManager_registerAssetsManagerScriptEvent(LUA_FUNCTION_nHandler,)", "contents": "registerAssetsManagerScriptEvent(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "MGNAssetsManager_download()", "contents": "download()" }
,
		{ "trigger": "MGNAssetsManager_updateAssets(string_strURL,)", "contents": "updateAssets(${1:string_strURL})" }
,
		{ "trigger": "MGNAssetsManager_deleteDownloadDir()", "contents": "deleteDownloadDir()" }
,
		{ "trigger": "MGNAssetsManager_getConnectionTimeout()", "contents": "getConnectionTimeout()" }
,
		{ "trigger": "MGNAssetsManager_setStoragePath(const_char*_storagePath,)", "contents": "setStoragePath(${1:const_char*_storagePath})" }
,
		{ "trigger": "MGNAssetsManager_unRegisterAssetsManagerScriptEvent()", "contents": "unRegisterAssetsManagerScriptEvent()" }
,
		{ "trigger": "MGNAssetsManager_createDownLoadDir()", "contents": "createDownLoadDir()" }
,
		{ "trigger": "MGNAssetsManager_setSearchPath()", "contents": "setSearchPath()" }
,
		{ "trigger": "MGNAssetsManager_setDelegate(MGNAssetsManagerDelegateProtocol_*delegate,)", "contents": "setDelegate(${1:MGNAssetsManagerDelegateProtocol_*delegate})" }
,
		{ "trigger": "MGNAssetsManager_getStoragePath()", "contents": "getStoragePath()" }
,
		{ "trigger": "MGNAssetsManager_executeAssetsManagerScriptEvent(MGNAssetsManagerUpdataState_state,int_PorOrErrorID,)", "contents": "executeAssetsManagerScriptEvent(${1:MGNAssetsManagerUpdataState_state},${2:int_PorOrErrorID})" }
,
		{ "trigger": "MGNAssetsManager_uncompress()", "contents": "uncompress()" }
,
		{ "trigger": "MGNAssetsManager_setConnectionTimeout(unsigned_int_timeout,)", "contents": "setConnectionTimeout(${1:unsigned_int_timeout})" }
,
		{ "trigger": "MGNAssetsManager_createDirectory(const_char_*path,)", "contents": "createDirectory(${1:const_char_*path})" }
,
		{ "trigger": "MGNAssetsManager_getInstance()", "contents": "MGNAssetsManager:getInstance()" }
,

		{ "trigger": "GUIReader_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "GUIReader_copy()", "contents": "copy()" }
,
		{ "trigger": "GUIReader_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "GUIReader_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "GUIReader_storeFileDesignSize(const_char*_fileName,const_CCSize_&size,)", "contents": "storeFileDesignSize(${1:const_char*_fileName},${2:const_CCSize_&size})" }
,
		{ "trigger": "GUIReader_getFileDesignSize(const_char*_fileName,)", "contents": "getFileDesignSize(${1:const_char*_fileName})" }
,
		{ "trigger": "GUIReader_getFilePath()", "contents": "getFilePath()" }
,
		{ "trigger": "GUIReader_retain()", "contents": "retain()" }
,
		{ "trigger": "GUIReader_release()", "contents": "release()" }
,
		{ "trigger": "GUIReader_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "GUIReader_getVersionInteger(const_char*_str,)", "contents": "getVersionInteger(${1:const_char*_str})" }
,
		{ "trigger": "GUIReader_widgetFromBinaryFile(const_char*_fileName,)", "contents": "widgetFromBinaryFile(${1:const_char*_fileName})" }
,
		{ "trigger": "GUIReader_widgetFromJsonFile(const_char*_fileName,)", "contents": "widgetFromJsonFile(${1:const_char*_fileName})" }
,
		{ "trigger": "GUIReader_shareReader()", "contents": "GUIReader:shareReader()" }
,
		{ "trigger": "GUIReader_purge()", "contents": "GUIReader:purge()" }
,

		{ "trigger": "CCTextFieldTTF_setScaleX(float_fScaleX,)", "contents": "setScaleX(${1:float_fScaleX})" }
,
		{ "trigger": "CCTextFieldTTF_reorderChild(CCNode*_pChild,int_zOrder,)", "contents": "reorderChild(${1:CCNode*_pChild},${2:int_zOrder})" }
,
		{ "trigger": "CCTextFieldTTF_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTextFieldTTF_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTextFieldTTF_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCTextFieldTTF_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCTextFieldTTF_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTextFieldTTF_setFlipY(bool_bFlipY,)", "contents": "setFlipY(${1:bool_bFlipY})" }
,
		{ "trigger": "CCTextFieldTTF_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTextFieldTTF_setTextureRect(CCRect_rect,bool_rotated,CCSize_size,)", "contents": "setTextureRect(${1:CCRect_rect},${2:bool_rotated},${3:CCSize_size})" }
,
		{ "trigger": "CCTextFieldTTF_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTextFieldTTF_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCTextFieldTTF_init()", "contents": "init()" }
,
		{ "trigger": "CCTextFieldTTF_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTextFieldTTF_attachWithIME()", "contents": "attachWithIME()" }
,
		{ "trigger": "CCTextFieldTTF_setSkewY(float_sy,)", "contents": "setSkewY(${1:float_sy})" }
,
		{ "trigger": "CCTextFieldTTF_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCTextFieldTTF_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTextFieldTTF_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTextFieldTTF_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCTextFieldTTF_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCTextFieldTTF_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCTextFieldTTF_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCTextFieldTTF_setVisible(bool_bVisible,)", "contents": "setVisible(${1:bool_bVisible})" }
,
		{ "trigger": "CCTextFieldTTF_getVerticalAlignment()", "contents": "getVerticalAlignment()" }
,
		{ "trigger": "CCTextFieldTTF_setFontName(const_char_*fontName,)", "contents": "setFontName(${1:const_char_*fontName})" }
,
		{ "trigger": "CCTextFieldTTF_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTextFieldTTF_getQuad()", "contents": "getQuad()" }
,
		{ "trigger": "CCTextFieldTTF_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTextFieldTTF_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTextFieldTTF_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTextFieldTTF_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTextFieldTTF_getString()", "contents": "getString()" }
,
		{ "trigger": "CCTextFieldTTF_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTextFieldTTF_setPlaceHolder(const_char_*_text,)", "contents": "setPlaceHolder(${1:const_char_*_text})" }
,
		{ "trigger": "CCTextFieldTTF_setDisplayFrameWithAnimationName(const_char_*animationName,int_frameIndex,)", "contents": "setDisplayFrameWithAnimationName(${1:const_char_*animationName},${2:int_frameIndex})" }
,
		{ "trigger": "CCTextFieldTTF_removeAllChildrenWithCleanup(bool_bCleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_bCleanup})" }
,
		{ "trigger": "CCTextFieldTTF_displayFrame()", "contents": "displayFrame()" }
,
		{ "trigger": "CCTextFieldTTF_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTextFieldTTF_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTextFieldTTF_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTextFieldTTF_getPlaceHolder()", "contents": "getPlaceHolder()" }
,
		{ "trigger": "CCTextFieldTTF_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTextFieldTTF_getDimensions()", "contents": "getDimensions()" }
,
		{ "trigger": "CCTextFieldTTF_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCTextFieldTTF_setDisplayFrame(CCSpriteFrame_*pNewFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame_*pNewFrame})" }
,
		{ "trigger": "CCTextFieldTTF_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTextFieldTTF_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCTextFieldTTF_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTextFieldTTF_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTextFieldTTF_getCharCount()", "contents": "getCharCount()" }
,
		{ "trigger": "CCTextFieldTTF_getFontName()", "contents": "getFontName()" }
,
		{ "trigger": "CCTextFieldTTF_setBlendFunc(ccBlendFunc_blendFunc,)", "contents": "setBlendFunc(${1:ccBlendFunc_blendFunc})" }
,
		{ "trigger": "CCTextFieldTTF_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCTextFieldTTF_setScaleY(float_fScaleY,)", "contents": "setScaleY(${1:float_fScaleY})" }
,
		{ "trigger": "CCTextFieldTTF_setFontSize(float_fontSize,)", "contents": "setFontSize(${1:float_fontSize})" }
,
		{ "trigger": "CCTextFieldTTF_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTextFieldTTF_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTextFieldTTF_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTextFieldTTF_setAtlasIndex(unsigned_int_uAtlasIndex,)", "contents": "setAtlasIndex(${1:unsigned_int_uAtlasIndex})" }
,
		{ "trigger": "CCTextFieldTTF_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTextFieldTTF_isDirty()", "contents": "isDirty()" }
,
		{ "trigger": "CCTextFieldTTF_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTextFieldTTF_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCTextFieldTTF_addChild(CCNode*_pChild,int_zOrder,)", "contents": "addChild(${1:CCNode*_pChild},${2:int_zOrder})" }
,
		{ "trigger": "CCTextFieldTTF_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTextFieldTTF_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTextFieldTTF_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTextFieldTTF_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTextFieldTTF_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTextFieldTTF_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTextFieldTTF_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTextFieldTTF_isFlipY()", "contents": "isFlipY()" }
,
		{ "trigger": "CCTextFieldTTF_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTextFieldTTF_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTextFieldTTF_setDimensions(CCSize_&dim,)", "contents": "setDimensions(${1:CCSize_&dim})" }
,
		{ "trigger": "CCTextFieldTTF_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTextFieldTTF_getTextureAtlas()", "contents": "getTextureAtlas()" }
,
		{ "trigger": "CCTextFieldTTF_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCTextFieldTTF_isFrameDisplayed(CCSpriteFrame_*pFrame,)", "contents": "isFrameDisplayed(${1:CCSpriteFrame_*pFrame})" }
,
		{ "trigger": "CCTextFieldTTF_setColorSpaceHolder(ccColor3B_val,)", "contents": "setColorSpaceHolder(${1:ccColor3B_val})" }
,
		{ "trigger": "CCTextFieldTTF_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCTextFieldTTF_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTextFieldTTF_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTextFieldTTF_getColorSpaceHolder()", "contents": "getColorSpaceHolder()" }
,
		{ "trigger": "CCTextFieldTTF_detachWithIME()", "contents": "detachWithIME()" }
,
		{ "trigger": "CCTextFieldTTF_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTextFieldTTF_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTextFieldTTF_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTextFieldTTF_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTextFieldTTF_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCTextFieldTTF_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCTextFieldTTF_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTextFieldTTF_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTextFieldTTF_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTextFieldTTF_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCTextFieldTTF_getFontSize()", "contents": "getFontSize()" }
,
		{ "trigger": "CCTextFieldTTF_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTextFieldTTF_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTextFieldTTF_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTextFieldTTF_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTextFieldTTF_addChild(CCNode*_pChild,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode*_pChild},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTextFieldTTF_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCTextFieldTTF_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTextFieldTTF_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTextFieldTTF_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCTextFieldTTF_setVertexRect(CCRect_rect,)", "contents": "setVertexRect(${1:CCRect_rect})" }
,
		{ "trigger": "CCTextFieldTTF_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCTextFieldTTF_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTextFieldTTF_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTextFieldTTF_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTextFieldTTF_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTextFieldTTF_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTextFieldTTF_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTextFieldTTF_setScale(float_fScale,)", "contents": "setScale(${1:float_fScale})" }
,
		{ "trigger": "CCTextFieldTTF_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTextFieldTTF_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCTextFieldTTF_getOffsetPosition()", "contents": "getOffsetPosition()" }
,
		{ "trigger": "CCTextFieldTTF_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTextFieldTTF_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTextFieldTTF_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTextFieldTTF_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTextFieldTTF_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTextFieldTTF_setColor(ccColor3B_color3,)", "contents": "setColor(${1:ccColor3B_color3})" }
,
		{ "trigger": "CCTextFieldTTF_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTextFieldTTF_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTextFieldTTF_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCTextFieldTTF_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTextFieldTTF_setRotation(float_rotation,)", "contents": "setRotation(${1:float_rotation})" }
,
		{ "trigger": "CCTextFieldTTF_setVertexZ(float_fVertexZ,)", "contents": "setVertexZ(${1:float_fVertexZ})" }
,
		{ "trigger": "CCTextFieldTTF_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTextFieldTTF_isTextureRectRotated()", "contents": "isTextureRectRotated()" }
,
		{ "trigger": "CCTextFieldTTF_sortAllChildren()", "contents": "sortAllChildren()" }
,
		{ "trigger": "CCTextFieldTTF_setString(const_char_*text,)", "contents": "setString(${1:const_char_*text})" }
,
		{ "trigger": "CCTextFieldTTF_setBatchNode(CCSpriteBatchNode*_pBatchNode,)", "contents": "setBatchNode(${1:CCSpriteBatchNode*_pBatchNode})" }
,
		{ "trigger": "CCTextFieldTTF_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTextFieldTTF_getAtlasIndex()", "contents": "getAtlasIndex()" }
,
		{ "trigger": "CCTextFieldTTF_setTexture(CCTexture2D_*texture,)", "contents": "setTexture(${1:CCTexture2D_*texture})" }
,
		{ "trigger": "CCTextFieldTTF_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTextFieldTTF_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTextFieldTTF_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTextFieldTTF_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTextFieldTTF_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCTextFieldTTF_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTextFieldTTF_updateTransform()", "contents": "updateTransform()" }
,
		{ "trigger": "CCTextFieldTTF_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTextFieldTTF_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTextFieldTTF_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTextFieldTTF_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTextFieldTTF_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTextFieldTTF_setVerticalAlignment(CCVerticalTextAlignment_verticalAlignment,)", "contents": "setVerticalAlignment(${1:CCVerticalTextAlignment_verticalAlignment})" }
,
		{ "trigger": "CCTextFieldTTF_release()", "contents": "release()" }
,
		{ "trigger": "CCTextFieldTTF_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTextFieldTTF_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTextFieldTTF_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCTextFieldTTF_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTextFieldTTF_setHorizontalAlignment(CCTextAlignment_alignment,)", "contents": "setHorizontalAlignment(${1:CCTextAlignment_alignment})" }
,
		{ "trigger": "CCTextFieldTTF_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTextFieldTTF_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTextFieldTTF_getTextureRect()", "contents": "getTextureRect()" }
,
		{ "trigger": "CCTextFieldTTF_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTextFieldTTF_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCTextFieldTTF_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCTextFieldTTF_setTextureAtlas(CCTextureAtlas_*pobTextureAtlas,)", "contents": "setTextureAtlas(${1:CCTextureAtlas_*pobTextureAtlas})" }
,
		{ "trigger": "CCTextFieldTTF_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTextFieldTTF_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTextFieldTTF_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTextFieldTTF_removeChild(CCNode*_pChild,bool_bCleanUp,)", "contents": "removeChild(${1:CCNode*_pChild},${2:bool_bCleanUp})" }
,
		{ "trigger": "CCTextFieldTTF_isFlipX()", "contents": "isFlipX()" }
,
		{ "trigger": "CCTextFieldTTF_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTextFieldTTF_setDirty(bool_bDirty,)", "contents": "setDirty(${1:bool_bDirty})" }
,
		{ "trigger": "CCTextFieldTTF_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTextFieldTTF_setFlipX(bool_bFlipX,)", "contents": "setFlipX(${1:bool_bFlipX})" }
,
		{ "trigger": "CCTextFieldTTF_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTextFieldTTF_setSkewX(float_sx,)", "contents": "setSkewX(${1:float_sx})" }
,
		{ "trigger": "CCTextFieldTTF_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCTextFieldTTF_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTextFieldTTF_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCTextFieldTTF_setTextureRect(CCRect_rect,)", "contents": "setTextureRect(${1:CCRect_rect})" }
,
		{ "trigger": "CCTextFieldTTF_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCTextFieldTTF_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTextFieldTTF_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTextFieldTTF_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCTextFieldTTF_description()", "contents": "description()" }
,
		{ "trigger": "CCTextFieldTTF_setString(const_char_*label,)", "contents": "setString(${1:const_char_*label})" }
,
		{ "trigger": "CCTextFieldTTF_addChild(CCNode*_pChild,)", "contents": "addChild(${1:CCNode*_pChild})" }
,
		{ "trigger": "CCTextFieldTTF_getHorizontalAlignment()", "contents": "getHorizontalAlignment()" }
,
		{ "trigger": "CCTextFieldTTF_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTextFieldTTF_textFieldWithPlaceHolder(const_char_*placeholder,CCSize_dimensions,CCTextAlignment_alignment,const_char_*fontName,float_fontSize,)", "contents": "CCTextFieldTTF:textFieldWithPlaceHolder(${1:const_char_*placeholder},${2:CCSize_dimensions},${3:CCTextAlignment_alignment},${4:const_char_*fontName},${5:float_fontSize})" }
,
		{ "trigger": "CCTextFieldTTF_textFieldWithPlaceHolder(const_char_*placeholder,const_char_*fontName,float_fontSize,)", "contents": "CCTextFieldTTF:textFieldWithPlaceHolder(${1:const_char_*placeholder},${2:const_char_*fontName},${3:float_fontSize})" }
,


		{ "trigger": "CCTransitionJumpZoom_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTransitionJumpZoom_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTransitionJumpZoom_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTransitionJumpZoom_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTransitionJumpZoom_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTransitionJumpZoom_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTransitionJumpZoom_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTransitionJumpZoom_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTransitionJumpZoom_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCTransitionJumpZoom_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCTransitionJumpZoom_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionJumpZoom_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTransitionJumpZoom_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTransitionJumpZoom_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionJumpZoom_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionJumpZoom_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTransitionJumpZoom_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionJumpZoom_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTransitionJumpZoom_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCTransitionJumpZoom_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionJumpZoom_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTransitionJumpZoom_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionJumpZoom_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTransitionJumpZoom_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionJumpZoom_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTransitionJumpZoom_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTransitionJumpZoom_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCTransitionJumpZoom_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTransitionJumpZoom_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTransitionJumpZoom_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTransitionJumpZoom_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTransitionJumpZoom_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTransitionJumpZoom_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTransitionJumpZoom_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionJumpZoom_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTransitionJumpZoom_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTransitionJumpZoom_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionJumpZoom_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTransitionJumpZoom_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTransitionJumpZoom_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTransitionJumpZoom_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTransitionJumpZoom_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionJumpZoom_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionJumpZoom_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionJumpZoom_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTransitionJumpZoom_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTransitionJumpZoom_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTransitionJumpZoom_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTransitionJumpZoom_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTransitionJumpZoom_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTransitionJumpZoom_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTransitionJumpZoom_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionJumpZoom_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTransitionJumpZoom_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTransitionJumpZoom_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTransitionJumpZoom_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTransitionJumpZoom_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTransitionJumpZoom_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTransitionJumpZoom_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTransitionJumpZoom_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTransitionJumpZoom_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTransitionJumpZoom_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionJumpZoom_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTransitionJumpZoom_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTransitionJumpZoom_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTransitionJumpZoom_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTransitionJumpZoom_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTransitionJumpZoom_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTransitionJumpZoom_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTransitionJumpZoom_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTransitionJumpZoom_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionJumpZoom_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTransitionJumpZoom_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTransitionJumpZoom_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTransitionJumpZoom_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTransitionJumpZoom_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionJumpZoom_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTransitionJumpZoom_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTransitionJumpZoom_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTransitionJumpZoom_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTransitionJumpZoom_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTransitionJumpZoom_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionJumpZoom_release()", "contents": "release()" }
,
		{ "trigger": "CCTransitionJumpZoom_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionJumpZoom_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionJumpZoom_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionJumpZoom_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTransitionJumpZoom_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTransitionJumpZoom_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTransitionJumpZoom_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCTransitionJumpZoom_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTransitionJumpZoom_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTransitionJumpZoom_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTransitionJumpZoom_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTransitionJumpZoom_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionJumpZoom_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTransitionJumpZoom_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTransitionJumpZoom_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTransitionJumpZoom_description()", "contents": "description()" }
,
		{ "trigger": "CCTransitionJumpZoom_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTransitionJumpZoom_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTransitionJumpZoom_create(float_t,CCScene*_scene,)", "contents": "CCTransitionJumpZoom:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCTouch_getLocationInView()", "contents": "getLocationInView()" }
,
		{ "trigger": "CCTouch_setTouchInfo(int_id,float_x,float_y,)", "contents": "setTouchInfo(${1:int_id},${2:float_x},${3:float_y})" }
,
		{ "trigger": "CCTouch_getPreviousLocation()", "contents": "getPreviousLocation()" }
,
		{ "trigger": "CCTouch_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTouch_getPreviousLocationInView()", "contents": "getPreviousLocationInView()" }
,
		{ "trigger": "CCTouch_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTouch_getLocation()", "contents": "getLocation()" }
,
		{ "trigger": "CCTouch_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTouch_release()", "contents": "release()" }
,
		{ "trigger": "CCTouch_getDelta()", "contents": "getDelta()" }
,
		{ "trigger": "CCTouch_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTouch_getID()", "contents": "getID()" }
,
		{ "trigger": "CCTouch_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTouch_isSingleReference()", "contents": "isSingleReference()" }
,

		{ "trigger": "CCRibbon_setTexture(CCTexture2D*_val,)", "contents": "setTexture(${1:CCTexture2D*_val})" }
,
		{ "trigger": "CCRibbon_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCRibbon_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCRibbon_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCRibbon_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCRibbon_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCRibbon_draw()", "contents": "draw()" }
,
		{ "trigger": "CCRibbon_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCRibbon_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCRibbon_getTextureLength()", "contents": "getTextureLength()" }
,
		{ "trigger": "CCRibbon_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCRibbon_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCRibbon_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCRibbon_visit()", "contents": "visit()" }
,
		{ "trigger": "CCRibbon_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCRibbon_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCRibbon_addPointAt(CCPoint_location,float_width,)", "contents": "addPointAt(${1:CCPoint_location},${2:float_width})" }
,
		{ "trigger": "CCRibbon_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCRibbon_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCRibbon_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCRibbon_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCRibbon_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCRibbon_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCRibbon_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCRibbon_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCRibbon_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCRibbon_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCRibbon_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCRibbon_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCRibbon_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCRibbon_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCRibbon_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCRibbon_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCRibbon_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCRibbon_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCRibbon_setBlendFunc(ccBlendFunc_val,)", "contents": "setBlendFunc(${1:ccBlendFunc_val})" }
,
		{ "trigger": "CCRibbon_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCRibbon_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCRibbon_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCRibbon_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCRibbon_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCRibbon_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCRibbon_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCRibbon_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCRibbon_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCRibbon_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCRibbon_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCRibbon_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCRibbon_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCRibbon_sideOfLine(CCPoint_p,CCPoint_l1,CCPoint_l2,)", "contents": "sideOfLine(${1:CCPoint_p},${2:CCPoint_l1},${3:CCPoint_l2})" }
,
		{ "trigger": "CCRibbon_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCRibbon_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCRibbon_setTextureLength(float_val,)", "contents": "setTextureLength(${1:float_val})" }
,
		{ "trigger": "CCRibbon_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCRibbon_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCRibbon_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCRibbon_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCRibbon_retain()", "contents": "retain()" }
,
		{ "trigger": "CCRibbon_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCRibbon_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCRibbon_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCRibbon_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCRibbon_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCRibbon_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCRibbon_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCRibbon_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCRibbon_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCRibbon_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCRibbon_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCRibbon_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCRibbon_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCRibbon_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCRibbon_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCRibbon_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCRibbon_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCRibbon_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCRibbon_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCRibbon_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCRibbon_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCRibbon_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCRibbon_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCRibbon_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCRibbon_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCRibbon_transform()", "contents": "transform()" }
,
		{ "trigger": "CCRibbon_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCRibbon_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCRibbon_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCRibbon_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCRibbon_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCRibbon_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCRibbon_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCRibbon_release()", "contents": "release()" }
,
		{ "trigger": "CCRibbon_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCRibbon_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCRibbon_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCRibbon_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCRibbon_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCRibbon_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCRibbon_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCRibbon_setColor(ccColor4B_val,)", "contents": "setColor(${1:ccColor4B_val})" }
,
		{ "trigger": "CCRibbon_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCRibbon_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCRibbon_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCRibbon_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCRibbon_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCRibbon_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCRibbon_copy()", "contents": "copy()" }
,
		{ "trigger": "CCRibbon_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCRibbon_description()", "contents": "description()" }
,
		{ "trigger": "CCRibbon_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCRibbon_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCRibbon_create(float_w,const_char_*path,float_length,ccColor4B_color,float_fade,)", "contents": "CCRibbon:create(${1:float_w},${2:const_char_*path},${3:float_length},${4:ccColor4B_color},${5:float_fade})" }
,



		{ "trigger": "CCTransitionFadeUp_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTransitionFadeUp_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTransitionFadeUp_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTransitionFadeUp_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTransitionFadeUp_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTransitionFadeUp_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTransitionFadeUp_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTransitionFadeUp_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTransitionFadeUp_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCTransitionFadeUp_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCTransitionFadeUp_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionFadeUp_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTransitionFadeUp_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTransitionFadeUp_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionFadeUp_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionFadeUp_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTransitionFadeUp_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFadeUp_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTransitionFadeUp_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCTransitionFadeUp_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFadeUp_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTransitionFadeUp_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionFadeUp_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTransitionFadeUp_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionFadeUp_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTransitionFadeUp_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTransitionFadeUp_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCTransitionFadeUp_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTransitionFadeUp_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTransitionFadeUp_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTransitionFadeUp_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTransitionFadeUp_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTransitionFadeUp_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTransitionFadeUp_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionFadeUp_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTransitionFadeUp_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTransitionFadeUp_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionFadeUp_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTransitionFadeUp_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTransitionFadeUp_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTransitionFadeUp_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTransitionFadeUp_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionFadeUp_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFadeUp_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionFadeUp_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTransitionFadeUp_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTransitionFadeUp_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTransitionFadeUp_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTransitionFadeUp_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTransitionFadeUp_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTransitionFadeUp_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTransitionFadeUp_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionFadeUp_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTransitionFadeUp_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTransitionFadeUp_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTransitionFadeUp_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTransitionFadeUp_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTransitionFadeUp_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTransitionFadeUp_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTransitionFadeUp_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTransitionFadeUp_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTransitionFadeUp_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionFadeUp_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTransitionFadeUp_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTransitionFadeUp_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTransitionFadeUp_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTransitionFadeUp_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTransitionFadeUp_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTransitionFadeUp_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTransitionFadeUp_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTransitionFadeUp_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionFadeUp_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTransitionFadeUp_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTransitionFadeUp_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTransitionFadeUp_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTransitionFadeUp_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionFadeUp_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTransitionFadeUp_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTransitionFadeUp_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTransitionFadeUp_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTransitionFadeUp_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTransitionFadeUp_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionFadeUp_release()", "contents": "release()" }
,
		{ "trigger": "CCTransitionFadeUp_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionFadeUp_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFadeUp_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionFadeUp_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTransitionFadeUp_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTransitionFadeUp_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTransitionFadeUp_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCTransitionFadeUp_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTransitionFadeUp_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTransitionFadeUp_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTransitionFadeUp_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTransitionFadeUp_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionFadeUp_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTransitionFadeUp_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTransitionFadeUp_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTransitionFadeUp_description()", "contents": "description()" }
,
		{ "trigger": "CCTransitionFadeUp_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTransitionFadeUp_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTransitionFadeUp_create(float_t,CCScene*_scene,)", "contents": "CCTransitionFadeUp:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "PageView_scrollToPage(int_idx,)", "contents": "scrollToPage(${1:int_idx})" }
,
		{ "trigger": "PageView_removePageAtIndex(int_index,)", "contents": "removePageAtIndex(${1:int_index})" }
,
		{ "trigger": "PageView_onTouchBegan(CCTouch_*touch,CCEvent_*unusedEvent,)", "contents": "onTouchBegan(${1:CCTouch_*touch},${2:CCEvent_*unusedEvent})" }
,
		{ "trigger": "PageView_getLayoutType()", "contents": "getLayoutType()" }
,
		{ "trigger": "PageView_getCurPageIndex()", "contents": "getCurPageIndex()" }
,
		{ "trigger": "PageView_removeAllPages()", "contents": "removeAllPages()" }
,
		{ "trigger": "PageView_addPage(Layout*_page,)", "contents": "addPage(${1:Layout*_page})" }
,
		{ "trigger": "PageView_onTouchCancelled(CCTouch_*touch,CCEvent_*unusedEvent,)", "contents": "onTouchCancelled(${1:CCTouch_*touch},${2:CCEvent_*unusedEvent})" }
,
		{ "trigger": "PageView_getPages()", "contents": "getPages()" }
,
		{ "trigger": "PageView_setLayoutType(LayoutType_type,)", "contents": "setLayoutType(${1:LayoutType_type})" }
,
		{ "trigger": "PageView_addWidgetToPage(Widget*_widget,int_pageIdx,bool_forceCreate,)", "contents": "addWidgetToPage(${1:Widget*_widget},${2:int_pageIdx},${3:bool_forceCreate})" }
,
		{ "trigger": "PageView_insertPage(Layout*_page,int_idx,)", "contents": "insertPage(${1:Layout*_page},${2:int_idx})" }
,
		{ "trigger": "PageView_getDescription()", "contents": "getDescription()" }
,
		{ "trigger": "PageView_onTouchEnded(CCTouch_*touch,CCEvent_*unusedEvent,)", "contents": "onTouchEnded(${1:CCTouch_*touch},${2:CCEvent_*unusedEvent})" }
,
		{ "trigger": "PageView_update(float_dt,)", "contents": "update(${1:float_dt})" }
,
		{ "trigger": "PageView_getPage(int_index,)", "contents": "getPage(${1:int_index})" }
,
		{ "trigger": "PageView_onTouchMoved(CCTouch_*touch,CCEvent_*unusedEvent,)", "contents": "onTouchMoved(${1:CCTouch_*touch},${2:CCEvent_*unusedEvent})" }
,
		{ "trigger": "PageView_removePage(Layout*_page,)", "contents": "removePage(${1:Layout*_page})" }
,
		{ "trigger": "PageView_create()", "contents": "PageView:create()" }
,


		{ "trigger": "CCImage_copy()", "contents": "copy()" }
,
		{ "trigger": "CCImage_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCImage_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCImage_release()", "contents": "release()" }
,
		{ "trigger": "CCImage_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCImage_retain()", "contents": "retain()" }
,
		{ "trigger": "CCImage_isSingleReference()", "contents": "isSingleReference()" }
,

		{ "trigger": "CCActionInterval_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCActionInterval_copy()", "contents": "copy()" }
,
		{ "trigger": "CCActionInterval_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCActionInterval_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCActionInterval_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCActionInterval_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCActionInterval_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCActionInterval_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCActionInterval_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCActionInterval_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCActionInterval_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCActionInterval_retain()", "contents": "retain()" }
,
		{ "trigger": "CCActionInterval_release()", "contents": "release()" }
,
		{ "trigger": "CCActionInterval_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCActionInterval_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCActionInterval_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCActionInterval_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCActionInterval_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCActionInterval_create(float_d,)", "contents": "create(${1:float_d})" }
,

		{ "trigger": "CCEaseRateAction_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseRateAction_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseRateAction_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseRateAction_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseRateAction_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseRateAction_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseRateAction_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseRateAction_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseRateAction_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseRateAction_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseRateAction_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseRateAction_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseRateAction_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseRateAction_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseRateAction_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseRateAction_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseRateAction_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseRateAction_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseRateAction_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseRateAction_create(CCActionInterval*_pAction,float_fRate,)", "contents": "CCEaseRateAction:create(${1:CCActionInterval*_pAction},${2:float_fRate})" }
,

		{ "trigger": "CCBatchNode_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCBatchNode_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCBatchNode_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCBatchNode_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCBatchNode_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCBatchNode_draw()", "contents": "draw()" }
,
		{ "trigger": "CCBatchNode_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCBatchNode_addChild(CCNode_*pChild,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*pChild},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCBatchNode_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCBatchNode_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCBatchNode_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCBatchNode_visit()", "contents": "visit()" }
,
		{ "trigger": "CCBatchNode_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCBatchNode_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCBatchNode_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCBatchNode_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCBatchNode_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCBatchNode_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCBatchNode_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCBatchNode_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCBatchNode_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCBatchNode_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCBatchNode_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCBatchNode_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCBatchNode_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCBatchNode_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCBatchNode_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCBatchNode_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCBatchNode_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCBatchNode_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCBatchNode_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCBatchNode_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCBatchNode_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCBatchNode_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCBatchNode_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCBatchNode_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCBatchNode_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCBatchNode_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCBatchNode_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCBatchNode_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCBatchNode_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCBatchNode_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCBatchNode_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCBatchNode_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCBatchNode_getTexureAtlasWithTexture(CCTexture2D_*texture,)", "contents": "getTexureAtlasWithTexture(${1:CCTexture2D_*texture})" }
,
		{ "trigger": "CCBatchNode_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCBatchNode_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCBatchNode_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCBatchNode_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCBatchNode_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCBatchNode_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCBatchNode_retain()", "contents": "retain()" }
,
		{ "trigger": "CCBatchNode_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCBatchNode_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCBatchNode_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCBatchNode_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCBatchNode_addChild(CCNode_*pChild,int_zOrder,)", "contents": "addChild(${1:CCNode_*pChild},${2:int_zOrder})" }
,
		{ "trigger": "CCBatchNode_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCBatchNode_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCBatchNode_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCBatchNode_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCBatchNode_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCBatchNode_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCBatchNode_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCBatchNode_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCBatchNode_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCBatchNode_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCBatchNode_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCBatchNode_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCBatchNode_addChild(CCNode_*pChild,)", "contents": "addChild(${1:CCNode_*pChild})" }
,
		{ "trigger": "CCBatchNode_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCBatchNode_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCBatchNode_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCBatchNode_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCBatchNode_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCBatchNode_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCBatchNode_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCBatchNode_transform()", "contents": "transform()" }
,
		{ "trigger": "CCBatchNode_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCBatchNode_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCBatchNode_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCBatchNode_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCBatchNode_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCBatchNode_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCBatchNode_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCBatchNode_release()", "contents": "release()" }
,
		{ "trigger": "CCBatchNode_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCBatchNode_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCBatchNode_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCBatchNode_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCBatchNode_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCBatchNode_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCBatchNode_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCBatchNode_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCBatchNode_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCBatchNode_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCBatchNode_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCBatchNode_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCBatchNode_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCBatchNode_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCBatchNode_copy()", "contents": "copy()" }
,
		{ "trigger": "CCBatchNode_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCBatchNode_description()", "contents": "description()" }
,
		{ "trigger": "CCBatchNode_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCBatchNode_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCBatchNode_create()", "contents": "CCBatchNode:create()" }
,


		{ "trigger": "CCJumpTo_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCJumpTo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCJumpTo_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCJumpTo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCJumpTo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCJumpTo_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCJumpTo_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCJumpTo_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCJumpTo_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCJumpTo_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCJumpTo_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCJumpTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCJumpTo_release()", "contents": "release()" }
,
		{ "trigger": "CCJumpTo_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCJumpTo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCJumpTo_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCJumpTo_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCJumpTo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCJumpTo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCJumpTo_create(float_duration,CCPoint_position,float_height,int_jumps,)", "contents": "CCJumpTo:create(${1:float_duration},${2:CCPoint_position},${3:float_height},${4:int_jumps})" }
,


		{ "trigger": "RichText_formatText()", "contents": "formatText()" }
,
		{ "trigger": "RichText_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "RichText_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "RichText_getBottomInParent()", "contents": "getBottomInParent()" }
,
		{ "trigger": "RichText_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "RichText_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "RichText_getVirtualRenderer()", "contents": "getVirtualRenderer()" }
,
		{ "trigger": "RichText_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "RichText_draw()", "contents": "draw()" }
,
		{ "trigger": "RichText_getNodes()", "contents": "getNodes()" }
,
		{ "trigger": "RichText_isBright()", "contents": "isBright()" }
,
		{ "trigger": "RichText_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "RichText_getLayoutParameter(LayoutParameterType_type,)", "contents": "getLayoutParameter(${1:LayoutParameterType_type})" }
,
		{ "trigger": "RichText_ignoreContentAdaptWithSize(bool_ignore,)", "contents": "ignoreContentAdaptWithSize(${1:bool_ignore})" }
,
		{ "trigger": "RichText_onTouchBegan(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchBegan(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "RichText_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "RichText_getSize()", "contents": "getSize()" }
,
		{ "trigger": "RichText_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "RichText_getLayoutSize()", "contents": "getLayoutSize()" }
,
		{ "trigger": "RichText_visit()", "contents": "visit()" }
,
		{ "trigger": "RichText_getTopInParent()", "contents": "getTopInParent()" }
,
		{ "trigger": "RichText_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "RichText_setVerticalSpace(float_space,)", "contents": "setVerticalSpace(${1:float_space})" }
,
		{ "trigger": "RichText_disable()", "contents": "disable()" }
,
		{ "trigger": "RichText_removeElement(int_index,)", "contents": "removeElement(${1:int_index})" }
,
		{ "trigger": "RichText_setSizeType(SizeType_type,)", "contents": "setSizeType(${1:SizeType_type})" }
,
		{ "trigger": "RichText_getNodeByTag(int_tag,)", "contents": "getNodeByTag(${1:int_tag})" }
,
		{ "trigger": "RichText_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "RichText_getPositionPercent()", "contents": "getPositionPercent()" }
,
		{ "trigger": "RichText_insertElement(RichElement*_element,int_index,)", "contents": "insertElement(${1:RichElement*_element},${2:int_index})" }
,
		{ "trigger": "RichText_setPosition(const_CCPoint_&pos,)", "contents": "setPosition(${1:const_CCPoint_&pos})" }
,
		{ "trigger": "RichText_setFlipY(bool_flipY,)", "contents": "setFlipY(${1:bool_flipY})" }
,
		{ "trigger": "RichText_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "RichText_setSize(const_CCSize_&size,)", "contents": "setSize(${1:const_CCSize_&size})" }
,
		{ "trigger": "RichText_clone()", "contents": "clone()" }
,
		{ "trigger": "RichText_onTouchEnded(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchEnded(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "RichText_removeElement(RichElement*_element,)", "contents": "removeElement(${1:RichElement*_element})" }
,
		{ "trigger": "RichText_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "RichText_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "RichText_getTouchEndPos()", "contents": "getTouchEndPos()" }
,
		{ "trigger": "RichText_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "RichText_onTouchMoved(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchMoved(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "RichText_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "RichText_setTouchEnable(bool_enabled,bool_containChildren_=_false,)", "contents": "setTouchEnable(${1:bool_enabled},${2:bool_containChildren_=_false})" }
,
		{ "trigger": "RichText_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "RichText_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "RichText_addNode(CCNode_*_node,int_zOrder,)", "contents": "addNode(${1:CCNode_*_node},${2:int_zOrder})" }
,
		{ "trigger": "RichText_removeAllNodes()", "contents": "removeAllNodes()" }
,
		{ "trigger": "RichText_getWidgetByTag(int_tag,)", "contents": "getWidgetByTag(${1:int_tag})" }
,
		{ "trigger": "RichText_getChildByName(const_char*_name,)", "contents": "getChildByName(${1:const_char*_name})" }
,
		{ "trigger": "RichText_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "RichText_setAnchorPoint(const_CCPoint_&pt,)", "contents": "setAnchorPoint(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "RichText_pushBackElement(RichElement*_element,)", "contents": "pushBackElement(${1:RichElement*_element})" }
,
		{ "trigger": "RichText_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "RichText_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "RichText_getCustomSize()", "contents": "getCustomSize()" }
,
		{ "trigger": "RichText_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "RichText_getRightInParent()", "contents": "getRightInParent()" }
,
		{ "trigger": "RichText_getDescription()", "contents": "getDescription()" }
,
		{ "trigger": "RichText_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "RichText_getRect()", "contents": "getRect()" }
,
		{ "trigger": "RichText_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "RichText_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "RichText_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "RichText_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "RichText_getName()", "contents": "getName()" }
,
		{ "trigger": "RichText_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "RichText_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "RichText_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "RichText_isFlipY()", "contents": "isFlipY()" }
,
		{ "trigger": "RichText_setSizePercent(const_CCPoint_&percent,)", "contents": "setSizePercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "RichText_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "RichText_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "RichText_addNode(CCNode*_node,)", "contents": "addNode(${1:CCNode*_node})" }
,
		{ "trigger": "RichText_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "RichText_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "RichText_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "RichText_setBright(bool_bright,)", "contents": "setBright(${1:bool_bright})" }
,
		{ "trigger": "RichText_active()", "contents": "active()" }
,
		{ "trigger": "RichText_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "RichText_removeChild(CCNode*_child,)", "contents": "removeChild(${1:CCNode*_child})" }
,
		{ "trigger": "RichText_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "RichText_getTag()", "contents": "getTag()" }
,
		{ "trigger": "RichText_removeAllChildren()", "contents": "removeAllChildren()" }
,
		{ "trigger": "RichText_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "RichText_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "RichText_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "RichText_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "RichText_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "RichText_setFocused(bool_fucosed,)", "contents": "setFocused(${1:bool_fucosed})" }
,
		{ "trigger": "RichText_executeScriptEvent(int_eventName,)", "contents": "executeScriptEvent(${1:int_eventName})" }
,
		{ "trigger": "RichText_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "RichText_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "RichText_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "RichText_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "RichText_setTouchEnabled(bool_enabled,)", "contents": "setTouchEnabled(${1:bool_enabled})" }
,
		{ "trigger": "RichText_setBrightStyle(BrightStyle_style,)", "contents": "setBrightStyle(${1:BrightStyle_style})" }
,
		{ "trigger": "RichText_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "RichText_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "RichText_setPositionType(PositionType_type,)", "contents": "setPositionType(${1:PositionType_type})" }
,
		{ "trigger": "RichText_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "RichText_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "RichText_updateSizeAndPosition(const_CCSize&_parentSize,)", "contents": "updateSizeAndPosition(${1:const_CCSize&_parentSize})" }
,
		{ "trigger": "RichText_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "RichText_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "RichText_setLayoutParameter(LayoutParameter*_parameter,)", "contents": "setLayoutParameter(${1:LayoutParameter*_parameter})" }
,
		{ "trigger": "RichText_getColor()", "contents": "getColor()" }
,
		{ "trigger": "RichText_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "RichText_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "RichText_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "RichText_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "RichText_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "RichText_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "RichText_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "RichText_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "RichText_removeNodeByTag(int_tag,)", "contents": "removeNodeByTag(${1:int_tag})" }
,
		{ "trigger": "RichText_setPositionPercent(const_CCPoint_&percent,)", "contents": "setPositionPercent(${1:const_CCPoint_&percent})" }
,
		{ "trigger": "RichText_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "RichText_copy()", "contents": "copy()" }
,
		{ "trigger": "RichText_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "RichText_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "RichText_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "RichText_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "RichText_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "RichText_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "RichText_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "RichText_getTouchMovePos()", "contents": "getTouchMovePos()" }
,
		{ "trigger": "RichText_getTouchStartPos()", "contents": "getTouchStartPos()" }
,
		{ "trigger": "RichText_hitTest(const_CCPoint_&pt,)", "contents": "hitTest(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "RichText_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "RichText_sortAllChildren()", "contents": "sortAllChildren()" }
,
		{ "trigger": "RichText_getSizePercent()", "contents": "getSizePercent()" }
,
		{ "trigger": "RichText_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "RichText_updateSizeAndPosition()", "contents": "updateSizeAndPosition()" }
,
		{ "trigger": "RichText_isFlipX()", "contents": "isFlipX()" }
,
		{ "trigger": "RichText_getParent()", "contents": "getParent()" }
,
		{ "trigger": "RichText_setName(const_char*_name,)", "contents": "setName(${1:const_char*_name})" }
,
		{ "trigger": "RichText_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "RichText_transform()", "contents": "transform()" }
,
		{ "trigger": "RichText_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "RichText_isFocused()", "contents": "isFocused()" }
,
		{ "trigger": "RichText_retain()", "contents": "retain()" }
,
		{ "trigger": "RichText_setSoundEff(std::string_eff,)", "contents": "setSoundEff(${1:std::string_eff})" }
,
		{ "trigger": "RichText_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "RichText_visit()", "contents": "visit()" }
,
		{ "trigger": "RichText_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "RichText_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "RichText_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "RichText_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "RichText_addNode(CCNode*_node,int_zOrder,int_tag,)", "contents": "addNode(${1:CCNode*_node},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "RichText_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "RichText_getActionTag()", "contents": "getActionTag()" }
,
		{ "trigger": "RichText_release()", "contents": "release()" }
,
		{ "trigger": "RichText_setActionTag(int_tag,)", "contents": "setActionTag(${1:int_tag})" }
,
		{ "trigger": "RichText_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "RichText_setFlipX(bool_flipX,)", "contents": "setFlipX(${1:bool_flipX})" }
,
		{ "trigger": "RichText_checkChildInfo(int_handleState,Widget*_sender,const_CCPoint_&touchPoint,)", "contents": "checkChildInfo(${1:int_handleState},${2:Widget*_sender},${3:const_CCPoint_&touchPoint})" }
,
		{ "trigger": "RichText_removeFromParent()", "contents": "removeFromParent()" }
,
		{ "trigger": "RichText_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "RichText_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "RichText_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "RichText_isIgnoreContentAdaptWithSize()", "contents": "isIgnoreContentAdaptWithSize()" }
,
		{ "trigger": "RichText_getLeftInParent()", "contents": "getLeftInParent()" }
,
		{ "trigger": "RichText_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "RichText_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "RichText_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "RichText_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "RichText_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "RichText_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "RichText_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "RichText_getScale()", "contents": "getScale()" }
,
		{ "trigger": "RichText_getVirtualRendererSize()", "contents": "getVirtualRendererSize()" }
,
		{ "trigger": "RichText_removeNode(CCNode*_node,)", "contents": "removeNode(${1:CCNode*_node})" }
,
		{ "trigger": "RichText_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "RichText_onExit()", "contents": "onExit()" }
,
		{ "trigger": "RichText_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "RichText_getWorldPosition()", "contents": "getWorldPosition()" }
,
		{ "trigger": "RichText_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "RichText_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "RichText_clippingParentAreaContainPoint(const_CCPoint_&pt,)", "contents": "clippingParentAreaContainPoint(${1:const_CCPoint_&pt})" }
,
		{ "trigger": "RichText_onTouchCancelled(CCTouch_*touch,CCEvent_*unused_event,)", "contents": "onTouchCancelled(${1:CCTouch_*touch},${2:CCEvent_*unused_event})" }
,
		{ "trigger": "RichText_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "RichText_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "RichText_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "RichText_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "RichText_description()", "contents": "description()" }
,
		{ "trigger": "RichText_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "RichText_didNotSelectSelf()", "contents": "didNotSelectSelf()" }
,
		{ "trigger": "RichText_getWidgetType()", "contents": "getWidgetType()" }
,
		{ "trigger": "RichText_getSizeType()", "contents": "getSizeType()" }
,
		{ "trigger": "RichText_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "RichText_onEnter()", "contents": "onEnter()" }
,
		{ "trigger": "RichText_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "RichText_addChild(CCNode*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "RichText_create()", "contents": "RichText:create()" }
,

		{ "trigger": "TouchGroup_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "TouchGroup_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "TouchGroup_onEnterTransitionDidFinish()", "contents": "onEnterTransitionDidFinish()" }
,
		{ "trigger": "TouchGroup_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "TouchGroup_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "TouchGroup_init()", "contents": "init()" }
,
		{ "trigger": "TouchGroup_draw()", "contents": "draw()" }
,
		{ "trigger": "TouchGroup_getTag()", "contents": "getTag()" }
,
		{ "trigger": "TouchGroup_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "TouchGroup_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "TouchGroup_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "TouchGroup_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "TouchGroup_visit()", "contents": "visit()" }
,
		{ "trigger": "TouchGroup_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "TouchGroup_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "TouchGroup_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "TouchGroup_registerScriptAccelerateHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptAccelerateHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "TouchGroup_ccTouchBegan(CCTouch_*pTouch,CCEvent_*pEvent,)", "contents": "ccTouchBegan(${1:CCTouch_*pTouch},${2:CCEvent_*pEvent})" }
,
		{ "trigger": "TouchGroup_getTouchMode()", "contents": "getTouchMode()" }
,
		{ "trigger": "TouchGroup_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "TouchGroup_setAccelerometerEnabled(bool_bValue,)", "contents": "setAccelerometerEnabled(${1:bool_bValue})" }
,
		{ "trigger": "TouchGroup_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "TouchGroup_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "TouchGroup_unregisterScriptTouchHandler()", "contents": "unregisterScriptTouchHandler()" }
,
		{ "trigger": "TouchGroup_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "TouchGroup_ccTouchEnded(CCTouch_*pTouch,CCEvent_*pEvent,)", "contents": "ccTouchEnded(${1:CCTouch_*pTouch},${2:CCEvent_*pEvent})" }
,
		{ "trigger": "TouchGroup_transform()", "contents": "transform()" }
,
		{ "trigger": "TouchGroup_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "TouchGroup_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "TouchGroup_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "TouchGroup_unregisterScriptAccelerateHandler()", "contents": "unregisterScriptAccelerateHandler()" }
,
		{ "trigger": "TouchGroup_getWidgetByTag(int_tag,)", "contents": "getWidgetByTag(${1:int_tag})" }
,
		{ "trigger": "TouchGroup_ccTouchMoved(CCTouch_*pTouch,CCEvent_*pEvent,)", "contents": "ccTouchMoved(${1:CCTouch_*pTouch},${2:CCEvent_*pEvent})" }
,
		{ "trigger": "TouchGroup_addWidget(Widget*_widget,)", "contents": "addWidget(${1:Widget*_widget})" }
,
		{ "trigger": "TouchGroup_registerScriptKeypadHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptKeypadHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "TouchGroup_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "TouchGroup_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "TouchGroup_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "TouchGroup_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "TouchGroup_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "TouchGroup_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "TouchGroup_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "TouchGroup_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "TouchGroup_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "TouchGroup_setKeypadEnabled(bool_bValue,)", "contents": "setKeypadEnabled(${1:bool_bValue})" }
,
		{ "trigger": "TouchGroup_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "TouchGroup_setTouchPriority(int_priority,)", "contents": "setTouchPriority(${1:int_priority})" }
,
		{ "trigger": "TouchGroup_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "TouchGroup_getWidgetByName(const_char*_name,)", "contents": "getWidgetByName(${1:const_char*_name})" }
,
		{ "trigger": "TouchGroup_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "TouchGroup_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "TouchGroup_ccTouchCancelled(CCTouch_*pTouch,CCEvent_*pEvent,)", "contents": "ccTouchCancelled(${1:CCTouch_*pTouch},${2:CCEvent_*pEvent})" }
,
		{ "trigger": "TouchGroup_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "TouchGroup_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "TouchGroup_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "TouchGroup_setTouchEnabled(bool_bValue,)", "contents": "setTouchEnabled(${1:bool_bValue})" }
,
		{ "trigger": "TouchGroup_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "TouchGroup_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "TouchGroup_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "TouchGroup_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "TouchGroup_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "TouchGroup_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "TouchGroup_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "TouchGroup_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "TouchGroup_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "TouchGroup_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "TouchGroup_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "TouchGroup_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "TouchGroup_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "TouchGroup_retain()", "contents": "retain()" }
,
		{ "trigger": "TouchGroup_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "TouchGroup_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "TouchGroup_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "TouchGroup_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "TouchGroup_unregisterScriptKeypadHandler()", "contents": "unregisterScriptKeypadHandler()" }
,
		{ "trigger": "TouchGroup_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "TouchGroup_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "TouchGroup_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "TouchGroup_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "TouchGroup_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "TouchGroup_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "TouchGroup_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "TouchGroup_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "TouchGroup_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "TouchGroup_isAccelerometerEnabled()", "contents": "isAccelerometerEnabled()" }
,
		{ "trigger": "TouchGroup_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "TouchGroup_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "TouchGroup_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "TouchGroup_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "TouchGroup_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "TouchGroup_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "TouchGroup_isKeypadEnabled()", "contents": "isKeypadEnabled()" }
,
		{ "trigger": "TouchGroup_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "TouchGroup_removeWidget(Widget*_widget,)", "contents": "removeWidget(${1:Widget*_widget})" }
,
		{ "trigger": "TouchGroup_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "TouchGroup_getParent()", "contents": "getParent()" }
,
		{ "trigger": "TouchGroup_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "TouchGroup_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "TouchGroup_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "TouchGroup_registerScriptTouchHandler(LUA_FUNCTION_nHandler,bool_bIsMultiTouches_=_false,int_nPriority_=_0,bool_bSwallowsTouches_=_false,)", "contents": "registerScriptTouchHandler(${1:LUA_FUNCTION_nHandler},${2:bool_bIsMultiTouches_=_false},${3:int_nPriority_=_0},${4:bool_bSwallowsTouches_=_false})" }
,
		{ "trigger": "TouchGroup_getRootWidget()", "contents": "getRootWidget()" }
,
		{ "trigger": "TouchGroup_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "TouchGroup_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "TouchGroup_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "TouchGroup_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "TouchGroup_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "TouchGroup_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "TouchGroup_release()", "contents": "release()" }
,
		{ "trigger": "TouchGroup_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "TouchGroup_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "TouchGroup_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "TouchGroup_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "TouchGroup_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "TouchGroup_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "TouchGroup_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "TouchGroup_clear()", "contents": "clear()" }
,
		{ "trigger": "TouchGroup_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "TouchGroup_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "TouchGroup_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "TouchGroup_getScale()", "contents": "getScale()" }
,
		{ "trigger": "TouchGroup_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "TouchGroup_onExit()", "contents": "onExit()" }
,
		{ "trigger": "TouchGroup_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "TouchGroup_getTouchPriority()", "contents": "getTouchPriority()" }
,
		{ "trigger": "TouchGroup_copy()", "contents": "copy()" }
,
		{ "trigger": "TouchGroup_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "TouchGroup_description()", "contents": "description()" }
,
		{ "trigger": "TouchGroup_setTouchMode(ccTouchesMode_mode,)", "contents": "setTouchMode(${1:ccTouchesMode_mode})" }
,
		{ "trigger": "TouchGroup_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "TouchGroup_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "TouchGroup_onEnter()", "contents": "onEnter()" }
,
		{ "trigger": "TouchGroup_create()", "contents": "TouchGroup:create()" }
,

		{ "trigger": "CCNotificationCenter_copy()", "contents": "copy()" }
,
		{ "trigger": "CCNotificationCenter_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCNotificationCenter_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCNotificationCenter_postNotification(const_char_*name,CCObject_*object,)", "contents": "postNotification(${1:const_char_*name},${2:CCObject_*object})" }
,
		{ "trigger": "CCNotificationCenter_getScriptHandler()", "contents": "getScriptHandler()" }
,
		{ "trigger": "CCNotificationCenter_release()", "contents": "release()" }
,
		{ "trigger": "CCNotificationCenter_registerScriptObserver(CCObject_*target,LUA_FUNCTION_funcID,const_char*_name,)", "contents": "registerScriptObserver(${1:CCObject_*target},${2:LUA_FUNCTION_funcID},${3:const_char*_name})" }
,
		{ "trigger": "CCNotificationCenter_postNotification(const_char_*name,)", "contents": "postNotification(${1:const_char_*name})" }
,
		{ "trigger": "CCNotificationCenter_getObserverHandlerByName(const_char*_name,)", "contents": "getObserverHandlerByName(${1:const_char*_name})" }
,
		{ "trigger": "CCNotificationCenter_unregisterScriptObserver(CCObject_*target,const_char*_name,)", "contents": "unregisterScriptObserver(${1:CCObject_*target},${2:const_char*_name})" }
,
		{ "trigger": "CCNotificationCenter_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCNotificationCenter_removeAllObservers(CCObject_*target,)", "contents": "removeAllObservers(${1:CCObject_*target})" }
,
		{ "trigger": "CCNotificationCenter_retain()", "contents": "retain()" }
,
		{ "trigger": "CCNotificationCenter_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCNotificationCenter_sharedNotificationCenter()", "contents": "CCNotificationCenter:sharedNotificationCenter()" }
,
		{ "trigger": "CCNotificationCenter_purgeNotificationCenter()", "contents": "CCNotificationCenter:purgeNotificationCenter()" }
,

		{ "trigger": "CCCatmullRomTo_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCCatmullRomTo_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCCatmullRomTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCCatmullRomTo_release()", "contents": "release()" }
,
		{ "trigger": "CCCatmullRomTo_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCCatmullRomTo_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCCatmullRomTo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCCatmullRomTo_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCCatmullRomTo_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCCatmullRomTo_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCCatmullRomTo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCCatmullRomTo_getPoints()", "contents": "getPoints()" }
,
		{ "trigger": "CCCatmullRomTo_setPoints(CCPointArray*_points,)", "contents": "setPoints(${1:CCPointArray*_points})" }
,
		{ "trigger": "CCCatmullRomTo_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCCatmullRomTo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCCatmullRomTo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCCatmullRomTo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCCatmullRomTo_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCCatmullRomTo_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCCatmullRomTo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCCatmullRomTo_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCCatmullRomTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCCatmullRomTo_create(float_dt,CCPointArray*_points,)", "contents": "CCCatmullRomTo:create(${1:float_dt},${2:CCPointArray*_points})" }
,

		{ "trigger": "NodeReader_loadNodeWithContent(const_std::string&_content,)", "contents": "loadNodeWithContent(${1:const_std::string&_content})" }
,
		{ "trigger": "NodeReader_copy()", "contents": "copy()" }
,
		{ "trigger": "NodeReader_purge()", "contents": "purge()" }
,
		{ "trigger": "NodeReader_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "NodeReader_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "NodeReader_loadNodeWithFile(const_std::string&_fileName,)", "contents": "loadNodeWithFile(${1:const_std::string&_fileName})" }
,
		{ "trigger": "NodeReader_isRecordJsonPath()", "contents": "isRecordJsonPath()" }
,
		{ "trigger": "NodeReader_getJsonPath()", "contents": "getJsonPath()" }
,
		{ "trigger": "NodeReader_setJsonPath(std::string_jsonPath,)", "contents": "setJsonPath(${1:std::string_jsonPath})" }
,
		{ "trigger": "NodeReader_createNode(const_std::string&_filename,)", "contents": "createNode(${1:const_std::string&_filename})" }
,
		{ "trigger": "NodeReader_setRecordJsonPath(bool_record,)", "contents": "setRecordJsonPath(${1:bool_record})" }
,
		{ "trigger": "NodeReader_release()", "contents": "release()" }
,
		{ "trigger": "NodeReader_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "NodeReader_init()", "contents": "init()" }
,
		{ "trigger": "NodeReader_retain()", "contents": "retain()" }
,
		{ "trigger": "NodeReader_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "NodeReader_getInstance()", "contents": "NodeReader:getInstance()" }
,
		{ "trigger": "NodeReader_destroyInstance()", "contents": "NodeReader:destroyInstance()" }
,

		{ "trigger": "CCActionManager_resumeTargets(CCSet*_targetsToResume,)", "contents": "resumeTargets(${1:CCSet*_targetsToResume})" }
,
		{ "trigger": "CCActionManager_numberOfRunningActionsInTarget(CCObject_*pTarget,)", "contents": "numberOfRunningActionsInTarget(${1:CCObject_*pTarget})" }
,
		{ "trigger": "CCActionManager_copy()", "contents": "copy()" }
,
		{ "trigger": "CCActionManager_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCActionManager_resumeTarget(CCObject_*pTarget,)", "contents": "resumeTarget(${1:CCObject_*pTarget})" }
,
		{ "trigger": "CCActionManager_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCActionManager_addAction(CCAction_*pAction,CCNode_*pTarget,bool_paused,)", "contents": "addAction(${1:CCAction_*pAction},${2:CCNode_*pTarget},${3:bool_paused})" }
,
		{ "trigger": "CCActionManager_removeActionByTag(unsigned_int_tag,CCObject_*pTarget,)", "contents": "removeActionByTag(${1:unsigned_int_tag},${2:CCObject_*pTarget})" }
,
		{ "trigger": "CCActionManager_removeAction(CCAction_*pAction,)", "contents": "removeAction(${1:CCAction_*pAction})" }
,
		{ "trigger": "CCActionManager_pauseTarget(CCObject_*pTarget,)", "contents": "pauseTarget(${1:CCObject_*pTarget})" }
,
		{ "trigger": "CCActionManager_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCActionManager_pauseAllRunningActions()", "contents": "pauseAllRunningActions()" }
,
		{ "trigger": "CCActionManager_removeAllActionsFromTarget(CCObject_*pTarget,)", "contents": "removeAllActionsFromTarget(${1:CCObject_*pTarget})" }
,
		{ "trigger": "CCActionManager_release()", "contents": "release()" }
,
		{ "trigger": "CCActionManager_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCActionManager_getActionByTag(unsigned_int_tag,CCObject_*pTarget,)", "contents": "getActionByTag(${1:unsigned_int_tag},${2:CCObject_*pTarget})" }
,
		{ "trigger": "CCActionManager_retain()", "contents": "retain()" }
,
		{ "trigger": "CCActionManager_removeAllActions()", "contents": "removeAllActions()" }
,

		{ "trigger": "CCSet_copy()", "contents": "copy()" }
,
		{ "trigger": "CCSet_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCSet_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCSet_removeObject(CCObject_*pObject,)", "contents": "removeObject(${1:CCObject_*pObject})" }
,
		{ "trigger": "CCSet_removeAllObjects()", "contents": "removeAllObjects()" }
,
		{ "trigger": "CCSet_anyObject()", "contents": "anyObject()" }
,
		{ "trigger": "CCSet_count()", "contents": "count()" }
,
		{ "trigger": "CCSet_addObject(CCObject_*pObject,)", "contents": "addObject(${1:CCObject_*pObject})" }
,
		{ "trigger": "CCSet_containsObject(CCObject_*pObject,)", "contents": "containsObject(${1:CCObject_*pObject})" }
,
		{ "trigger": "CCSet_release()", "contents": "release()" }
,
		{ "trigger": "CCSet_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCSet_retain()", "contents": "retain()" }
,
		{ "trigger": "CCSet_isSingleReference()", "contents": "isSingleReference()" }
,

		{ "trigger": "CCSpriteFrameCache_addSpriteFramesWithFile(const_char_*pszPlist,CCTexture2D_*pobTexture,)", "contents": "addSpriteFramesWithFile(${1:const_char_*pszPlist},${2:CCTexture2D_*pobTexture})" }
,
		{ "trigger": "CCSpriteFrameCache_addSpriteFrame(CCSpriteFrame_*pobFrame,const_char_*pszFrameName,)", "contents": "addSpriteFrame(${1:CCSpriteFrame_*pobFrame},${2:const_char_*pszFrameName})" }
,
		{ "trigger": "CCSpriteFrameCache_copy()", "contents": "copy()" }
,
		{ "trigger": "CCSpriteFrameCache_removeUnusedSpriteFrames()", "contents": "removeUnusedSpriteFrames()" }
,
		{ "trigger": "CCSpriteFrameCache_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCSpriteFrameCache_removeSpriteFramesFromFile(const_char*_plist,)", "contents": "removeSpriteFramesFromFile(${1:const_char*_plist})" }
,
		{ "trigger": "CCSpriteFrameCache_removeSpriteFramesFromTexture(CCTexture2D*_texture,)", "contents": "removeSpriteFramesFromTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCSpriteFrameCache_addSpriteFramesWithFile(const_char_*pszPlist,)", "contents": "addSpriteFramesWithFile(${1:const_char_*pszPlist})" }
,
		{ "trigger": "CCSpriteFrameCache_addSpriteFramesWithFile(const_char*_plist,const_char*_textureFileName,)", "contents": "addSpriteFramesWithFile(${1:const_char*_plist},${2:const_char*_textureFileName})" }
,
		{ "trigger": "CCSpriteFrameCache_removeSpriteFrames()", "contents": "removeSpriteFrames()" }
,
		{ "trigger": "CCSpriteFrameCache_removeSpriteFrameByName(const_char_*pszName,)", "contents": "removeSpriteFrameByName(${1:const_char_*pszName})" }
,
		{ "trigger": "CCSpriteFrameCache_spriteFrameByName(const_char_*pszName,)", "contents": "spriteFrameByName(${1:const_char_*pszName})" }
,
		{ "trigger": "CCSpriteFrameCache_release()", "contents": "release()" }
,
		{ "trigger": "CCSpriteFrameCache_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCSpriteFrameCache_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCSpriteFrameCache_retain()", "contents": "retain()" }
,
		{ "trigger": "CCSpriteFrameCache_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCSpriteFrameCache_sharedSpriteFrameCache()", "contents": "CCSpriteFrameCache:sharedSpriteFrameCache()" }
,
		{ "trigger": "CCSpriteFrameCache_purgeSharedSpriteFrameCache()", "contents": "CCSpriteFrameCache:purgeSharedSpriteFrameCache()" }
,

		{ "trigger": "CCEaseSineOut_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseSineOut_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseSineOut_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseSineOut_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseSineOut_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseSineOut_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseSineOut_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseSineOut_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseSineOut_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseSineOut_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseSineOut_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseSineOut_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseSineOut_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseSineOut_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseSineOut_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseSineOut_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseSineOut_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseSineOut_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseSineOut_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseSineOut_create(CCActionInterval*_pAction,)", "contents": "CCEaseSineOut:create(${1:CCActionInterval*_pAction})" }
,

		{ "trigger": "CCTransitionProgressInOut_create(float_t,CCScene*_scene,)", "contents": "CCTransitionProgressInOut:create(${1:float_t},${2:CCScene*_scene})" }
,


		{ "trigger": "CCEditBox_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCEditBox_setTitleTTFSizeForState(float_size,CCControlState_state,)", "contents": "setTitleTTFSizeForState(${1:float_size},${2:CCControlState_state})" }
,
		{ "trigger": "CCEditBox_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCEditBox_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCEditBox_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCEditBox_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCEditBox_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCEditBox_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCEditBox_setInputMode(EditBoxInputMode_inputMode,)", "contents": "setInputMode(${1:EditBoxInputMode_inputMode})" }
,
		{ "trigger": "CCEditBox_getCurrentTitle()", "contents": "getCurrentTitle()" }
,
		{ "trigger": "CCEditBox_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCEditBox_setTitleDispatchTable(CCDictionary*_var,)", "contents": "setTitleDispatchTable(${1:CCDictionary*_var})" }
,
		{ "trigger": "CCEditBox_setOpacityModifyRGB(bool_bOpacityModifyRGB,)", "contents": "setOpacityModifyRGB(${1:bool_bOpacityModifyRGB})" }
,
		{ "trigger": "CCEditBox_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCEditBox_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCEditBox_init()", "contents": "init()" }
,
		{ "trigger": "CCEditBox_draw()", "contents": "draw()" }
,
		{ "trigger": "CCEditBox_getText()", "contents": "getText()" }
,
		{ "trigger": "CCEditBox_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCEditBox_setMargins(int_marginH,int_marginV,)", "contents": "setMargins(${1:int_marginH},${2:int_marginV})" }
,
		{ "trigger": "CCEditBox_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCEditBox_registerScriptEditBoxHandler(LUA_FUNCTION_handler,)", "contents": "registerScriptEditBoxHandler(${1:LUA_FUNCTION_handler})" }
,
		{ "trigger": "CCEditBox_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCEditBox_ccTouchBegan(CCTouch_*pTouch,CCEvent_*pEvent,)", "contents": "ccTouchBegan(${1:CCTouch_*pTouch},${2:CCEvent_*pEvent})" }
,
		{ "trigger": "CCEditBox_isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" }
,
		{ "trigger": "CCEditBox_getTitleDispatchTable()", "contents": "getTitleDispatchTable()" }
,
		{ "trigger": "CCEditBox_setHighlighted(bool_enabled,)", "contents": "setHighlighted(${1:bool_enabled})" }
,
		{ "trigger": "CCEditBox_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCEditBox_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCEditBox_initWithBackgroundSprite(CCScale9Sprite*_sprite,)", "contents": "initWithBackgroundSprite(${1:CCScale9Sprite*_sprite})" }
,
		{ "trigger": "CCEditBox_setPlaceHolder(const_char*_pText,)", "contents": "setPlaceHolder(${1:const_char*_pText})" }
,
		{ "trigger": "CCEditBox_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCEditBox_needsLayout()", "contents": "needsLayout()" }
,
		{ "trigger": "CCEditBox_visit()", "contents": "visit()" }
,
		{ "trigger": "CCEditBox_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCEditBox_isHighlighted()", "contents": "isHighlighted()" }
,
		{ "trigger": "CCEditBox_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCEditBox_registerScriptAccelerateHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptAccelerateHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCEditBox_registerWithTouchDispatcher()", "contents": "registerWithTouchDispatcher()" }
,
		{ "trigger": "CCEditBox_getCurrentTitleColor()", "contents": "getCurrentTitleColor()" }
,
		{ "trigger": "CCEditBox_getTouchMode()", "contents": "getTouchMode()" }
,
		{ "trigger": "CCEditBox_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCEditBox_setLabelAnchorPoint(CCPoint_var,)", "contents": "setLabelAnchorPoint(${1:CCPoint_var})" }
,
		{ "trigger": "CCEditBox_setAccelerometerEnabled(bool_bValue,)", "contents": "setAccelerometerEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCEditBox_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCEditBox_getPlaceHolder()", "contents": "getPlaceHolder()" }
,
		{ "trigger": "CCEditBox_getScriptEditBoxHandler()", "contents": "getScriptEditBoxHandler()" }
,
		{ "trigger": "CCEditBox_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCEditBox_unregisterScriptTouchHandler()", "contents": "unregisterScriptTouchHandler()" }
,
		{ "trigger": "CCEditBox_getDisplayedColor()", "contents": "getDisplayedColor()" }
,
		{ "trigger": "CCEditBox_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCEditBox_ccTouchEnded(CCTouch_*pTouch,CCEvent_*pEvent,)", "contents": "ccTouchEnded(${1:CCTouch_*pTouch},${2:CCEvent_*pEvent})" }
,
		{ "trigger": "CCEditBox_getTitleLabel()", "contents": "getTitleLabel()" }
,
		{ "trigger": "CCEditBox_setTitleLabel(CCNode*_var,)", "contents": "setTitleLabel(${1:CCNode*_var})" }
,
		{ "trigger": "CCEditBox_getRotationY()", "contents": "getRotationY()" }
,
		{ "trigger": "CCEditBox_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCEditBox_getVerticalMargin()", "contents": "getVerticalMargin()" }
,
		{ "trigger": "CCEditBox_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCEditBox_doesAdjustBackgroundImage()", "contents": "doesAdjustBackgroundImage()" }
,
		{ "trigger": "CCEditBox_setVisible(bool_visible,)", "contents": "setVisible(${1:bool_visible})" }
,
		{ "trigger": "CCEditBox_setPlaceholderFontName(const_char*_pFontName,)", "contents": "setPlaceholderFontName(${1:const_char*_pFontName})" }
,
		{ "trigger": "CCEditBox_setTitleBMFontForState(const_char_*_fntFile,CCControlState_state,)", "contents": "setTitleBMFontForState(${1:const_char_*_fntFile},${2:CCControlState_state})" }
,
		{ "trigger": "CCEditBox_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCEditBox_getTitleTTFSizeForState(CCControlState_state,)", "contents": "getTitleTTFSizeForState(${1:CCControlState_state})" }
,
		{ "trigger": "CCEditBox_getState()", "contents": "getState()" }
,
		{ "trigger": "CCEditBox_getTitleColorDispatchTable()", "contents": "getTitleColorDispatchTable()" }
,
		{ "trigger": "CCEditBox_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCEditBox_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCEditBox_ccTouchMoved(CCTouch_*pTouch,CCEvent_*pEvent,)", "contents": "ccTouchMoved(${1:CCTouch_*pTouch},${2:CCEvent_*pEvent})" }
,
		{ "trigger": "CCEditBox_setFont(const_char*_pFontName,int_fontSize,)", "contents": "setFont(${1:const_char*_pFontName},${2:int_fontSize})" }
,
		{ "trigger": "CCEditBox_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCEditBox_registerScriptKeypadHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptKeypadHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCEditBox_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCEditBox_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCEditBox_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCEditBox_setTitleTTFForState(const_char_*_fntFile,CCControlState_state,)", "contents": "setTitleTTFForState(${1:const_char_*_fntFile},${2:CCControlState_state})" }
,
		{ "trigger": "CCEditBox_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCEditBox_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCEditBox_getComponent(const_char_*pName,)", "contents": "getComponent(${1:const_char_*pName})" }
,
		{ "trigger": "CCEditBox_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCEditBox_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCEditBox_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCEditBox_setKeypadEnabled(bool_bValue,)", "contents": "setKeypadEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCEditBox_isSelected()", "contents": "isSelected()" }
,
		{ "trigger": "CCEditBox_getHorizontalOrigin()", "contents": "getHorizontalOrigin()" }
,
		{ "trigger": "CCEditBox_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCEditBox_setTouchPriority(int_priority,)", "contents": "setTouchPriority(${1:int_priority})" }
,
		{ "trigger": "CCEditBox_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCEditBox_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCEditBox_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCEditBox_ccTouchCancelled(CCTouch_*pTouch,CCEvent_*pEvent,)", "contents": "ccTouchCancelled(${1:CCTouch_*pTouch},${2:CCEvent_*pEvent})" }
,
		{ "trigger": "CCEditBox_setTitleLabelForState(CCNode*_label,CCControlState_state,)", "contents": "setTitleLabelForState(${1:CCNode*_label},${2:CCControlState_state})" }
,
		{ "trigger": "CCEditBox_setBackgroundSpriteForState(CCScale9Sprite*_sprite,CCControlState_state,)", "contents": "setBackgroundSpriteForState(${1:CCScale9Sprite*_sprite},${2:CCControlState_state})" }
,
		{ "trigger": "CCEditBox_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCEditBox_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCEditBox_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCEditBox_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCEditBox_isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" }
,
		{ "trigger": "CCEditBox_setSelected(bool_bSelected,)", "contents": "setSelected(${1:bool_bSelected})" }
,
		{ "trigger": "CCEditBox_setTouchEnabled(bool_bValue,)", "contents": "setTouchEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCEditBox_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCEditBox_init()", "contents": "init()" }
,
		{ "trigger": "CCEditBox_updateDisplayedColor(const_ccColor3B&_color,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCEditBox_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCEditBox_getBackgroundSpriteForState(CCControlState_state,)", "contents": "getBackgroundSpriteForState(${1:CCControlState_state})" }
,
		{ "trigger": "CCEditBox_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCEditBox_getTitleLabelDispatchTable()", "contents": "getTitleLabelDispatchTable()" }
,
		{ "trigger": "CCEditBox_setCascadeOpacityEnabled(bool_cascadeOpacityEnabled,)", "contents": "setCascadeOpacityEnabled(${1:bool_cascadeOpacityEnabled})" }
,
		{ "trigger": "CCEditBox_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCEditBox_setInputFlag(EditBoxInputFlag_inputFlag,)", "contents": "setInputFlag(${1:EditBoxInputFlag_inputFlag})" }
,
		{ "trigger": "CCEditBox_setTouchMode(ccTouchesMode_mode,)", "contents": "setTouchMode(${1:ccTouchesMode_mode})" }
,
		{ "trigger": "CCEditBox_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCEditBox_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "CCEditBox_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCEditBox_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCEditBox_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCEditBox_setEnabled(bool_bEnabled,)", "contents": "setEnabled(${1:bool_bEnabled})" }
,
		{ "trigger": "CCEditBox_setBackgroundSpriteDispatchTable(CCDictionary*_var,)", "contents": "setBackgroundSpriteDispatchTable(${1:CCDictionary*_var})" }
,
		{ "trigger": "CCEditBox_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCEditBox_getBackgroundSprite()", "contents": "getBackgroundSprite()" }
,
		{ "trigger": "CCEditBox_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCEditBox_initWithLabelAndBackgroundSprite(CCNode*_label,CCScale9Sprite*_backgroundSprite,)", "contents": "initWithLabelAndBackgroundSprite(${1:CCNode*_label},${2:CCScale9Sprite*_backgroundSprite})" }
,
		{ "trigger": "CCEditBox_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEditBox_setPreferredSize(CCSize_var,)", "contents": "setPreferredSize(${1:CCSize_var})" }
,
		{ "trigger": "CCEditBox_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCEditBox_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCEditBox_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCEditBox_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEditBox_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCEditBox_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCEditBox_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCEditBox_getZoomOnTouchDown()", "contents": "getZoomOnTouchDown()" }
,
		{ "trigger": "CCEditBox_setPlaceholderFontSize(int_fontSize,)", "contents": "setPlaceholderFontSize(${1:int_fontSize})" }
,
		{ "trigger": "CCEditBox_getRotationX()", "contents": "getRotationX()" }
,
		{ "trigger": "CCEditBox_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCEditBox_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCEditBox_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCEditBox_unregisterScriptKeypadHandler()", "contents": "unregisterScriptKeypadHandler()" }
,
		{ "trigger": "CCEditBox_setPlaceholderFontColor(const_ccColor3B&_color,)", "contents": "setPlaceholderFontColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCEditBox_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCEditBox_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCEditBox_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCEditBox_removeHandleOfControlEvent(CCControlEvent_controlEvents,)", "contents": "removeHandleOfControlEvent(${1:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCEditBox_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCEditBox_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCEditBox_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCEditBox_setTitleLabelDispatchTable(CCDictionary*_var,)", "contents": "setTitleLabelDispatchTable(${1:CCDictionary*_var})" }
,
		{ "trigger": "CCEditBox_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCEditBox_setOpacity(GLubyte_var,)", "contents": "setOpacity(${1:GLubyte_var})" }
,
		{ "trigger": "CCEditBox_getTouchLocation(CCTouch*_touch,)", "contents": "getTouchLocation(${1:CCTouch*_touch})" }
,
		{ "trigger": "CCEditBox_getPreferredSize()", "contents": "getPreferredSize()" }
,
		{ "trigger": "CCEditBox_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCEditBox_sendActionsForControlEvents(CCControlEvent_controlEvents,)", "contents": "sendActionsForControlEvents(${1:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCEditBox_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCEditBox_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEditBox_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCEditBox_setSelected(bool_enabled,)", "contents": "setSelected(${1:bool_enabled})" }
,
		{ "trigger": "CCEditBox_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCEditBox_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCEditBox_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCEditBox_removeTargetWithActionForControlEvents(CCObject*_target,SEL_CCControlHandler_action,CCControlEvent_controlEvents,)", "contents": "removeTargetWithActionForControlEvents(${1:CCObject*_target},${2:SEL_CCControlHandler_action},${3:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCEditBox_setFontSize(int_fontSize,)", "contents": "setFontSize(${1:int_fontSize})" }
,
		{ "trigger": "CCEditBox_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEditBox_updateDisplayedColor(const_ccColor3B&_parentColor,)", "contents": "updateDisplayedColor(${1:const_ccColor3B&_parentColor})" }
,
		{ "trigger": "CCEditBox_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCEditBox_isPushed()", "contents": "isPushed()" }
,
		{ "trigger": "CCEditBox_setTitleColorDispatchTable(CCDictionary*_var,)", "contents": "setTitleColorDispatchTable(${1:CCDictionary*_var})" }
,
		{ "trigger": "CCEditBox_isKeypadEnabled()", "contents": "isKeypadEnabled()" }
,
		{ "trigger": "CCEditBox_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEditBox_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCEditBox_initWithSizeAndBackgroundSprite(const_CCSize&_size,CCScale9Sprite*_pNormal9SpriteBg,)", "contents": "initWithSizeAndBackgroundSprite(${1:const_CCSize&_size},${2:CCScale9Sprite*_pNormal9SpriteBg})" }
,
		{ "trigger": "CCEditBox_hasVisibleParents()", "contents": "hasVisibleParents()" }
,
		{ "trigger": "CCEditBox_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCEditBox_getTitleForState(CCControlState_state,)", "contents": "getTitleForState(${1:CCControlState_state})" }
,
		{ "trigger": "CCEditBox_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCEditBox_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCEditBox_transform()", "contents": "transform()" }
,
		{ "trigger": "CCEditBox_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEditBox_registerScriptTouchHandler(LUA_FUNCTION_nHandler,bool_bIsMultiTouches_=_false,int_nPriority_=_0,bool_bSwallowsTouches_=_false,)", "contents": "registerScriptTouchHandler(${1:LUA_FUNCTION_nHandler},${2:bool_bIsMultiTouches_=_false},${3:int_nPriority_=_0},${4:bool_bSwallowsTouches_=_false})" }
,
		{ "trigger": "CCEditBox_isTouchInside(CCTouch_*_touch,)", "contents": "isTouchInside(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCEditBox_touchDownAction(CCObject_*sender,CCControlEvent_controlEvent,)", "contents": "touchDownAction(${1:CCObject_*sender},${2:CCControlEvent_controlEvent})" }
,
		{ "trigger": "CCEditBox_setCascadeColorEnabled(bool_cascadeColorEnabled,)", "contents": "setCascadeColorEnabled(${1:bool_cascadeColorEnabled})" }
,
		{ "trigger": "CCEditBox_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCEditBox_getTitleColorForState(CCControlState_state,)", "contents": "getTitleColorForState(${1:CCControlState_state})" }
,
		{ "trigger": "CCEditBox_getMaxLength()", "contents": "getMaxLength()" }
,
		{ "trigger": "CCEditBox_setMaxLength(int_maxLength,)", "contents": "setMaxLength(${1:int_maxLength})" }
,
		{ "trigger": "CCEditBox_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCEditBox_getTitleTTFForState(CCControlState_state,)", "contents": "getTitleTTFForState(${1:CCControlState_state})" }
,
		{ "trigger": "CCEditBox_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCEditBox_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCEditBox_initWithTitleAndFontNameAndFontSize(std::string_title,const_char_*_fontName,float_fontSize,)", "contents": "initWithTitleAndFontNameAndFontSize(${1:std::string_title},${2:const_char_*_fontName},${3:float_fontSize})" }
,
		{ "trigger": "CCEditBox_setFontColor(const_ccColor3B&_color,)", "contents": "setFontColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCEditBox_setText(const_char*_pText,)", "contents": "setText(${1:const_char*_pText})" }
,
		{ "trigger": "CCEditBox_description()", "contents": "description()" }
,
		{ "trigger": "CCEditBox_setBackgroundSpriteFrameForState(CCSpriteFrame_*_spriteFrame,CCControlState_state,)", "contents": "setBackgroundSpriteFrameForState(${1:CCSpriteFrame_*_spriteFrame},${2:CCControlState_state})" }
,
		{ "trigger": "CCEditBox_setAdjustBackgroundImage(bool_adjustBackgroundImage,)", "contents": "setAdjustBackgroundImage(${1:bool_adjustBackgroundImage})" }
,
		{ "trigger": "CCEditBox_release()", "contents": "release()" }
,
		{ "trigger": "CCEditBox_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCEditBox_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCEditBox_setPlaceholderFont(const_char*_pFontName,int_fontSize,)", "contents": "setPlaceholderFont(${1:const_char*_pFontName},${2:int_fontSize})" }
,
		{ "trigger": "CCEditBox_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCEditBox_getBackgroundSpriteDispatchTable()", "contents": "getBackgroundSpriteDispatchTable()" }
,
		{ "trigger": "CCEditBox_getTitleBMFontForState(CCControlState_state,)", "contents": "getTitleBMFontForState(${1:CCControlState_state})" }
,
		{ "trigger": "CCEditBox_updateDisplayedOpacity(GLubyte_parentOpacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_parentOpacity})" }
,
		{ "trigger": "CCEditBox_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCEditBox_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCEditBox_updateDisplayedOpacity(GLubyte_opacity,)", "contents": "updateDisplayedOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCEditBox_setZOrder(int_zOrder,)", "contents": "setZOrder(${1:int_zOrder})" }
,
		{ "trigger": "CCEditBox_setHighlighted(bool_bHighlighted,)", "contents": "setHighlighted(${1:bool_bHighlighted})" }
,
		{ "trigger": "CCEditBox_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCEditBox_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCEditBox_needsLayout()", "contents": "needsLayout()" }
,
		{ "trigger": "CCEditBox_setReturnType(KeyboardReturnType_returnType,)", "contents": "setReturnType(${1:KeyboardReturnType_returnType})" }
,
		{ "trigger": "CCEditBox_unregisterScriptAccelerateHandler()", "contents": "unregisterScriptAccelerateHandler()" }
,
		{ "trigger": "CCEditBox_setBackgroundSprite(CCScale9Sprite*_var,)", "contents": "setBackgroundSprite(${1:CCScale9Sprite*_var})" }
,
		{ "trigger": "CCEditBox_onEnter()", "contents": "onEnter()" }
,
		{ "trigger": "CCEditBox_onExit()", "contents": "onExit()" }
,
		{ "trigger": "CCEditBox_addTargetWithActionForControlEvents(CCObject*_target,SEL_CCControlHandler_action,CCControlEvent_controlEvents,)", "contents": "addTargetWithActionForControlEvents(${1:CCObject*_target},${2:SEL_CCControlHandler_action},${3:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCEditBox_getTitleLabelForState(CCControlState_state,)", "contents": "getTitleLabelForState(${1:CCControlState_state})" }
,
		{ "trigger": "CCEditBox_onExit()", "contents": "onExit()" }
,
		{ "trigger": "CCEditBox_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCEditBox_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCEditBox_isAccelerometerEnabled()", "contents": "isAccelerometerEnabled()" }
,
		{ "trigger": "CCEditBox_setZoomOnTouchDown(bool_var,)", "contents": "setZoomOnTouchDown(${1:bool_var})" }
,
		{ "trigger": "CCEditBox_getDisplayedOpacity()", "contents": "getDisplayedOpacity()" }
,
		{ "trigger": "CCEditBox_getTouchPriority()", "contents": "getTouchPriority()" }
,
		{ "trigger": "CCEditBox_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCEditBox_setTitleColorForState(ccColor3B_color,CCControlState_state,)", "contents": "setTitleColorForState(${1:ccColor3B_color},${2:CCControlState_state})" }
,
		{ "trigger": "CCEditBox_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCEditBox_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCEditBox_addHandleOfControlEvent(LUA_FUNCTION_nFunID,CCControlEvent_controlEvents,)", "contents": "addHandleOfControlEvent(${1:LUA_FUNCTION_nFunID},${2:CCControlEvent_controlEvents})" }
,
		{ "trigger": "CCEditBox_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "CCEditBox_setTitleForState(CCString*_title,CCControlState_state,)", "contents": "setTitleForState(${1:CCString*_title},${2:CCControlState_state})" }
,
		{ "trigger": "CCEditBox_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCEditBox_getLabelAnchorPoint()", "contents": "getLabelAnchorPoint()" }
,
		{ "trigger": "CCEditBox_setFontName(const_char*_pFontName,)", "contents": "setFontName(${1:const_char*_pFontName})" }
,
		{ "trigger": "CCEditBox_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCEditBox_unregisterScriptEditBoxHandler()", "contents": "unregisterScriptEditBoxHandler()" }
,
		{ "trigger": "CCEditBox_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEditBox_onEnter()", "contents": "onEnter()" }
,
		{ "trigger": "CCEditBox_create(const_CCSize&_size,CCScale9Sprite*_pNormal9SpriteBg,CCScale9Sprite*_pPressed9SpriteBg_=_NULL,CCScale9Sprite*_pDisabled9SpriteBg_=_NULL,)", "contents": "CCEditBox:create(${1:const_CCSize&_size},${2:CCScale9Sprite*_pNormal9SpriteBg},${3:CCScale9Sprite*_pPressed9SpriteBg_=_NULL},${4:CCScale9Sprite*_pDisabled9SpriteBg_=_NULL})" }
,

		{ "trigger": "CCTransitionProgressOutIn_create(float_t,CCScene*_scene,)", "contents": "CCTransitionProgressOutIn:create(${1:float_t},${2:CCScene*_scene})" }

	]
}
